/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#if defined(TRACING)
class TraceClass
{
	public: 
	const char * mFileName ;
	const int mLineNumber ;
	const char * mReason ;
	TraceClass(const char * aFileName, int aLineNumber): mFileName(aFileName), mLineNumber(aLineNumber), mReason("None") { } 
	TraceClass(const char * aFileName, int aLineNumber, const char * aReason): mFileName(aFileName), mLineNumber(aLineNumber), mReason(aReason) { } 
	const char * getFileName(void) const { return mFileName ; } 
	int getLineNumber(void) const { return mLineNumber ; } 
	const char * getReason(void) const { return mReason ; } 
} ;
#define TRACEMACRO TraceClass(__FILE__,__LINE__) 
#define TRACEMACROREASON(X) TraceClass(__FILE__,__LINE__,X) 
#else
class TraceClass
{
	public: 
	TraceClass(const char * aFileName, int aLineNumber) { } 
	TraceClass(const char * aFileName, int aLineNumber, const char * aReason) { } 
	const char * getFileName(void) const { return 0 ; } 
	int getLineNumber(void) const { return 0 ; } 
	const char * getReason(void) const { return 0 ; } 
} ;
#define TRACEMACRO *(TraceClass*) 0 
#define TRACEMACROREASON(X) *(TraceClass*) 0 

#endif


void show_char(const char *) ;
void show_int(int) ;

static inline void * PlatHeapAlloc(const TraceClass& aTraceClass, int size)
{
#if defined(TRACING)	
	show_char(aTraceClass.getFileName()) ; 
	show_int(aTraceClass.getLineNumber()) ;
	show_char(aTraceClass.getReason()) ;
#endif
    return 0 ;	
//	BegLogLine(1) 
//	  << "Called from " << aTraceClass.getFileName() 
//	  << " line " << aTraceClass.getLineNumber() 
//	  << " because " << aTraceClass.getReason() 
//	  << EndLogLine ;
}

void invokeAlloc(void)
{
	PlatHeapAlloc(TRACEMACRO, 42) ; 
	PlatHeapAlloc(TRACEMACROREASON("For some memory"), 43) ; 
}
