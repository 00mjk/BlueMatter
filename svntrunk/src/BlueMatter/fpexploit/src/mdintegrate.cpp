/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#include <BlueMatter/fpexploit.hpp>

void UpdateVelocity(
    XYZAv * Velocities
  , const double * TimeByMasses
  , const XYZAf * Forces
  , int AtomCount
  )
{
   #pragma disjoint(*Velocities,*Forces)
   #pragma disjoint(*Velocities, *TimeByMasses)

   QuadWordAligned(Velocities) ;
   QuadWordAligned(Forces) ;

   XYZAv TempVelocities[256] ;

   {
   for (int q=0; q<AtomCount; q+=1)
   {
      double rX = Velocities[q].mXYZ.mX + Forces[q].mXYZ.mX * TimeByMasses[q] ;
      double rY = Velocities[q].mXYZ.mY + Forces[q].mXYZ.mY * TimeByMasses[q] ;
      double rZ = Velocities[q].mXYZ.mZ + Forces[q].mXYZ.mZ * TimeByMasses[q] ;
      TempVelocities[q].mXYZ.mX = rX ;
      TempVelocities[q].mXYZ.mY = rY ;
      TempVelocities[q].mXYZ.mZ = rZ ;
   } /* endfor */
   }

   {
   for (int q=0; q<AtomCount; q+=1)
   {
      Velocities[q].mXYZ.mX = TempVelocities[q].mXYZ.mX ;
      Velocities[q].mXYZ.mY = TempVelocities[q].mXYZ.mY ;
      Velocities[q].mXYZ.mZ = TempVelocities[q].mXYZ.mZ ;
   } /* endfor */
   }
}

void UpdatePositions(
    XYZAp * Positions
  , const XYZAv * Velocities
  , double TimeStep
  , int AtomCount
)
{
   #pragma disjoint(*Positions, *Velocities)

   QuadWordAligned(Positions) ;
   QuadWordAligned(Velocities) ;

   for (int x=0; x<AtomCount; x+=1)
   {
      Positions[x].mXYZ = Positions[x].mXYZ + Velocities[x].mXYZ * TimeStep ;
   } /* endfor */

}

