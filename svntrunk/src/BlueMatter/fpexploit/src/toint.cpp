/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 void toint(const double* d, int* i, unsigned int groupcount)
{
   double d0 = d[0] ;
   double d1 = d[1] ;
   double d2 = d[2] ;
   double d3 = d[3] ;
   double d4 = d[4] ;
   double d5 = d[5] ;
   double d6 = d[6] ;
   double d7 = d[7] ;
   double d8 = d[8] ;
   double d9 = d[9] ;
   i[0] = d0 ;
   i[1] = d1 ;
   i[2] = d2 ;
   i[3] = d3 ;
   i[4] = d4 ;
   i[5] = d5 ;
   i[6] = d6 ;
   i[7] = d7 ;
   i[8] = d8 ;
   i[9] = d9 ;
}

void tofromint(const double* d, double * di, unsigned int groupcount)
{
   double d0 = d[0] ;
   double d1 = d[1] ;
   double d2 = d[2] ;
   double d3 = d[3] ;
   double d4 = d[4] ;
   double d5 = d[5] ;
   double d6 = d[6] ;
   double d7 = d[7] ;
   double d8 = d[8] ;
   double d9 = d[9] ;
   int i0 = d0 ;
   int i1 = d1 ;
   int i2 = d2 ;
   int i3 = d3 ;
   int i4 = d4 ;
   int i5 = d5 ;
   int i6 = d6 ;
   int i7 = d7 ;
   int i8 = d8 ;
   int i9 = d9 ;
   unsigned int u0 = (i0 & 0xffff) ;
   unsigned int u1 = (i1 & 0xffff) ;
   unsigned int u2 = (i2 & 0xffff) ;
   unsigned int u3 = (i3 & 0xffff) ;
   unsigned int u4 = (i4 & 0xffff) ;
   unsigned int u5 = (i5 & 0xffff) ;
   unsigned int u6 = (i6 & 0xffff) ;
   unsigned int u7 = (i7 & 0xffff) ;
   unsigned int u8 = (i8 & 0xffff) ;
   unsigned int u9 = (i9 & 0xffff) ;
   di[0] = u0 ;
   di[1] = u1 ;
   di[2] = u2 ;
   di[3] = u3 ;
   di[4] = u4 ;
   di[5] = u5 ;
   di[6] = u6 ;
   di[7] = u7 ;
   di[8] = u8 ;
   di[9] = u9 ;
}

void tointx(int* i, const double* da,const double* db,const double* dc,const double* dd,const double* de)
{
   double d0 = da[0] ;
   double d1 = da[1] ;
   double d2 = db[0] ;
   double d3 = db[1] ;
   double d4 = dc[0] ;
   double d5 = dc[1] ;
   double d6 = dd[0] ;
   double d7 = dd[1] ;
   double d8 = de[0] ;
   double d9 = de[1] ;
   i[0] = d0 ;
   i[1] = d1 ;
   i[2] = d2 ;
   i[3] = d3 ;
   i[4] = d4 ;
   i[5] = d5 ;
   i[6] = d6 ;
   i[7] = d7 ;
   i[8] = d8 ;
   i[9] = d9 ;
}

void tofromintx( double* di, const double* da,const double* db,const double* dc,const double* dd,const double* de)
{
   double d0 = da[0] ;
   double d1 = da[1] ;
   double d2 = db[0] ;
   double d3 = db[1] ;
   double d4 = dc[0] ;
   double d5 = dc[1] ;
   double d6 = dd[0] ;
   double d7 = dd[1] ;
   double d8 = de[0] ;
   double d9 = de[1] ;
   int i0 = d0 ;
   int i1 = d1 ;
   int i2 = d2 ;
   int i3 = d3 ;
   int i4 = d4 ;
   int i5 = d5 ;
   int i6 = d6 ;
   int i7 = d7 ;
   int i8 = d8 ;
   int i9 = d9 ;
   unsigned int u0 = (i0 & 0xffff) ;
   unsigned int u1 = (i1 & 0xffff) ;
   unsigned int u2 = (i2 & 0xffff) ;
   unsigned int u3 = (i3 & 0xffff) ;
   unsigned int u4 = (i4 & 0xffff) ;
   unsigned int u5 = (i5 & 0xffff) ;
   unsigned int u6 = (i6 & 0xffff) ;
   unsigned int u7 = (i7 & 0xffff) ;
   unsigned int u8 = (i8 & 0xffff) ;
   unsigned int u9 = (i9 & 0xffff) ;
   di[0] = u0 ;
   di[1] = u1 ;
   di[2] = u2 ;
   di[3] = u3 ;
   di[4] = u4 ;
   di[5] = u5 ;
   di[6] = u6 ;
   di[7] = u7 ;
   di[8] = u8 ;
   di[9] = u9 ;
}
