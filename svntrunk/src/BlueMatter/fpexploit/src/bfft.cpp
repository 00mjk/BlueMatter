/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include <BlueMatter/fft128.hpp>
#include <iostream.h>
#include <iomanip.h>

void clear_fft128(fft128& x)
{
   for (int a=0; a<fft128::k_points; a+=1 )
   {
     x.m_table[a].re = 0.0 ;
     x.m_table[a].im = 0.0 ;
   } /* endfor */
}

void show_fft128(ostream& dest, const fft128& x)
{
   dest << endl ;
   for (int a=0; a<fft128::k_points; a+=1 )
   {
      dest << setw(4) << a << setw(20) << x.m_table[a].re << setw(20) << x.m_table[a].im << endl ;
   }
}

int main(void)
{
   fft128 x ;
   clear_fft128(x) ;
   x.m_table[0].re = 1.0 ;
   show_fft128(cout, x) ;
   x.inline_forward() ;
   show_fft128(cout, x) ;
   x.inline_inverse() ;
   show_fft128(cout, x) ;
   return 0 ;
}
