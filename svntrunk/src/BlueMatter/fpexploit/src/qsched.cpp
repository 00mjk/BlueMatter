/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include <math.h>

// 'fsel' is a built-in instruction on PPCGR and above, sometimes we want to force its use
#if defined(ARCH_HAS_FSEL)
#include <builtins.h>
#define fsel(a, x, y) __fsel((a),(x),(y))
#else
#define fsel(a, x, y) ( (a) >= 0.0 ? (x) : (y) )
#endif

class XYZ
{
   public:
     double mX ;
     double mY ;
     double mZ ;

   double LengthSquared(void) const
   {
      return mX*mX + mY*mY + mZ*mZ ;
   } ;

} ;


void foo( double& a, const XYZ* v, double tsq_hi, double tsq_lo , double* m, double* c)
{
   double lsq0 = v[0].LengthSquared() ;
   double lsq1 = v[1].LengthSquared() ;
   double lsq2 = v[2].LengthSquared() ;

   int bh0 = ( lsq0 < tsq_hi ) ;
   int bh1 = ( lsq1 < tsq_hi ) ;
   int bh2 = ( lsq2 < tsq_hi ) ;

   int bAny = bh0 || bh1 || bh2 ;

   if (bAny)
   {
      double r0 = 1.0/sqrt(lsq0) ;
      double r1 = 1.0/sqrt(lsq1) ;
      double r2 = 1.0/sqrt(lsq2) ;

      int bl0 = ( lsq0 < tsq_lo ) ;
      int bl1 = ( lsq1 < tsq_lo ) ;
      int bl2 = ( lsq2 < tsq_lo ) ;

      int bAll = bl0 && bl1 && bl2 ;
      if (bAll)
      {
         a += (*m)*(1.0/sqrt(r0+r1+r2))+(*c) ;
      }
      else
      {
         a += (*m)*(1.0/sqrt(r0+r1+r2))-(*c) ;
      } /* endif */
   } /* endif */


} ;

