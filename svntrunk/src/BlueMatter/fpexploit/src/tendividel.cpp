/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 // **********************************************************************
//                       CVS INFORMATION
//
// SOURCE: $Source$
// REVISION: $Revision: 5094 $
// DATE: $Date: 2003-05-01 13:35:14 -0400 (Thu, 01 May 2003) $
// AUTHOR: $Author: tjcw $
// TAG NAME (if applicable): $Name$
// **********************************************************************

#include <math.h>
void tendividel(double* f, const double* x, const double * y, int groupcount)
{
   double x0 = x[0] ;
   double x1 = x[1] ;
   double x2 = x[2] ;
   double x3 = x[3] ;
   double x4 = x[4] ;
   double x5 = x[5] ;
   double x6 = x[6] ;
   double x7 = x[7] ;
   double x8 = x[8] ;
   double x9 = x[9] ;
   double y0 = y[0] ;
   double y1 = y[1] ;
   double y2 = y[2] ;
   double y3 = y[3] ;
   double y4 = y[4] ;
   double y5 = y[5] ;
   double y6 = y[6] ;
   double y7 = y[7] ;
   double y8 = y[8] ;
   double y9 = y[9] ;
   for (int a=0; a < groupcount; a+=1)
   {
     double r0 = x0 / y0 ;
     double r1 = x1 / y1 ;
     double r2 = x2 / y2 ;
     double r3 = x3 / y3 ;
     double r4 = x4 / y4 ;
     double r5 = x5 / y5 ;
     double r6 = x6 / y6 ;
     double r7 = x7 / y7 ;
     double r8 = x8 / y8 ;
     double r9 = x9 / y9 ;
     x0 = x[a*10+10] ;
     x1 = x[a*10+11] ;
     x2 = x[a*10+12] ;
     x3 = x[a*10+13] ;
     x4 = x[a*10+14] ;
     x5 = x[a*10+15] ;
     x6 = x[a*10+16] ;
     x7 = x[a*10+17] ;
     x8 = x[a*10+18] ;
     x9 = x[a*10+19] ;
     y0 = y[a*10+10] ;
     y1 = y[a*10+11] ;
     y2 = y[a*10+12] ;
     y3 = y[a*10+13] ;
     y4 = y[a*10+14] ;
     y5 = y[a*10+15] ;
     y6 = y[a*10+16] ;
     y7 = y[a*10+17] ;
     y8 = y[a*10+18] ;
     y9 = y[a*10+19] ;
     f[a*10+0] = r0 ;
     f[a*10+1] = r1 ;
     f[a*10+2] = r2 ;
     f[a*10+3] = r3 ;
     f[a*10+4] = r4 ;
     f[a*10+5] = r5 ;
     f[a*10+6] = r6 ;
     f[a*10+7] = r7 ;
     f[a*10+8] = r8 ;
     f[a*10+9] = r9 ;
   } /* endfor */
}
