/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*
 * Store-then-load delay tuning
 */
#include <stdlib.h>
double lstune0(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune1(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune2(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune3(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   volatile double ta3 = x ;
   volatile double tb3 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune4(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   volatile double ta3 = x ;
   volatile double tb3 = x ;

   volatile double ta4 = x ;
   volatile double tb4 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune5(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   volatile double ta3 = x ;
   volatile double tb3 = x ;

   volatile double ta4 = x ;
   volatile double tb4 = x ;

   volatile double ta5 = x ;
   volatile double tb5 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune6(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   volatile double ta3 = x ;
   volatile double tb3 = x ;

   volatile double ta4 = x ;
   volatile double tb4 = x ;

   volatile double ta5 = x ;
   volatile double tb5 = x ;

   volatile double ta6 = x ;
   volatile double tb6 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

double lstune7(double a, double b)
{
   double x=a/b ;
   volatile double ta0 = x ;
   volatile double tb0 = x ;

   volatile double ta1 = x ;
   volatile double tb1 = x ;

   volatile double ta2 = x ;
   volatile double tb2 = x ;

   volatile double ta3 = x ;
   volatile double tb3 = x ;

   volatile double ta4 = x ;
   volatile double tb4 = x ;

   volatile double ta5 = x ;
   volatile double tb5 = x ;

   volatile double ta6 = x ;
   volatile double tb6 = x ;

   volatile double ta7 = x ;
   volatile double tb7 = x ;

   double c = ta0 ;
   double d = tb0 ;

   return c+d ;
}

void lstune(int loopcount)
{
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune0(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune1(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune2(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune3(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune4(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune5(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune6(1.0,3.0) ;
      } /* endfor */
   }
   {
      for (int a=0; a<loopcount; a+=1)
      {
        (void) lstune7(1.0,3.0) ;
      } /* endfor */
   }
}

int main(int argc, const char** argv)
{
   int loopcount=atoi(argv[1]) ;
   lstune(loopcount) ;
   return 0 ;
}
