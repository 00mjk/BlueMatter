/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include <math.h>

#if defined(QALIGN)
extern "builtin" void __alignx (int, const void *);
#define QuadWordAligned(X) __alignx(16, X)
#else
#define QuadWordAligned(X)
#endif

void tenrootl(double* f, const double* x, int groupcount)
{
   QuadWordAligned(f) ;
   QuadWordAligned(x) ;
   {
   double x0 = x[0] ;
   double x1 = x[1] ;
   double x2 = x[2] ;
   double x3 = x[3] ;
   double x4 = x[4] ;
   double x5 = x[5] ;
   double x6 = x[6] ;
   double x7 = x[7] ;
   double x8 = x[8] ;
   double x9 = x[9] ;
   int a ;
   for (a=0; a < groupcount; a+=1)
   {
     double r0 = 1.0/sqrt(x0) ;
     double r1 = 1.0/sqrt(x1) ;
     double r2 = 1.0/sqrt(x2) ;
     double r3 = 1.0/sqrt(x3) ;
     double r4 = 1.0/sqrt(x4) ;
     double r5 = 1.0/sqrt(x5) ;
     double r6 = 1.0/sqrt(x6) ;
     double r7 = 1.0/sqrt(x7) ;
     double r8 = 1.0/sqrt(x8) ;
     double r9 = 1.0/sqrt(x9) ;
     x0 = x[a*10+10] ;
     x1 = x[a*10+11] ;
     x2 = x[a*10+12] ;
     x3 = x[a*10+13] ;
     x4 = x[a*10+14] ;
     x5 = x[a*10+15] ;
     x6 = x[a*10+16] ;
     x7 = x[a*10+17] ;
     x8 = x[a*10+18] ;
     x9 = x[a*10+19] ;
     f[a*10+0] = r0 ;
     f[a*10+1] = r1 ;
     f[a*10+2] = r2 ;
     f[a*10+3] = r3 ;
     f[a*10+4] = r4 ;
     f[a*10+5] = r5 ;
     f[a*10+6] = r6 ;
     f[a*10+7] = r7 ;
     f[a*10+8] = r8 ;
     f[a*10+9] = r9 ;
   } /* endfor */
   }
}

void tenroot(double* f, const double* x)
{
   QuadWordAligned(f) ;
   QuadWordAligned(x) ;
   {
   double x0 = x[0] ;
   double x1 = x[1] ;
   double x2 = x[2] ;
   double x3 = x[3] ;
   double x4 = x[4] ;
   double x5 = x[5] ;
   double x6 = x[6] ;
   double x7 = x[7] ;
   double x8 = x[8] ;
   double x9 = x[9] ;
   double r0 = 1.0/sqrt(x0) ;
   double r1 = 1.0/sqrt(x1) ;
   double r2 = 1.0/sqrt(x2) ;
   double r3 = 1.0/sqrt(x3) ;
   double r4 = 1.0/sqrt(x4) ;
   double r5 = 1.0/sqrt(x5) ;
   double r6 = 1.0/sqrt(x6) ;
   double r7 = 1.0/sqrt(x7) ;
   double r8 = 1.0/sqrt(x8) ;
   double r9 = 1.0/sqrt(x9) ;
   f[0] = r0 ;
   f[1] = r1 ;
   f[2] = r2 ;
   f[3] = r3 ;
   f[4] = r4 ;
   f[5] = r5 ;
   f[6] = r6 ;
   f[7] = r7 ;
   f[8] = r8 ;
   f[9] = r9 ;
   }
}

void fewroot(double* f, const double* x, int count)
{
  double x0 = 1.0 ;
  double x1 = 1.0 ;
  double x2 = 1.0 ;
  double x3 = 1.0 ;
  double x4 = 1.0 ;
  double x5 = 1.0 ;
  double x6 = 1.0 ;
  double x7 = 1.0 ;
  double x8 = 1.0 ;
  switch (count)
  {
     case 9: x8 = x[8] ;
     case 8: x7 = x[7] ;
     case 7: x6 = x[6] ;
     case 6: x5 = x[5] ;
     case 5: x4 = x[4] ;
     case 4: x3 = x[3] ;
     case 3: x2 = x[2] ;
     case 2: x1 = x[1] ;
     case 1: x0 = x[0] ;
  } /* endswitch */
  {
  double r0 = 1.0/sqrt(x0) ;
  double r1 = 1.0/sqrt(x1) ;
  double r2 = 1.0/sqrt(x2) ;
  double r3 = 1.0/sqrt(x3) ;
  double r4 = 1.0/sqrt(x4) ;
  double r5 = 1.0/sqrt(x5) ;
  double r6 = 1.0/sqrt(x6) ;
  double r7 = 1.0/sqrt(x7) ;
  double r8 = 1.0/sqrt(x8) ;
  switch (count)
  {
     case 9: f[8] = r8 ;
     case 8: f[7] = r7 ;
     case 7: f[6] = r6 ;
     case 6: f[5] = r5 ;
     case 5: f[4] = r4 ;
     case 4: f[3] = r3 ;
     case 3: f[2] = r2 ;
     case 2: f[1] = r1 ;
     case 1: f[0] = r0 ;
  } /* endswitch */
  }
}

extern "C"
{
  void arbroot(double* f, const double* x, int count) ;
} ;

void arbroot(double* f, const double* x, int count)
{
   int tencount = count/10 ;
   int unitcount = count%10 ;
   if (count >= 20 )
   {
     tenrootl(f,x,tencount-1) ;
     tenroot(f+(tencount-1)*10,x+(tencount-1)*10) ;
     if (unitcount > 0)
     {
       tenroot(f+(tencount-1)*10+unitcount,x+(tencount-1)*10+unitcount) ;
     } /* endif */
   }
   else if ( count >= 10 )
   {
      tenroot(f,x) ;
      if (unitcount > 0 )
      {
         tenroot(f+unitcount,x+unitcount) ;
      } /* endif */
   }
   else
   {
      fewroot(f,x,count) ;
   } /* endif */
}

void arbrootx(double* f, const double* x, int count)
{
#pragma disjoint(*f, *x)
   int a ;
   for (a=0; a<count; a+=1)
   {
      f[a] = 1.0/sqrt(x[a]) ;
   } /* endfor */
}

