/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*
 * Nearest image calculation
 * Find the nearest image of 'b' to 'a', in a pattern repeat with the given period
 */
static inline double NearestInteger(const double x)
{
   const double two10 = 1024.0 ;
   const double two50 = two10 * two10 * two10 * two10 * two10 ;
   const double two52 = two50 * 4.0 ;
   const double two51 = two50 * 2.0 ;
   const double offset = two52 + two51 ;

   const double losebits = x + offset ;
   const double result = losebits - offset ;
   return result ;
}

static inline double NearestImageInPeriodicLine(
  const double a
  , const double b
  , const double Period
  , const double ReciprocalPeriod
  )
{
   const double d = b-a ; // 'Regular' distance between them, if small enough the result will be 'b'
   const double d_unit = d * ReciprocalPeriod ; // express with respect to unit periodicity,
                                                // for -0.5 < d_unit < 0.5 result will be 'b'
   const double d_unit_rounded = NearestInteger(d_unit) ;
   const double result = b - d_unit_rounded * Period ;
   return result ;
}

#include <stdlib.h>
#include <iostream.h>
int main(int argc, const char ** argv)
{
   if (argc == 4)
   {
      char* dummy0 ;
      double a = strtod(argv[1],&dummy0) ;
      double b = strtod(argv[2],&dummy0) ;
      double Period = strtod(argv[3],&dummy0) ;
      double result = NearestImageInPeriodicLine(a,b,Period, 1.0/Period) ;
      cout << result
           << '\n'
      ;
   }
   return 0 ;
}
