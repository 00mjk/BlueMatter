/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#include <math.h>
#include <BlueMatter/fpexploit.hpp>
class trv
{
   public:
   double x;
   double f;
} ;

void tenroot(double* f, const double* x)
{
   trv fx[6] ;

   fx[0].x = x[0] ;
   fx[1].x = x[1] ;
   fx[2].x = x[2] ;
   fx[3].x = x[3] ;
   fx[4].x = x[4] ;
   fx[5].x = x[5] ;
   fx[0].f = 1.0/sqrt(fx[0].x) ;
   fx[1].f = 1.0/sqrt(fx[1].x) ;
   fx[2].f = 1.0/sqrt(fx[2].x) ;
   fx[3].f = 1.0/sqrt(fx[3].x) ;
   fx[4].f = 1.0/sqrt(fx[4].x) ;
   fx[5].f = 1.0/sqrt(fx[5].x) ;
   f[0] = fx[0].f ;
   f[1] = fx[1].f ;
   f[2] = fx[2].f ;
   f[3] = fx[3].f ;
   f[4] = fx[4].f ;
   f[5] = fx[5].f ;
}

void tenrootv(double* f, const double* x)
{
   trv fx[6] ;

   fx[0].x = x[0] ;
   fx[1].x = x[1] ;
   fx[2].x = x[2] ;
   fx[3].x = x[3] ;
   fx[4].x = x[4] ;
   fx[5].x = x[5] ;
   for (int a=0; a<6; a+=1)
   {
      fx[a].f = 1.0/sqrt(fx[a].x) ;
   } /* endfor */
   f[0] = fx[0].f ;
   f[1] = fx[1].f ;
   f[2] = fx[2].f ;
   f[3] = fx[3].f ;
   f[4] = fx[4].f ;
   f[5] = fx[5].f ;
}

void tenrootva(trv* fx, int groupcount)
{

   for (int a=0; a<groupcount; a+=1)
   {
      fx[a].f = 1.0/sqrt(fx[a].x) ;
   } /* endfor */
}

