/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
typedef double fpa ;

extern "builtin" void  __compute_parallel(double, double ) ;
class mx4
{
   public:
     fpa f[4][4] ;

} ;

#define DET2(                   \
               s00, s01,        \
               s10, s11         \
            )                   \
  ( s00 * s11 - s01 * s10 )

#define DET3(                   \
               s00, s01, s02,   \
               s10, s11, s12,   \
               s20, s21, s22    \
            )                   \
(                               \
   s00 * DET2(                  \
                     s11, s12,  \
                     s21, s22   \
             )                  \
 - s00 * DET2(                  \
                s10,      s12,  \
                s20,      s22   \
             )                  \
 + s00 * DET2(                  \
                s10, s11,       \
                s20, s21        \
             )                  \
)

#define DET4(                          \
                   s00, s01, s02, s03, \
                   s10, s11, s12, s13, \
                   s20, s21, s22, s23, \
                   s30, s31, s32, s33  \
)  (                                   \
   s00 * DET3(                         \
                                       \
                        s11, s12, s13, \
                        s21, s22, s23, \
                        s31, s32, s33  \
           ) -                         \
 - s01 * DET3(                         \
                                       \
                   s10,      s12, s13, \
                   s20,      s22, s23, \
                   s30,      s32, s33  \
             )                         \
 + s02 * DET3(                         \
                                       \
                   s10, s11,      s13, \
                   s20, s21,      s23, \
                   s30, s31,      s33  \
             )                         \
 - s03 * DET3(                         \
                                       \
                   s10, s11, s12,      \
                   s20, s21, s22,      \
                   s30, s31, s32       \
             )                         \
    )

void invert(mx4& t, const mx4& s)
{
   fpa s00 = s.f[0][0] ; fpa s01 = s.f[0][1] ; fpa s02 = s.f[0][2] ; fpa s03 = s.f[0][3] ;
   fpa s10 = s.f[1][0] ; fpa s11 = s.f[1][1] ; fpa s12 = s.f[1][2] ; fpa s13 = s.f[1][3] ;
   fpa s20 = s.f[2][0] ; fpa s21 = s.f[2][1] ; fpa s22 = s.f[2][2] ; fpa s23 = s.f[2][3] ;
   fpa s30 = s.f[3][0] ; fpa s31 = s.f[3][1] ; fpa s32 = s.f[3][2] ; fpa s33 = s.f[3][3] ;

   fpa det = DET4(
                   s00, s01, s02, s03,
                   s10, s11, s12, s13,
                   s20, s21, s22, s23,
                   s30, s31, s32, s33
                 ) ;
   fpa rdet = 1.0/det ;
   fpa nrdet = - rdet ;

   fpa c00 = DET3(

                        s11, s12, s13,
                        s21, s22, s23,
                        s31, s32, s33
                 ) ;
   fpa c01 = DET3(

                   s10,      s12, s13,
                   s20,      s22, s23,
                   s30,      s32, s33
                 ) ;
   fpa c02 = DET3(

                   s10, s11,      s13,
                   s20, s21,      s23,
                   s30, s31,      s33
                 ) ;
   fpa c03 = DET3(

                   s10, s11, s12,
                   s20, s21, s22,
                   s30, s31, s32
                 ) ;
   fpa c10 = DET3(
                        s01, s02, s03,

                        s21, s22, s23,
                        s31, s32, s33
                 ) ;
   fpa c11 = DET3(
                   s00,      s02, s03,

                   s20,      s22, s23,
                   s30,      s32, s33
                 ) ;
   fpa c12 = DET3(
                   s00, s01,      s03,

                   s20, s21,      s23,
                   s30, s31,      s33
                 ) ;
   fpa c13 = DET3(
                   s00, s01, s02,

                   s20, s21, s22,
                   s30, s31, s32
                 ) ;
   fpa c20 = DET3(
                        s01, s02, s03,
                        s11, s12, s13,

                        s31, s32, s33
                 ) ;
   fpa c21 = DET3(
                   s00,      s02, s03,
                   s10,      s12, s13,

                   s30,      s32, s33
                 ) ;
   fpa c22 = DET3(
                   s00, s01,      s03,
                   s10, s11,      s13,

                   s30, s31,      s33
                 ) ;
   fpa c23 = DET3(
                   s00, s01, s02,
                   s10, s11, s12,

                   s30, s31, s32
                 ) ;
   fpa c30 = DET3(
                        s01, s02, s03,
                        s11, s12, s13,
                        s21, s22, s23

                 ) ;
   fpa c31 = DET3(
                   s00,      s02, s03,
                   s10,      s12, s13,
                   s20,      s22, s23

                 ) ;
   fpa c32 = DET3(
                   s00, s01,      s03,
                   s10, s11,      s13,
                   s20, s21,      s23

                 ) ;
   fpa c33 = DET3(
                   s00, s01, s02,
                   s10, s11, s12,
                   s20, s21, s22

                 ) ;
   t.f[0][0] = c00 *  rdet ; t.f[0][1] = c01 * nrdet ; t.f[0][2] = c02 * nrdet ; t.f[0][3] = c03 *  rdet ;
   t.f[1][0] = c10 * nrdet ; t.f[1][1] = c11 *  rdet ; t.f[1][2] = c12 *  rdet ; t.f[1][3] = c13 * nrdet ;
   t.f[2][0] = c20 *  rdet ; t.f[2][1] = c21 * nrdet ; t.f[2][2] = c22 * nrdet ; t.f[2][3] = c23 *  rdet ;
   t.f[3][0] = c30 * nrdet ; t.f[3][1] = c31 *  rdet ; t.f[3][2] = c32 *  rdet ; t.f[3][3] = c33 * nrdet ;
}

void invert_special(mx4& t, const mx4& s)
{
   fpa s00 = s.f[0][0] ; fpa s01 = s.f[0][1] ; fpa s02 = s.f[0][2] ; fpa s03 = s.f[0][3] ;
   fpa s10 = s.f[1][0] ; fpa s11 = s.f[1][1] ; fpa s12 = s.f[1][2] ; fpa s13 = s.f[1][3] ;
   fpa s20 = s.f[2][0] ; fpa s21 = s.f[2][1] ; fpa s22 = s.f[2][2] ; fpa s23 = s.f[2][3] ;
   fpa s30 = 0.0       ; fpa s31 = 0.0       ; fpa s32 = 0.0       ; fpa s33 = 1.0       ;

   fpa det = DET4(
                   s00, s01, s02, s03,
                   s10, s11, s12, s13,
                   s20, s21, s22, s23,
                   s30, s31, s32, s33
                 ) ;
   fpa rdet = 1.0/det ;
   fpa nrdet = - rdet ;

   fpa c00 = DET3(

                        s11, s12, s13,
                        s21, s22, s23,
                        s31, s32, s33
                 ) ;
   fpa c01 = DET3(

                   s10,      s12, s13,
                   s20,      s22, s23,
                   s30,      s32, s33
                 ) ;
   fpa c02 = DET3(

                   s10, s11,      s13,
                   s20, s21,      s23,
                   s30, s31,      s33
                 ) ;
   fpa c03 = DET3(

                   s10, s11, s12,
                   s20, s21, s22,
                   s30, s31, s32
                 ) ;
   fpa c10 = DET3(
                        s01, s02, s03,

                        s21, s22, s23,
                        s31, s32, s33
                 ) ;
   fpa c11 = DET3(
                   s00,      s02, s03,

                   s20,      s22, s23,
                   s30,      s32, s33
                 ) ;
   fpa c12 = DET3(
                   s00, s01,      s03,

                   s20, s21,      s23,
                   s30, s31,      s33
                 ) ;
   fpa c13 = DET3(
                   s00, s01, s02,

                   s20, s21, s22,
                   s30, s31, s32
                 ) ;
   fpa c20 = DET3(
                        s01, s02, s03,
                        s11, s12, s13,

                        s31, s32, s33
                 ) ;
   fpa c21 = DET3(
                   s00,      s02, s03,
                   s10,      s12, s13,

                   s30,      s32, s33
                 ) ;
   fpa c22 = DET3(
                   s00, s01,      s03,
                   s10, s11,      s13,

                   s30, s31,      s33
                 ) ;
   fpa c23 = DET3(
                   s00, s01, s02,
                   s10, s11, s12,

                   s30, s31, s32
                 ) ;
   fpa c30 = DET3(
                        s01, s02, s03,
                        s11, s12, s13,
                        s21, s22, s23

                 ) ;
   fpa c31 = DET3(
                   s00,      s02, s03,
                   s10,      s12, s13,
                   s20,      s22, s23

                 ) ;
   fpa c32 = DET3(
                   s00, s01,      s03,
                   s10, s11,      s13,
                   s20, s21,      s23

                 ) ;
   fpa c33 = DET3(
                   s00, s01, s02,
                   s10, s11, s12,
                   s20, s21, s22

                 ) ;
   t.f[0][0] = c00 *  rdet ; t.f[0][1] = c01 * nrdet ; t.f[0][2] = c02 * nrdet ; t.f[0][3] = c03 *  rdet ;
   t.f[1][0] = c10 * nrdet ; t.f[1][1] = c11 *  rdet ; t.f[1][2] = c12 *  rdet ; t.f[1][3] = c13 * nrdet ;
   t.f[2][0] = c20 *  rdet ; t.f[2][1] = c21 * nrdet ; t.f[2][2] = c22 * nrdet ; t.f[2][3] = c23 *  rdet ;
   t.f[3][0] = c30 * nrdet ; t.f[3][1] = c31 *  rdet ; t.f[3][2] = c32 *  rdet ; t.f[3][3] = c33 * nrdet ;
}

void pinvert(mx4& ta, const mx4& sa, mx4& tb, const mx4& sb)
{
   fpa sa00 = sa.f[0][0] ; fpa sa01 = sa.f[0][1] ; fpa sa02 = sa.f[0][2] ; fpa sa03 = sa.f[0][3] ;
   fpa sa10 = sa.f[1][0] ; fpa sa11 = sa.f[1][1] ; fpa sa12 = sa.f[1][2] ; fpa sa13 = sa.f[1][3] ;
   fpa sa20 = sa.f[2][0] ; fpa sa21 = sa.f[2][1] ; fpa sa22 = sa.f[2][2] ; fpa sa23 = sa.f[2][3] ;
   fpa sa30 = sa.f[3][0] ; fpa sa31 = sa.f[3][1] ; fpa sa32 = sa.f[3][2] ; fpa sa33 = sa.f[3][3] ;

   fpa sb00 = sb.f[0][0] ; fpa sb01 = sb.f[0][1] ; fpa sb02 = sb.f[0][2] ; fpa sb03 = sb.f[0][3] ;
   fpa sb10 = sb.f[1][0] ; fpa sb11 = sb.f[1][1] ; fpa sb12 = sb.f[1][2] ; fpa sb13 = sb.f[1][3] ;
   fpa sb20 = sb.f[2][0] ; fpa sb21 = sb.f[2][1] ; fpa sb22 = sb.f[2][2] ; fpa sb23 = sb.f[2][3] ;
   fpa sb30 = sb.f[3][0] ; fpa sb31 = sb.f[3][1] ; fpa sb32 = sb.f[3][2] ; fpa sb33 = sb.f[3][3] ;

   fpa deta = DET4(
                   sa00, sa01, sa02, sa03,
                   sa10, sa11, sa12, sa13,
                   sa20, sa21, sa22, sa23,
                   sa30, sa31, sa32, sa33
                 ) ;
   fpa detb = DET4(
                   sb00, sb01, sb02, sb03,
                   sb10, sb11, sb12, sb13,
                   sb20, sb21, sb22, sb23,
                   sb30, sb31, sb32, sb33
                 ) ;
#if 1
   __compute_parallel(deta, detb) ;
#endif
   fpa rdeta = 1.0/deta ;
   fpa rdetb = 1.0/detb ;

   fpa nrdetb = - rdetb ;
   fpa nrdeta = - rdeta ;

#if 1
   __compute_parallel(rdeta, rdetb) ;
   __compute_parallel(nrdeta, nrdetb) ;
#endif

   fpa ca00 = DET3(

                        sa11, sa12, sa13,
                        sa21, sa22, sa23,
                        sa31, sa32, sa33
                 ) ;
   fpa ca01 = DET3(

                   sa10,      sa12, sa13,
                   sa20,      sa22, sa23,
                   sa30,      sa32, sa33
                 ) ;
   fpa ca02 = DET3(

                   sa10, sa11,      sa13,
                   sa20, sa21,      sa23,
                   sa30, sa31,      sa33
                 ) ;
   fpa ca03 = DET3(

                   sa10, sa11, sa12,
                   sa20, sa21, sa22,
                   sa30, sa31, sa32
                 ) ;
   fpa ca10 = DET3(
                        sa01, sa02, sa03,

                        sa21, sa22, sa23,
                        sa31, sa32, sa33
                 ) ;
   fpa ca11 = DET3(
                   sa00,      sa02, sa03,

                   sa20,      sa22, sa23,
                   sa30,      sa32, sa33
                 ) ;
   fpa ca12 = DET3(
                   sa00, sa01,      sa03,

                   sa20, sa21,      sa23,
                   sa30, sa31,      sa33
                 ) ;
   fpa ca13 = DET3(
                   sa00, sa01, sa02,

                   sa20, sa21, sa22,
                   sa30, sa31, sa32
                 ) ;
   fpa ca20 = DET3(
                        sa01, sa02, sa03,
                        sa11, sa12, sa13,

                        sa31, sa32, sa33
                 ) ;
   fpa ca21 = DET3(
                   sa00,      sa02, sa03,
                   sa10,      sa12, sa13,

                   sa30,      sa32, sa33
                 ) ;
   fpa ca22 = DET3(
                   sa00, sa01,      sa03,
                   sa10, sa11,      sa13,

                   sa30, sa31,      sa33
                 ) ;
   fpa ca23 = DET3(
                   sa00, sa01, sa02,
                   sa10, sa11, sa12,

                   sa30, sa31, sa32
                 ) ;
   fpa ca30 = DET3(
                        sa01, sa02, sa03,
                        sa11, sa12, sa13,
                        sa21, sa22, sa23

                 ) ;
   fpa ca31 = DET3(
                   sa00,      sa02, sa03,
                   sa10,      sa12, sa13,
                   sa20,      sa22, sa23

                 ) ;
   fpa ca32 = DET3(
                   sa00, sa01,      sa03,
                   sa10, sa11,      sa13,
                   sa20, sa21,      sa23

                 ) ;
   fpa ca33 = DET3(
                   sa00, sa01, sa02,
                   sa10, sa11, sa12,
                   sa20, sa21, sa22

                 ) ;

   fpa cb00 = DET3(

                        sb11, sb12, sb13,
                        sb21, sb22, sb23,
                        sb31, sb32, sb33
                 ) ;
   fpa cb01 = DET3(

                   sb10,      sb12, sb13,
                   sb20,      sb22, sb23,
                   sb30,      sb32, sb33
                 ) ;
   fpa cb02 = DET3(

                   sb10, sb11,      sb13,
                   sb20, sb21,      sb23,
                   sb30, sb31,      sb33
                 ) ;
   fpa cb03 = DET3(

                   sb10, sb11, sb12,
                   sb20, sb21, sb22,
                   sb30, sb31, sb32
                 ) ;
   fpa cb10 = DET3(
                        sb01, sb02, sb03,

                        sb21, sb22, sb23,
                        sb31, sb32, sb33
                 ) ;
   fpa cb11 = DET3(
                   sb00,      sb02, sb03,

                   sb20,      sb22, sb23,
                   sb30,      sb32, sb33
                 ) ;
   fpa cb12 = DET3(
                   sb00, sb01,      sb03,

                   sb20, sb21,      sb23,
                   sb30, sb31,      sb33
                 ) ;
   fpa cb13 = DET3(
                   sb00, sb01, sb02,

                   sb20, sb21, sb22,
                   sb30, sb31, sb32
                 ) ;
   fpa cb20 = DET3(
                        sb01, sb02, sb03,
                        sb11, sb12, sb13,

                        sb31, sb32, sb33
                 ) ;
   fpa cb21 = DET3(
                   sb00,      sb02, sb03,
                   sb10,      sb12, sb13,

                   sb30,      sb32, sb33
                 ) ;
   fpa cb22 = DET3(
                   sb00, sb01,      sb03,
                   sb10, sb11,      sb13,

                   sb30, sb31,      sb33
                 ) ;
   fpa cb23 = DET3(
                   sb00, sb01, sb02,
                   sb10, sb11, sb12,

                   sb30, sb31, sb32
                 ) ;
   fpa cb30 = DET3(
                        sb01, sb02, sb03,
                        sb11, sb12, sb13,
                        sb21, sb22, sb23

                 ) ;
   fpa cb31 = DET3(
                   sb00,      sb02, sb03,
                   sb10,      sb12, sb13,
                   sb20,      sb22, sb23

                 ) ;
   fpa cb32 = DET3(
                   sb00, sb01,      sb03,
                   sb10, sb11,      sb13,
                   sb20, sb21,      sb23

                 ) ;
   fpa cb33 = DET3(
                   sb00, sb01, sb02,
                   sb10, sb11, sb12,
                   sb20, sb21, sb22

                 ) ;
   ta.f[0][0] = ca00 *  rdeta ; ta.f[0][1] = ca01 * nrdeta ; ta.f[0][2] = ca02 * nrdeta ; ta.f[0][3] = ca03 *  rdeta ;
   ta.f[1][0] = ca10 * nrdeta ; ta.f[1][1] = ca11 *  rdeta ; ta.f[1][2] = ca12 *  rdeta ; ta.f[1][3] = ca13 * nrdeta ;
   ta.f[2][0] = ca20 *  rdeta ; ta.f[2][1] = ca21 * nrdeta ; ta.f[2][2] = ca22 * nrdeta ; ta.f[2][3] = ca23 *  rdeta ;
   ta.f[3][0] = ca30 * nrdeta ; ta.f[3][1] = ca31 *  rdeta ; ta.f[3][2] = ca32 *  rdeta ; ta.f[3][3] = ca33 * nrdeta ;

   tb.f[0][0] = cb00 *  rdetb ; tb.f[0][1] = cb01 * nrdetb ; tb.f[0][2] = cb02 * nrdetb ; tb.f[0][3] = cb03 *  rdetb ;
   tb.f[1][0] = cb10 * nrdetb ; tb.f[1][1] = cb11 *  rdetb ; tb.f[1][2] = cb12 *  rdetb ; tb.f[1][3] = cb13 * nrdetb ;
   tb.f[2][0] = cb20 *  rdetb ; tb.f[2][1] = cb21 * nrdetb ; tb.f[2][2] = cb22 * nrdetb ; tb.f[2][3] = cb23 *  rdetb ;
   tb.f[3][0] = cb30 * nrdetb ; tb.f[3][1] = cb31 *  rdetb ; tb.f[3][2] = cb32 *  rdetb ; tb.f[3][3] = cb33 * nrdetb ;
#if 1
   __compute_parallel(sa00, sb00) ;
   __compute_parallel(sa01, sb01) ;
   __compute_parallel(sa02, sb02) ;
   __compute_parallel(sa03, sb03) ;
   __compute_parallel(sa10, sb10) ;
   __compute_parallel(sa11, sb11) ;
   __compute_parallel(sa12, sb12) ;
   __compute_parallel(sa13, sb13) ;
   __compute_parallel(sa20, sb20) ;
   __compute_parallel(sa21, sb21) ;
   __compute_parallel(sa22, sb22) ;
   __compute_parallel(sa23, sb23) ;
   __compute_parallel(sa30, sb30) ;
   __compute_parallel(sa31, sb31) ;
   __compute_parallel(sa32, sb32) ;
   __compute_parallel(sa33, sb33) ;
#endif
#if 1
   __compute_parallel(ca00, cb00) ;
   __compute_parallel(ca01, cb01) ;
   __compute_parallel(ca02, cb02) ;
   __compute_parallel(ca03, cb03) ;
   __compute_parallel(ca10, cb10) ;
   __compute_parallel(ca11, cb11) ;
   __compute_parallel(ca12, cb12) ;
   __compute_parallel(ca13, cb13) ;
   __compute_parallel(ca20, cb20) ;
   __compute_parallel(ca21, cb21) ;
   __compute_parallel(ca22, cb22) ;
   __compute_parallel(ca23, cb23) ;
   __compute_parallel(ca30, cb30) ;
   __compute_parallel(ca31, cb31) ;
   __compute_parallel(ca32, cb32) ;
   __compute_parallel(ca33, cb33) ;

   __compute_parallel(ta.f[0][0], tb.f[0][0]) ;
   __compute_parallel(ta.f[0][1], tb.f[0][1]) ;
   __compute_parallel(ta.f[0][2], tb.f[0][2]) ;
   __compute_parallel(ta.f[0][3], tb.f[0][3]) ;
   __compute_parallel(ta.f[1][0], tb.f[1][0]) ;
   __compute_parallel(ta.f[1][1], tb.f[1][1]) ;
   __compute_parallel(ta.f[1][2], tb.f[1][2]) ;
   __compute_parallel(ta.f[1][3], tb.f[1][3]) ;
   __compute_parallel(ta.f[2][0], tb.f[2][0]) ;
   __compute_parallel(ta.f[2][1], tb.f[2][1]) ;
   __compute_parallel(ta.f[2][2], tb.f[2][2]) ;
   __compute_parallel(ta.f[2][3], tb.f[2][3]) ;
   __compute_parallel(ta.f[3][0], tb.f[3][0]) ;
   __compute_parallel(ta.f[3][1], tb.f[3][1]) ;
   __compute_parallel(ta.f[3][2], tb.f[3][2]) ;
   __compute_parallel(ta.f[3][3], tb.f[3][3]) ;
#endif
}


void pinvert_special(mx4& ta, const mx4& sa, mx4& tb, const mx4& sb)
{
   fpa sa00 = sa.f[0][0] ; fpa sa01 = sa.f[0][1] ; fpa sa02 = sa.f[0][2] ; fpa sa03 = sa.f[0][3] ;
   fpa sa10 = sa.f[1][0] ; fpa sa11 = sa.f[1][1] ; fpa sa12 = sa.f[1][2] ; fpa sa13 = sa.f[1][3] ;
   fpa sa20 = sa.f[2][0] ; fpa sa21 = sa.f[2][1] ; fpa sa22 = sa.f[2][2] ; fpa sa23 = sa.f[2][3] ;
   fpa sa30 = 0.0        ; fpa sa31 = 0.0        ; fpa sa32 = 0.0        ; fpa sa33 = 1.0        ;

   fpa sb00 = sb.f[0][0] ; fpa sb01 = sb.f[0][1] ; fpa sb02 = sb.f[0][2] ; fpa sb03 = sb.f[0][3] ;
   fpa sb10 = sb.f[1][0] ; fpa sb11 = sb.f[1][1] ; fpa sb12 = sb.f[1][2] ; fpa sb13 = sb.f[1][3] ;
   fpa sb20 = sb.f[2][0] ; fpa sb21 = sb.f[2][1] ; fpa sb22 = sb.f[2][2] ; fpa sb23 = sb.f[2][3] ;
   fpa sb30 = 0.0        ; fpa sb31 = 0.0        ; fpa sb32 = 0.0        ; fpa sb33 = 0.0        ;

   fpa deta = DET4(
                   sa00, sa01, sa02, sa03,
                   sa10, sa11, sa12, sa13,
                   sa20, sa21, sa22, sa23,
                   sa30, sa31, sa32, sa33
                 ) ;
   fpa rdeta = 1.0/deta ;
   fpa nrdeta = - rdeta ;

   fpa ca00 = DET3(

                        sa11, sa12, sa13,
                        sa21, sa22, sa23,
                        sa31, sa32, sa33
                 ) ;
   fpa ca01 = DET3(

                   sa10,      sa12, sa13,
                   sa20,      sa22, sa23,
                   sa30,      sa32, sa33
                 ) ;
   fpa ca02 = DET3(

                   sa10, sa11,      sa13,
                   sa20, sa21,      sa23,
                   sa30, sa31,      sa33
                 ) ;
   fpa ca03 = DET3(

                   sa10, sa11, sa12,
                   sa20, sa21, sa22,
                   sa30, sa31, sa32
                 ) ;
   fpa ca10 = DET3(
                        sa01, sa02, sa03,

                        sa21, sa22, sa23,
                        sa31, sa32, sa33
                 ) ;
   fpa ca11 = DET3(
                   sa00,      sa02, sa03,

                   sa20,      sa22, sa23,
                   sa30,      sa32, sa33
                 ) ;
   fpa ca12 = DET3(
                   sa00, sa01,      sa03,

                   sa20, sa21,      sa23,
                   sa30, sa31,      sa33
                 ) ;
   fpa ca13 = DET3(
                   sa00, sa01, sa02,

                   sa20, sa21, sa22,
                   sa30, sa31, sa32
                 ) ;
   fpa ca20 = DET3(
                        sa01, sa02, sa03,
                        sa11, sa12, sa13,

                        sa31, sa32, sa33
                 ) ;
   fpa ca21 = DET3(
                   sa00,      sa02, sa03,
                   sa10,      sa12, sa13,

                   sa30,      sa32, sa33
                 ) ;
   fpa ca22 = DET3(
                   sa00, sa01,      sa03,
                   sa10, sa11,      sa13,

                   sa30, sa31,      sa33
                 ) ;
   fpa ca23 = DET3(
                   sa00, sa01, sa02,
                   sa10, sa11, sa12,

                   sa30, sa31, sa32
                 ) ;
   fpa ca30 = DET3(
                        sa01, sa02, sa03,
                        sa11, sa12, sa13,
                        sa21, sa22, sa23

                 ) ;
   fpa ca31 = DET3(
                   sa00,      sa02, sa03,
                   sa10,      sa12, sa13,
                   sa20,      sa22, sa23

                 ) ;
   fpa ca32 = DET3(
                   sa00, sa01,      sa03,
                   sa10, sa11,      sa13,
                   sa20, sa21,      sa23

                 ) ;
   fpa ca33 = DET3(
                   sa00, sa01, sa02,
                   sa10, sa11, sa12,
                   sa20, sa21, sa22

                 ) ;

   fpa detb = DET4(
                   sb00, sb01, sb02, sb03,
                   sb10, sb11, sb12, sb13,
                   sb20, sb21, sb22, sb23,
                   sb30, sb31, sb32, sb33
                 ) ;
   fpa rdetb = 1.0/detb ;
   fpa nrdetb = - rdetb ;

   fpa cb00 = DET3(

                        sb11, sb12, sb13,
                        sb21, sb22, sb23,
                        sb31, sb32, sb33
                 ) ;
   fpa cb01 = DET3(

                   sb10,      sb12, sb13,
                   sb20,      sb22, sb23,
                   sb30,      sb32, sb33
                 ) ;
   fpa cb02 = DET3(

                   sb10, sb11,      sb13,
                   sb20, sb21,      sb23,
                   sb30, sb31,      sb33
                 ) ;
   fpa cb03 = DET3(

                   sb10, sb11, sb12,
                   sb20, sb21, sb22,
                   sb30, sb31, sb32
                 ) ;
   fpa cb10 = DET3(
                        sb01, sb02, sb03,

                        sb21, sb22, sb23,
                        sb31, sb32, sb33
                 ) ;
   fpa cb11 = DET3(
                   sb00,      sb02, sb03,

                   sb20,      sb22, sb23,
                   sb30,      sb32, sb33
                 ) ;
   fpa cb12 = DET3(
                   sb00, sb01,      sb03,

                   sb20, sb21,      sb23,
                   sb30, sb31,      sb33
                 ) ;
   fpa cb13 = DET3(
                   sb00, sb01, sb02,

                   sb20, sb21, sb22,
                   sb30, sb31, sb32
                 ) ;
   fpa cb20 = DET3(
                        sb01, sb02, sb03,
                        sb11, sb12, sb13,

                        sb31, sb32, sb33
                 ) ;
   fpa cb21 = DET3(
                   sb00,      sb02, sb03,
                   sb10,      sb12, sb13,

                   sb30,      sb32, sb33
                 ) ;
   fpa cb22 = DET3(
                   sb00, sb01,      sb03,
                   sb10, sb11,      sb13,

                   sb30, sb31,      sb33
                 ) ;
   fpa cb23 = DET3(
                   sb00, sb01, sb02,
                   sb10, sb11, sb12,

                   sb30, sb31, sb32
                 ) ;
   fpa cb30 = DET3(
                        sb01, sb02, sb03,
                        sb11, sb12, sb13,
                        sb21, sb22, sb23

                 ) ;
   fpa cb31 = DET3(
                   sb00,      sb02, sb03,
                   sb10,      sb12, sb13,
                   sb20,      sb22, sb23

                 ) ;
   fpa cb32 = DET3(
                   sb00, sb01,      sb03,
                   sb10, sb11,      sb13,
                   sb20, sb21,      sb23

                 ) ;
   fpa cb33 = DET3(
                   sb00, sb01, sb02,
                   sb10, sb11, sb12,
                   sb20, sb21, sb22

                 ) ;
   ta.f[0][0] = ca00 *  rdeta ; ta.f[0][1] = ca01 * nrdeta ; ta.f[0][2] = ca02 * nrdeta ; ta.f[0][3] = ca03 *  rdeta ;
   ta.f[1][0] = ca10 * nrdeta ; ta.f[1][1] = ca11 *  rdeta ; ta.f[1][2] = ca12 *  rdeta ; ta.f[1][3] = ca13 * nrdeta ;
   ta.f[2][0] = ca20 *  rdeta ; ta.f[2][1] = ca21 * nrdeta ; ta.f[2][2] = ca22 * nrdeta ; ta.f[2][3] = ca23 *  rdeta ;
   ta.f[3][0] = ca30 * nrdeta ; ta.f[3][1] = ca31 *  rdeta ; ta.f[3][2] = ca32 *  rdeta ; ta.f[3][3] = ca33 * nrdeta ;

   tb.f[0][0] = cb00 *  rdetb ; tb.f[0][1] = cb01 * nrdetb ; tb.f[0][2] = cb02 * nrdetb ; tb.f[0][3] = cb03 *  rdetb ;
   tb.f[1][0] = cb10 * nrdetb ; tb.f[1][1] = cb11 *  rdetb ; tb.f[1][2] = cb12 *  rdetb ; tb.f[1][3] = cb13 * nrdetb ;
   tb.f[2][0] = cb20 *  rdetb ; tb.f[2][1] = cb21 * nrdetb ; tb.f[2][2] = cb22 * nrdetb ; tb.f[2][3] = cb23 *  rdetb ;
   tb.f[3][0] = cb30 * nrdetb ; tb.f[3][1] = cb31 *  rdetb ; tb.f[3][2] = cb32 *  rdetb ; tb.f[3][3] = cb33 * nrdetb ;

#if 1
   __compute_parallel(sa00, sb00) ;
   __compute_parallel(sa01, sb01) ;
   __compute_parallel(sa02, sb02) ;
   __compute_parallel(sa03, sb03) ;
   __compute_parallel(sa10, sb10) ;
   __compute_parallel(sa11, sb11) ;
   __compute_parallel(sa12, sb12) ;
   __compute_parallel(sa13, sb13) ;
   __compute_parallel(sa20, sb20) ;
   __compute_parallel(sa21, sb21) ;
   __compute_parallel(sa22, sb22) ;
   __compute_parallel(sa23, sb23) ;
   __compute_parallel(sa30, sb30) ;
   __compute_parallel(sa31, sb31) ;
   __compute_parallel(sa32, sb32) ;
   __compute_parallel(sa33, sb33) ;

   __compute_parallel(deta, detb) ;
   __compute_parallel(rdeta, rdetb) ;
   __compute_parallel(nrdeta, nrdetb) ;

   __compute_parallel(ca00, cb00) ;
   __compute_parallel(ca01, cb01) ;
   __compute_parallel(ca02, cb02) ;
   __compute_parallel(ca03, cb03) ;
   __compute_parallel(ca10, cb10) ;
   __compute_parallel(ca11, cb11) ;
   __compute_parallel(ca12, cb12) ;
   __compute_parallel(ca13, cb13) ;
   __compute_parallel(ca20, cb20) ;
   __compute_parallel(ca21, cb21) ;
   __compute_parallel(ca22, cb22) ;
   __compute_parallel(ca23, cb23) ;
   __compute_parallel(ca30, cb30) ;
   __compute_parallel(ca31, cb31) ;
   __compute_parallel(ca32, cb32) ;
   __compute_parallel(ca33, cb33) ;

   __compute_parallel(ta.f[0][0], tb.f[0][0]) ;
   __compute_parallel(ta.f[0][1], tb.f[0][1]) ;
   __compute_parallel(ta.f[0][2], tb.f[0][2]) ;
   __compute_parallel(ta.f[0][3], tb.f[0][3]) ;
   __compute_parallel(ta.f[1][0], tb.f[1][0]) ;
   __compute_parallel(ta.f[1][1], tb.f[1][1]) ;
   __compute_parallel(ta.f[1][2], tb.f[1][2]) ;
   __compute_parallel(ta.f[1][3], tb.f[1][3]) ;
   __compute_parallel(ta.f[2][0], tb.f[2][0]) ;
   __compute_parallel(ta.f[2][1], tb.f[2][1]) ;
   __compute_parallel(ta.f[2][2], tb.f[2][2]) ;
   __compute_parallel(ta.f[2][3], tb.f[2][3]) ;
   __compute_parallel(ta.f[3][0], tb.f[3][0]) ;
   __compute_parallel(ta.f[3][1], tb.f[3][1]) ;
   __compute_parallel(ta.f[3][2], tb.f[3][2]) ;
   __compute_parallel(ta.f[3][3], tb.f[3][3]) ;
#endif
}


