/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*
 * Add-reduce on the tree
 */
#include <BlueMatter/fpmap.hpp>

class ui64
{
   public:
    unsigned int hiWord ;
    unsigned int loWord ;
} ;

class TreeReduce
{
   public:
   enum {
      k_TreeSize = 100 ,
      k_TreeMustShift = 8
      } ;
   doublemap NodeData[k_TreeSize] ;


   // This is a hardware tree op
   int iMaxReduce(const int * values) const
   {
      int result = values[0] ;
      for (int node=1; node < k_TreeSize; node += 1)
      {
         if (result < values[node] ) result = values[node] ;
      } /* endfor */
      return result ;
   }

   int carry_of(unsigned int a, unsigned int b) const
   {
      unsigned int c=a+b ;
      return (c<a) ? 1 : 0 ;
   } ;

   // This is a hardware tree op
   ui64 ui64AddReduce(const ui64 * values) const
   {
      unsigned int result_lo = values[0].loWord ;
      unsigned int result_hi = values[0].hiWord ;
      for (int node=1; node < k_TreeSize; node += 1)
      {
        unsigned int target_lo = values[0].loWord ;
        unsigned int target_hi = values[0].hiWord ;

        unsigned int carry_flag = carry_of(result_lo,target_lo) ;
                     result_lo = result_lo + target_lo ;
                     result_hi = result_hi + target_hi + carry_flag ;
      } /* endfor */
      ui64 result ;
      result.loWord = result_lo ;
      result.hiWord = result_hi ;
      return result ;
   }

   int maxExponent(void) const
   {
      int exponents[k_TreeSize] ;
      for (int node=0; node < k_TreeSize; node += 1)
      {
         exponents[node] = NodeData[node].exponent_bits() ;
      } /* endfor */
      return iMaxReduce(exponents) ;
   } ;


   double construct_double(ui64 significand, int exponent) const
   {
      if (significand.loWord == 0 && significand.hiWord == 0) return 0.0 ;
      // Normalise the result by shifting signifiand and decrementing exponent
      while ( 0 ==  (significand.hiWord & 0xfff00000) )
      {
         exponent -= 1 ;
         significand.hiWord = (significand.hiWord << 1 ) | (significand.loWord >> 31) ;
         significand.loWord <<= 1 ;
      } /* endwhile */
      doublemap result(0,exponent,significand.hiWord,significand.loWord)  ;
      return result.get_value()  ;
   } ;

   double addReduce(void) const
   {
      int largest_exponent=maxExponent() ;
      ui64 scaled_values[k_TreeSize] ;
      for (int node=0; node < k_TreeSize ; node += 1)
      {
         int exponent = NodeData[node].exponent_bits() ;
         int shift_value = largest_exponent - exponent + k_TreeMustShift ;
         unsigned int significand_hi = NodeData[node].significand_hi_bits() | 0x00100000 ; // '1' implied in IEEE format
         unsigned int significand_lo = NodeData[node].significand_lo_bits() ;

         scaled_values[node].hiWord = significand_hi >> shift_value ;
         scaled_values[node].loWord = ( significand_hi << (32-shift_value) ) | ( significand_lo >> shift_value ) ;

      } /* endfor */

      ui64 result_significand = ui64AddReduce(scaled_values) ;

      return construct_double(result_significand, largest_exponent) ;

   } ;
} ;

