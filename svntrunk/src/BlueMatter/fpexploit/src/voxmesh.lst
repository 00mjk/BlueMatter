IBM(R) XL C/C++ Advanced Edition V7.0 for Linux(R) --- voxmesh.cpp Fri 17 Jun 2005 09:11:17 AM EDT (C++)

>>>>> OPTIONS SECTION <<<<<

IGNERRNO        ARCH=440D       TUNE=440        OPT=3           ALIAS=ANSI      
SHOWPDF=NO      NODIRECTSTORAGE PREFETCH        
FLOAT=NOHSFLT:NORNDSNGL:NOHSSNGL:MAF:NORRM:FOLD:NONANS:RSQRT:FLTINT:NOEMULATE   
CACHE=LEVEL=1:TYPE=D:SIZE=32:LINE=32:ASSOC=64:COST=8            
CACHE=LEVEL=1:TYPE=I:SIZE=32:LINE=32:ASSOC=64:COST=8            
CACHE=LEVEL=2:TYPE=D:SIZE=4096:LINE=128:ASSOC=8:COST=40         
CACHE=LEVEL=2:TYPE=I:SIZE=4096:LINE=128:ASSOC=8:COST=40         MAXMEM=-1       
NOSTRICT        NOSTRICT_INDUCTION              TBTABLE=SMALL   LIST            
SHOWINC=NOSYS:NOUSR             SOURCE          TMPLPARSE=NO    

>>>>> SOURCE SECTION <<<<<
 
            1 | 
            2 | // Demo compile with /opt/ibmcmp/vacpp/7.0/bin/blrts_xlC -O3 -qdebug=plst3:cycles -qarch=440d -qsource -qlist -c voxmesh.cpp 
            3 | 
            4 | // 'fsel' is a built-in instruction on PPCGR and above, sometimes we want to force its use
            5 | #if 1
            6 | #include <builtins.h>
            7 | #define fsel(a, x, y) __fsel((a),(x),(y))
            8 | #else
            9 | #define fsel(a, x, y) ( (a) >= 0.0 ? (x) : (y) )
           10 | #endif
           11 | 
           12 | static inline double max2(double A, double B)
           13 | {
           14 | 	return fsel(A-B,A,B) ;
           15 | }
           16 | static inline double max3(double A, double B, double C)
           17 | {
           18 |     return max2(max2(A,B),C) ;
           19 | }
           20 | 
           21 | static inline double min2(double A, double B)
           22 | {
           23 | 	return fsel(A-B,B,A) ;
           24 | }
           25 | static inline double min3(double A, double B, double C)
           26 | {
           27 |     return min2(min2(A,B),C) ;
           28 | }
           29 | 
           30 | 
           31 | extern double dk1 ;
           32 | #if defined(LEAVE_SYMS_EXTERN)
           33 | double dk1 = 1.0 ; // The compiler does not know this is constant, so should not 'optimise' away the rounding below
           34 | #endif
           35 | static inline double NearestInteger(const double x)
           36 | {
           37 |    const double two10 = 1024.0 ;
           38 |    const double two50 = two10 * two10 * two10 * two10 * two10 ;
           39 |    const double two52 = two50 * 4.0 ;
           40 |    const double two51 = two50 * 2.0 ;
           41 |    const double offset = two52 + two51 ;
           42 | 
           43 |    // Force add and subtract of appropriate constant to drop lose fractional part
           44 |    // .. hide it from the compiler so the optimiser won't reassociate things ..
           45 |    const double losebits = (dk1*x) + offset ;
           46 |    const double result = (dk1*losebits) - offset ;
           47 |    return result ;
           48 | }
           49 | 
           50 | class XYZ
           51 | {
           52 | 	public: 
           53 | 	double mX ; 
           54 | 	double mY ;
           55 | 	double mZ ;
           56 | } ;
           57 | 
           58 | extern XYZ ReciprocalBoxSize ;
           59 | 
           60 | extern XYZ VoxMeshSize ;
           61 | 
           62 | int voxmesh3(const XYZ* A)
           63 | {
           64 | 	// Evaluate the bounding box
           65 | 	double xMin = min3(A[0].mX,A[1].mX,A[2].mX) ;
           66 | 	double yMin = min3(A[0].mY,A[1].mY,A[2].mY) ;
           67 | 	double zMin = min3(A[0].mZ,A[1].mZ,A[2].mZ) ;
           68 | 	double xMax = max3(A[0].mX,A[1].mX,A[2].mX) ;
           69 | 	double yMax = max3(A[0].mY,A[1].mY,A[2].mY) ;
           70 | 	double zMax = max3(A[0].mZ,A[1].mZ,A[2].mZ) ;
           71 | 	
           72 | 	// Centroid
           73 | 	double xCentroid = ( xMin+xMax ) / 3.0 ;
           74 | 	double yCentroid = ( yMin+yMax ) / 3.0 ;
           75 | 	double zCentroid = ( zMin+zMax ) / 3.0 ; 
           76 | 	
           77 | 	// Map to a unit box
           78 | 	double xBoxFrac = xCentroid * ReciprocalBoxSize.mX ;
           79 | 	double yBoxFrac = yCentroid * ReciprocalBoxSize.mY ;
           80 | 	double zBoxFrac = zCentroid * ReciprocalBoxSize.mZ ;
           81 | 	
           82 | 	// Image. This will give numbers in -0.5 <= A < 0.5 . I think .
           83 | 	double xImFrac = xBoxFrac - NearestInteger(xBoxFrac) ;
           84 | 	double yImFrac = yBoxFrac - NearestInteger(yBoxFrac) ;
           85 | 	double zImFrac = zBoxFrac - NearestInteger(zBoxFrac) ;
           86 | 	
           87 | 	// Scale to voxmesh
           88 | 	double xVFrac = ( xBoxFrac+0.5 ) * VoxMeshSize.mX ;
           89 | 	double yVFrac = ( yBoxFrac+0.5 ) * VoxMeshSize.mY ;
           90 | 	double zVFrac = ( zBoxFrac+0.5 ) * VoxMeshSize.mZ ;
           91 | 	
           92 | 	// Convert to integer
           93 | 	int xV = xVFrac ;
           94 | 	int yV = yVFrac ; 
           95 | 	int zV = zVFrac ;
           96 | 	
           97 | 	// Synthesize a scalar result
           98 | 	return ( xV << 16 ) | ( yV << 8 ) | zV ;
           99 | }


>>>>> FILE TABLE SECTION <<<<<
    1  =  /opt/ibmcmp/vacpp/7.0/include/builtins.h
    2  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/sys/types.h
    3  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/features.h
    4  =  /opt/ibmcmp/vacpp/7.0/include/sys/cdefs.h
    5  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/sys/cdefs.h
    6  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/gnu/stubs.h
    7  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/bits/types.h
    8  =  /opt/ibmcmp/vacpp/7.0/include/stddef.h
    9  =  /bgl/BlueLight/ppcfloor/blrts-gnu/lib/gcc-lib/powerpc-bgl-blrts-gnu/3.2/include/stddef.h
   10  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/time.h
   11  =  /opt/ibmcmp/vacpp/7.0/include/stddef.h
   12  =  /bgl/BlueLight/ppcfloor/blrts-gnu/lib/gcc-lib/powerpc-bgl-blrts-gnu/3.2/include/stddef.h
   13  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/endian.h
   14  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/bits/endian.h
   15  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/sys/select.h
   16  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/bits/select.h
   17  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/bits/sigset.h
   18  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/time.h
   19  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/bits/time.h
   20  =  /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/sys-include/sys/sysmacros.h

>>>>> COMPILATION EPILOGUE SECTION <<<<<

 IBM C and C++ Compilers Language Summary of Diagnosed Conditions

TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    3           0         0           0          0            3
Compilation succeeded for file voxmesh.cpp.

>>>>> OBJECT SECTION, OPTIMIZATION <<<<<
** Procedure List for Proc #   1: voxmesh3(const XYZ *) End of Phase 3 **(pid1)
    0:      HDR      
   63:      BB_BEGIN    2 /    0
   62:      PROC     A,gr3
    0:      DIRCTIV  issue_cycle,0
    0:      ST4U     gr1,#stack(gr1,-80)=gr1
    0:      DIRCTIV  issue_cycle,1
    0:      STFL     #stack(gr1,72)=fp31
    0:      DIRCTIV  issue_cycle,2
    0:      STFL     #stack(gr1,64)=fp30
    0:      FENCE    
    0:      DIRCTIV  end_prologue
    0:      FENCE    
    0:      DIRCTIV  issue_cycle,0
   99:      DIRCTIV  start_epilogue
   26:      LI       gr4=8
   26:      LI       gr6=32
    0:      DIRCTIV  issue_cycle,1
   26:      LFL      fp6=(XYZ).mX@0(gr3,0)
   26:      LI       gr7=56
    0:      DIRCTIV  issue_cycle,2
   73:      LA       gr5=.+CONSTANT_AREA%HI(gr2,0)
   26:      LFL      fp38=(XYZ).mY@8(gr3,gr4,0,trap=8)
    0:      DIRCTIV  issue_cycle,3
   73:      LA       gr5=+CONSTANT_AREA%LO(gr5,0)
   26:      LFL      fp5=(XYZ).mX@0(gr3,24)
    0:      DIRCTIV  issue_cycle,4
   78:      LA       gr4=.ReciprocalBoxSize%HI(gr2,0)
   26:      LFL      fp37=(XYZ).mY@8(gr3,gr6,0,trap=32)
    0:      DIRCTIV  issue_cycle,5
   78:      LA       gr6=ReciprocalBoxSize%LO(gr4,0)
   26:      LFL      fp7=(XYZ).mZ@10(gr3,16)
    0:      DIRCTIV  issue_cycle,6
   88:      LA       gr4=.VoxMeshSize%HI(gr2,0)
   26:      LFL      fp12=(XYZ).mZ@10(gr3,40)
    0:      DIRCTIV  issue_cycle,7
   88:      LA       gr8=VoxMeshSize%LO(gr4,0)
   26:      LFL      fp3=(XYZ).mX@0(gr3,48)
    0:      DIRCTIV  issue_cycle,8
   26:      FPSUB    fp2,fp34=fp6,fp38,fp5,fp37,fcr
   26:      LFL      fp35=(XYZ).mY@8(gr3,gr7,0,trap=56)
    0:      DIRCTIV  issue_cycle,9
   79:      LI       gr4=8
   26:      LFL      fp10=(XYZ).mZ@10(gr3,64)
    0:      DIRCTIV  issue_cycle,10
   73:      LFL      fp8=+CONSTANT_AREA(gr5,0)
   26:      SFL      fp13=fp7,fp12,fcr
    0:      DIRCTIV  issue_cycle,11
   88:      LI       gr7=16
   78:      LFL      fp1=<s70:d0:l8>(gr6,0)
    0:      DIRCTIV  issue_cycle,12
   79:      LFL      fp33=<s70:d8:l8>(gr6,gr4,0,trap=8)
    0:      DIRCTIV  issue_cycle,13
   23:      FPSEL    fp4,fp36=fp2,fp34,fp6,fp38,fp5,fp37
   88:      LFPS     fp0,fp32=+CONSTANT_AREA(gr5,gr7,0,trap=16)
    0:      DIRCTIV  issue_cycle,14
   14:      FPSEL    fp5,fp37=fp2,fp34,fp5,fp37,fp6,fp38
   80:      LFL      fp11=<s70:d16:l8>(gr6,16)
    0:      DIRCTIV  issue_cycle,15
   23:      FSEL     fp30=fp13,fp7,fp12
   90:      LFL      fp9=<s85:d16:l8>(gr8,16)
    0:      DIRCTIV  issue_cycle,16
   88:      LFL      fp2=<s85:d0:l8>(gr8,0)
   14:      FSEL     fp12=fp13,fp12,fp7
    0:      DIRCTIV  issue_cycle,17
   89:      LFL      fp34=<s85:d8:l8>(gr8,gr4,0,trap=8)
   93:      LI       gr6=32
    0:      DIRCTIV  issue_cycle,18
   23:      FPSUB    fp7,fp39=fp4,fp36,fp3,fp35,fcr
    0:      DIRCTIV  issue_cycle,19
   14:      FPSUB    fp6,fp38=fp5,fp37,fp3,fp35,fcr
    0:      DIRCTIV  issue_cycle,20
   23:      SFL      fp13=fp30,fp10,fcr
    0:      DIRCTIV  issue_cycle,21
   14:      SFL      fp31=fp12,fp10,fcr
    0:      DIRCTIV  issue_cycle,23
   23:      FPSEL    fp4,fp36=fp7,fp39,fp4,fp36,fp3,fp35
    0:      DIRCTIV  issue_cycle,24
   14:      FPSEL    fp3,fp35=fp6,fp38,fp3,fp35,fp5,fp37
    0:      DIRCTIV  issue_cycle,25
   23:      FSEL     fp5=fp13,fp30,fp10
    0:      DIRCTIV  issue_cycle,26
   14:      FSEL     fp6=fp31,fp10,fp12
    0:      DIRCTIV  issue_cycle,27
   99:      LFL      fp30=#stack(gr1,64)
    0:      DIRCTIV  issue_cycle,28
   99:      LFL      fp31=#stack(gr1,72)
    0:      DIRCTIV  issue_cycle,29
   73:      FPADD    fp3,fp35=fp4,fp36,fp3,fp35,fcr
    0:      DIRCTIV  issue_cycle,31
   75:      AFL      fp4=fp5,fp6,fcr
    0:      DIRCTIV  issue_cycle,34
   73:      FXPMUL   fp3,fp35=fp3,fp35,fp8,fp8,fcr
    0:      DIRCTIV  issue_cycle,36
   75:      MFL      fp4=fp4,fp8,fcr
    0:      DIRCTIV  issue_cycle,39
   88:      FPMADD   fp1,fp33=fp0,fp32,fp3,fp35,fp1,fp33,fcr
    0:      DIRCTIV  issue_cycle,41
   90:      FMA      fp3=fp0,fp4,fp11,fcr
    0:      DIRCTIV  issue_cycle,44
   88:      FPMUL    fp0,fp32=fp1,fp33,fp2,fp34,fcr
    0:      DIRCTIV  issue_cycle,46
   90:      MFL      fp1=fp3,fp9,fcr
    0:      DIRCTIV  issue_cycle,49
   93:      FPCTIWZ  fp0,fp32=fp0,fp32
    0:      DIRCTIV  issue_cycle,51
   95:      FCTIWZ   fp1=fp1
    0:      DIRCTIV  issue_cycle,54
   93:      SFPL     114:115:#MX_CONVF1_0(gr1,gr6,0,trap=32)=fp0,fp32
    0:      DIRCTIV  issue_cycle,55
   93:      L4A      gr0=#MX_CONVF1_0(gr1,36)
    0:      DIRCTIV  issue_cycle,56
   95:      STFL     #MX_CONVF1_2(gr1,48)=fp1
    0:      DIRCTIV  issue_cycle,57
   94:      L4A      gr3=#MX_CONVF1_1(gr1,44)
    0:      DIRCTIV  issue_cycle,59
   98:      SLL4     gr0=gr0,16
    0:      DIRCTIV  issue_cycle,61
   98:      SLL4     gr3=gr3,8
    0:      DIRCTIV  issue_cycle,62
   98:      O        gr0=gr0,gr3
    0:      DIRCTIV  issue_cycle,63
   95:      L4A      gr4=#MX_CONVF1_2(gr1,52)
   99:      AI       gr1=gr1,80
    0:      DIRCTIV  issue_cycle,72
   98:      O        gr3=gr0,gr4
    0:      DIRCTIV  issue_cycle,73
   99:      CONSUME  gr1,lr,gr3,gr14-gr31,fp14-fp31,fp46-fp63,cr[234],fsr,fcr,ctr,??0,??0,??0
   99:      BA       lr
   63:      BB_END   
   65:      BB_BEGIN    3 /    0
   99:      PEND     
   65:      BB_END   
** End of Procedure List for Proc #   1: voxmesh3(const XYZ *) End of Phase 3 **



-qdebug=NBLRL:PLST3:CYCLES:

 GPR's set/used:   ssus ssss s--- ----  ---- ---- ---- ----
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- --ss
                   ssss ssss ---- ----  ---- ---- ---- ----
 CCR's set/used:   ---- ----

     | 000000                           PDEF     voxmesh3(const XYZ *)
   62|                                  PROC     A,gr3
    0| 000000 stwu     9421FFB0   1     ST4U     gr1,#stack(gr1,-80)=gr1
    0| 000004 stfd     DBE10048   1     STFL     #stack(gr1,72)=fp31
    0| 000008 stfd     DBC10040   1     STFL     #stack(gr1,64)=fp30
   26| 00000C addi     38800008   1     LI       gr4=8
   26| 000010 addi     38C00020   1     LI       gr6=32
   26| 000014 lfd      C8C30000   1     LFL      fp6=(XYZ).mX@0(gr3,0)
   26| 000018 addi     38E00038   1     LI       gr7=56
   73| 00001C addis    3CA00000   1     LA       gr5=.+CONSTANT_AREA%HI(gr2,0)
   26| 000020 lfsdx    7CC3219C   1     LFL      fp38=(XYZ).mY@8(gr3,gr4,0,trap=8)
   73| 000024 addi     38A50000   1     LA       gr5=+CONSTANT_AREA%LO(gr5,0)
   26| 000028 lfd      C8A30018   1     LFL      fp5=(XYZ).mX@0(gr3,24)
   78| 00002C addis    3C800000   1     LA       gr4=.ReciprocalBoxSize%HI(gr2,0)
   26| 000030 lfsdx    7CA3319C   1     LFL      fp37=(XYZ).mY@8(gr3,gr6,0,trap=32)
   78| 000034 addi     38C40000   1     LA       gr6=ReciprocalBoxSize%LO(gr4,0)
   26| 000038 lfd      C8E30010   1     LFL      fp7=(XYZ).mZ@10(gr3,16)
   88| 00003C addis    3C800000   1     LA       gr4=.VoxMeshSize%HI(gr2,0)
   26| 000040 lfd      C9830028   1     LFL      fp12=(XYZ).mZ@10(gr3,40)
   88| 000044 addi     39040000   1     LA       gr8=VoxMeshSize%LO(gr4,0)
   26| 000048 lfd      C8630030   1     LFL      fp3=(XYZ).mX@0(gr3,48)
   26| 00004C fpsub    0046281A   1     FPSUB    fp2,fp34=fp6,fp38,fp5,fp37,fcr
   26| 000050 lfsdx    7C63399C   1     LFL      fp35=(XYZ).mY@8(gr3,gr7,0,trap=56)
   79| 000054 addi     38800008   1     LI       gr4=8
   26| 000058 lfd      C9430040   1     LFL      fp10=(XYZ).mZ@10(gr3,64)
   73| 00005C lfd      C9050000   1     LFL      fp8=+CONSTANT_AREA(gr5,0)
   26| 000060 fsub     FDA76028   1     SFL      fp13=fp7,fp12,fcr
   88| 000064 addi     38E00010   1     LI       gr7=16
   78| 000068 lfd      C8260000   1     LFL      fp1=<s70:d0:l8>(gr6,0)
   79| 00006C lfsdx    7C26219C   1     LFL      fp33=<s70:d8:l8>(gr6,gr4,0,trap=8)
   23| 000070 fpsel    0082314A   1     FPSEL    fp4,fp36=fp2,fp34,fp6,fp38,fp5,fp37
   88| 000074 lfpsx    7C053B1C   1     LFPS     fp0,fp32=+CONSTANT_AREA(gr5,gr7,0,trap=16)
   14| 000078 fpsel    00A2298A   1     FPSEL    fp5,fp37=fp2,fp34,fp5,fp37,fp6,fp38
   80| 00007C lfd      C9660010   1     LFL      fp11=<s70:d16:l8>(gr6,16)
   23| 000080 fsel     FFCD3B2E   1     FSEL     fp30=fp13,fp7,fp12
   90| 000084 lfd      C9280010   1     LFL      fp9=<s85:d16:l8>(gr8,16)
   88| 000088 lfd      C8480000   1     LFL      fp2=<s85:d0:l8>(gr8,0)
   14| 00008C fsel     FD8D61EE   1     FSEL     fp12=fp13,fp12,fp7
   89| 000090 lfsdx    7C48219C   1     LFL      fp34=<s85:d8:l8>(gr8,gr4,0,trap=8)
   93| 000094 addi     38C00020   1     LI       gr6=32
   23| 000098 fpsub    00E4181A   1     FPSUB    fp7,fp39=fp4,fp36,fp3,fp35,fcr
   14| 00009C fpsub    00C5181A   1     FPSUB    fp6,fp38=fp5,fp37,fp3,fp35,fcr
   23| 0000A0 fsub     FDBE5028   1     SFL      fp13=fp30,fp10,fcr
   14| 0000A4 fsub     FFEC5028   1     SFL      fp31=fp12,fp10,fcr
   23| 0000A8 fpsel    008720CA   1     FPSEL    fp4,fp36=fp7,fp39,fp4,fp36,fp3,fp35
   14| 0000AC fpsel    0066194A   1     FPSEL    fp3,fp35=fp6,fp38,fp3,fp35,fp5,fp37
   23| 0000B0 fsel     FCADF2AE   1     FSEL     fp5=fp13,fp30,fp10
   14| 0000B4 fsel     FCDF532E   1     FSEL     fp6=fp31,fp10,fp12
   99| 0000B8 lfd      CBC10040   1     LFL      fp30=#stack(gr1,64)
   99| 0000BC lfd      CBE10048   1     LFL      fp31=#stack(gr1,72)
   73| 0000C0 fpadd    00641818   1     FPADD    fp3,fp35=fp4,fp36,fp3,fp35,fcr
   75| 0000C4 fadd     FC85302A   1     AFL      fp4=fp5,fp6,fcr
   73| 0000C8 fxpmul   006800D4   1     FXPMUL   fp3,fp35=fp3,fp35,fp8,fp8,fcr
   75| 0000CC fmul     FC840232   3     MFL      fp4=fp4,fp8,fcr
   88| 0000D0 fpmadd   00230060   1     FPMADD   fp1,fp33=fp0,fp32,fp3,fp35,fp1,fp33,fcr
   90| 0000D4 fmadd    FC6402FA   3     FMA      fp3=fp0,fp4,fp11,fcr
   88| 0000D8 fpmul    00010090   1     FPMUL    fp0,fp32=fp1,fp33,fp2,fp34,fcr
   90| 0000DC fmul     FC230272   3     MFL      fp1=fp3,fp9,fcr
   93| 0000E0 fpctiwz  00000580   1     FPCTIWZ  fp0,fp32=fp0,fp32
   95| 0000E4 fctiwz   FC20081E   3     FCTIWZ   fp1=fp1
   93| 0000E8 stfpdx   7C01379C   0     SFPL     114:115:#MX_CONVF1_0(gr1,gr6,0,trap=32)=fp0,fp32
   93| 0000EC lwz      80010024   0     L4A      gr0=#MX_CONVF1_0(gr1,36)
   95| 0000F0 stfd     D8210030   0     STFL     #MX_CONVF1_2(gr1,48)=fp1
   94| 0000F4 lwz      8061002C   0     L4A      gr3=#MX_CONVF1_1(gr1,44)
   98| 0000F8 rlwinm   5400801E   0     SLL4     gr0=gr0,16
   98| 0000FC rlwinm   5463402E   0     SLL4     gr3=gr3,8
   98| 000100 or       7C001B78   0     O        gr0=gr0,gr3
   95| 000104 lwz      80810034   0     L4A      gr4=#MX_CONVF1_2(gr1,52)
   99| 000108 addi     38210050   1     AI       gr1=gr1,80
   98| 00010C or       7C032378   1     O        gr3=gr0,gr4
   99| 000110 bclr     4E800020   0     BA       lr
     |               Instruction count           69
     |               Straight-line exec time     68
     |               Constant Area
     | 000000        3FD55555 55555555 3F000000 49424D20 3F000000 3F000000
    1500-036: (I) The NOSTRICT option (default at OPT(3)) has the potential to alter the semantics of a program.  Please refer to documentation on the STRICT/NOSTRICT option for more information.
