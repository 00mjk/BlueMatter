# routine to extract and fit variances from RunResults.txt
# new version works on the combined set of runs generated by MultiRun
# Runs within a MultRun are grouped into RunSets for which only one parameter
# is varied, e.g. timestep size
#
# The strategy used here is to sort the contents of the RunResults.txt file
# according to the RunSet column and then stream through the sorted file to
# analyze the data

from Numeric import *
from LinearAlgebra import *
from polyfit import *
import types
import re
import sys
import os
import time
import warnings

    
def sum(x,y):
    return x+y

def createSvgSummary(summary):
    # summary is a list of tuples.  The third element of the tuple is the
    # run name
    summaryPlot = open("summary.gp", 'w')
    summaryPlot.write('reset\n')
    summaryPlot.write('set size .8, .8\n')
    summaryPlot.write('set origin .1, .1\n')
    summaryPlot.write('set term svg\n')
    summaryPlot.write('set output \'summary_base.svg\'\n')
    summaryPlot.write('set logscale xy\n')
    summaryPlot.write('set xlabel \"Chi^2\"\n')
    summaryPlot.write('set ylabel \"abs(Ratio - 1)\"\n')
    summaryPlot.write('plot \'summary.dat\' using 2:1\n')
    summaryPlot.write('set output\n')
    summaryPlot.close()
    os.system('gnuplot summary.gp')
    p = re.compile(r'\s+<use xlink:href=\"\#gpPt')
    svgIn = open("summary_base.svg", 'r')
    svgOut = open("summary.svg", 'w')
    lines = svgIn.readlines()
    i = 0
    for input in lines:
        m = p.match(input)
        if m and (i < len(summary)):
            svgOut.write('<a xlink:href=\"' + summary[i][2] + '.html\">\n')
            svgOut.write(input)
            svgOut.write('</a>\n')
            i=i+1
        else:
            svgOut.write(input)
    svgOut.close()


class AnalyzeRunSet:
    def __init__(self, rVector, corrTime, polydeg, mask, rcond):
        self.__polydeg = polydeg
        self.__mask = mask
        self.__rcond = rcond
        self.__corrTime = corrTime
        self.__rVector = rVector
        epsilon = 1e-10
        tsArray = []
        tsCountArray = []
	cqArray = []
	cqRMSDArray = []
        cqRMSDRMSDArray = []
        print rVector
        for run in rVector:
            tsArray.append(float(run['OuterTimeStepInPicoSeconds']))
	    delaystats = 0
	    if run.has_key('DelayStats'):
	        delaystats = int(float(run['DelayStats']))
            tsCountArray.append(int(float(run['Step'])) - delaystats)
	    cqArray.append(float(run['ConsQuant']))
            cqRMSDArray.append(float(run['ConsQRMSD']))
            cqRMSDRMSDArray.append(float(run['CQRMSDRMSD']))
        self.__ts = array(tsArray, Float)
        minStep = min(tsArray)
        print "minStep:", minStep
        tsMultI = ones(shape(self.__ts), Int)
        tsMultI = self.__ts/minStep
        print "tsMultI:",tsMultI
        tsMult = array(tsMultI, Float)
        print "tsMult:",tsMult
        tsMultInv = 1.0/tsMult
        print "tsMultInv:", tsMultInv
        self.__cq = array(cqArray, Float)
        # cqrmsd is the rmsd of the conserved quantity. It should vary
        # quadratically with timestep size
        self.__cqrmsd = array(cqRMSDArray, Float)
        # cqrmsdrmsd is the rmsd of the distribution of of values for cqrmsd
        # computed via the bootstrap procedure
        self.__cqrmsdrmsd = array(cqRMSDRMSDArray, Float)
        self.__tsCount = array(tsCountArray, Float)

        self.__htmlFile = open(self.__rVector[0]['RunSet'] + '.html', 'w')
        self.__htmlFile.write('<HTML>\n<HEAD>\n')
        self.__htmlFile.write('<TITLE>')
        self.__htmlFile.write('Results for ' + self.__rVector[0]['RunSet'] + '</TITLE>\n')
        self.__htmlFile.write('</HEAD>\n<BODY>\n')
        self.__htmlFile.write('<H1>Results for ' + self.__rVector[0]['RunSet'] +'</H1>\n<br><br>\n')
        self.__htmlFile.write('<table border=2>\n')
        self.__htmlFile.write('<caption><H2>Run Results</H2></caption>\n')
        self.__htmlFile.write('<tr><th align=left>Directory Name</th>')
        self.__htmlFile.write('<th align=left>Time Step (ps)</th>')
        self.__htmlFile.write('<th align=left>Statistics Time (ps)</th>')
        self.__htmlFile.write('<th align=left>ConsQ</th>')
        self.__htmlFile.write('<th align=left>CQRMSD</th>')
        self.__htmlFile.write('<th align=left>CQRMSDRMSD</th>')
        self.__htmlFile.write('<th align=left>CQRMSDRMSD/CQRMSD</th>')
        self.__htmlFile.write('<th align=left>Normalized Ratio</th></tr>\n')
        totalTime = self.__ts*self.__tsCount
	lastcqRMSD = 0.0
	lastTimeStep = float(self.__ts[0])
        for i in range(len(rVector)):
            self.__htmlFile.write('<tr>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(self.__rVector[i]['DirName'])
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(str(self.__ts[i]))
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(str(totalTime[i]))
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(str(cqArray[i]))
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write('%g' % cqRMSDArray[i])
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write('%g' % self.__cqrmsdrmsd[i])
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write('%g' % (self.__cqrmsdrmsd[i]/cqRMSDArray[i]))
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
	    if lastcqRMSD < epsilon:
                self.__htmlFile.write('-')
	    else:
                self.__htmlFile.write('%g' % (cqRMSDArray[i]/lastcqRMSD*lastTimeStep*lastTimeStep/self.__ts[i]/self.__ts[i]))
	    lastcqRMSD = cqRMSDArray[i]
	    lastTimeStep = float(self.__ts[i])
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('</tr>\n')
        self.__htmlFile.write('</table>\n<br><br>\n')

        self.__htmlFile.write('<table border=2>\n')
        self.__htmlFile.write('<caption><H2>RunSet Parameter Values</H2></caption>\n')
        self.__htmlFile.write('<tr><th align=center>Parameter</th><th align=center>Value</th></tr>\n')
	params = self.__rVector[0].params()
        for (param, value) in params:
            self.__htmlFile.write('<tr>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(param)
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('<td>')
            self.__htmlFile.write(value)
            self.__htmlFile.write('</td>')
            self.__htmlFile.write('</tr>\n')
        self.__htmlFile.write('</table>\n<br><br>\n')
        
        
    def tsCount(self):
        return(self.__tsCount)
    def cq(self):
        return(self.__cq)
    def rmsdCQ(self):
        return(self.__cqrmsd)
    def rmsdrmsCQ(self):
        return(self.__cqrmsdrmsd)
    def finalize(self):
        self.__htmlFile.write('</BODY>\n</HTML>\n')
        self.__htmlFile.close()
    def ratios(self):
        ts_rmsd = []
        for i in range(len(self.__ts)):
            ts_rmsd.append((self.__ts[i], self.__cqrmsd[i]))
        ts_rmsd.sort()
        print "ts_rmsd", ts_rmsd
        r0 = ts_rmsd[1][1]/ts_rmsd[0][1]
        t0 = ts_rmsd[1][0]/ts_rmsd[0][0]
        r1 = ts_rmsd[2][1]/ts_rmsd[1][1]
        t1 = ts_rmsd[2][0]/ts_rmsd[1][0]
        self.__htmlFile.write('<br><br>\n')
        self.__htmlFile.write('r0/t0^2 = ' + str(r0/(t0*t0)) + '\n')
        self.__htmlFile.write('<br>\n')
        self.__htmlFile.write('r1/t1^2 = ' + str(r1/(t1*t1)) + '\n')
        self.__htmlFile.write('<br>\n')
        ratio = (r0, t0*t0, r1, t1*t1)
        print "ratio",ratio
        return(ratio)
    def fit(self):
        outFile = open(self.__rVector[0]['RunSet'] + '.var3','w')
        outFile.write('# column 1: time step size (picoseconds)\n')
        outFile.write('# column 2: average energy\n')
        outFile.write('# column 3: rmsd of energy (sqrt(energy variance)) \n')
        outFile.write('# column 4: uncertainty in rmsd of ConsQuant (computed via bootstrap) \n')
        for i in range(len(self.__rVector)):
            outFile.write(str(self.__ts[i]))
            outFile.write(' ')
            outFile.write(str(self.__cq[i]))
            outFile.write(' ')
            outFile.write(str(self.__cqrmsd[i]))
            outFile.write(' ')
            outFile.write(str(self.__cqrmsdrmsd[i]))
            outFile.write('\n')
        outFile.close()
        print "ts:", self.__ts
        print "cqrmsd:", self.__cqrmsd
        print "cqrmsdrmsd:", self.__cqrmsdrmsd
        print "polydeg:", self.__polydeg
        print "mask:", self.__mask
        print "rcond:", self.__rcond
        rc = polyfit(self.__ts, self.__cqrmsd, self.__cqrmsdrmsd, self.__polydeg, self.__mask, self.__rcond)

        print "parameters:\n",rc[0]
        coeff = []
        index = 0
        for i in range(self.__polydeg + 1):
            if self.__mask[i]:
                coeff.append(rc[0][index])
                index = index + 1
            else:
                coeff.append(0.0)
        #print "covariance matrix:\n",rc[1]
        res2 = []
        sum = 0.0
        for i in range(len(self.__ts)):
            res = self.__cqrmsd[i] - polyeval(coeff,self.__ts[i])
            res = res/self.__cqrmsdrmsd[i]
            res2.append(res*res)
            sum = sum + res*res
        chi2 = sum
        self.__htmlFile.write("Chi Squared: " + str(chi2) + "\n")
        self.__htmlFile.write("<br><br>\n")
        print "parameters and estimated uncertainties:"
        self.__htmlFile.write("parameters and estimated uncertainties:\n<br><br>\n")
        index = 0
        for i in range(len(coeff)):
            if self.__mask[i]:
                print "a[",i,"] =",rc[0][index], "+-",sqrt(rc[1][index][index])
                self.__htmlFile.write("a["+str(i)+"] = "+str(rc[0][index])+" +- ")
                self.__htmlFile.write(str(sqrt(rc[1][index][index])))
                self.__htmlFile.write("\n<br>\n")
                index = index+1
        self.__htmlFile.write("<br><br>\n")
        vres = array(res2, Float)
        sum = add.reduce(vres)
        sum = sqrt(sum/float(len(self.__ts) - len(rc[0])))
        print "average rmsd of fit = ", sum
        self.__htmlFile.write("average rmsd of fit = " + str(sum) + "\n<br>\n")
        eFile = open('rmsd_' + self.__rVector[0]['RunSet'] + '.dat', 'w')
        for i in range(len(self.__ts)):
            eFile.write(str(self.__ts[i]))
            eFile.write(' ')
            eFile.write(str(self.__cqrmsd[i]))
            eFile.write(' ')
            eFile.write(str(self.__cqrmsdrmsd[i]))
            eFile.write('\n')
        eFile.close()
        gpFile = open('plotfit_' + self.__rVector[0]['RunSet'] + '.gp', 'w')
        gpFile.write('reset\n')
        gpFile.write('set term png\n')
        gpFile.write('set output \'plotfit_' + self.__rVector[0]['RunSet'] + '.png\'\n')
        gpFile.write('ermsd(x) = 0 ')
        for i in range(len(coeff)):
            gpFile.write('+ ')
            gpFile.write(str(coeff[i]))
            for j in range(i):
                gpFile.write('*x')
        gpFile.write('\n')
        gpFile.write('set logscale xy\n')
        gpFile.write('set xlabel \"time step (picoseconds)\"\n')
        gpFile.write('set ylabel \"Ermsd\"\n')
        gpFile.write('set label \"')
        gpFile.write('a2 = ' + str(coeff[2]))
        gpFile.write('\" at graph .1, .8\n')
        gpFile.write('set label \"')
        gpFile.write('Chi^2 = ' + str(chi2))
        gpFile.write('\" at graph .1, .7\n')
        gpFile.write('plot \"rmsd_' + self.__rVector[0]['RunSet'] + '.dat\" using 1:2:3 with yerrorbars, ermsd(x) with lines\n')
        gpFile.write('set output\n')
        gpFile.close()
        self.__htmlFile.write('<img src=\"plotfit_' + self.__rVector[0]['RunSet'] + '.png\" alt=\"plot of data + fit\">\n<br><br>\n')
        os.system('gnuplot plotfit_' + self.__rVector[0]['RunSet'] + '.gp')
        return(chi2)


class AnalyzeConservation:
    def __init__(self, corrTime, resultsDir = './analysis'):
        self.__results = {}
        self.__chi2array = []
        self.__ratioArray = []
        self.__corrTime = corrTime
        self.__polydeg = 2
        self.__mask = [0, 0, 1] # try to fit only with a + b*x*x
        self.__rcond = 1e-10
        # create directory to hold all of the analysis stuff
        print "mkdir", resultsDir
        os.mkdir(resultsDir)
        print "chdir", resultsDir
        os.chdir(resultsDir)
        self.__mainFile = open("index.html", 'w')
        self.mainHtmlSetup()

    def mainHtmlSetup(self):
        self.__mainFile.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n')
        self.__mainFile.write('<HTML>\n<HEAD>\n')
        titleString = 'Results from ' + time.asctime(time.localtime(time.time()))
        self.__mainFile.write('<TITLE>' + titleString + '</TITLE>\n</HEAD>\n<BODY>\n')
        self.__mainFile.write('<H1>' + titleString + '</H1>\n<br>\n')
        self.__mainFile.write('<EMBED SRC="summary.svg" NAME="svgsummary" HEIGHT="480" WIDTH="600" TYPE="image/svg+xml" PLUGINSPAGE="http://www.adobe.com/svg/viewer/install">\n<br>\n')
    def mainHtmlClose(self):
        self.__mainFile.write('<TABLE>\n')
        self.__mainFile.write('<CAPTION><h2>Chi2 Values for RunSets</h2></CAPTION>\n')
        self.__mainFile.write('<TR><TH ALIGN=left>RunSet</TH><TH ALIGN=center>Chi2</TH></TR>\n')
        # create summary data array
        summary = []
        summaryFile = open("summary.dat", 'w')
        summaryFile.write('# col 1: abs(ratio - 1)\n')
        summaryFile.write('# col 2: chi^2\n')
        summaryFile.write('# col 3: RunSetID\n')
        for i in range(len(self.__chi2array)):
            ratioDev = max(abs(self.__ratioArray[i][0][0]/self.__ratioArray[i][0][1] - 1), abs(self.__ratioArray[i][0][2]/self.__ratioArray[i][0][3] - 1))
            newElt = (ratioDev, self.__chi2array[i][0], self.__chi2array[i][1])
            summary.append(newElt)
            summaryFile.write(str(ratioDev) + ' ')
            summaryFile.write(str(self.__chi2array[i][0]) + ' ')
            summaryFile.write(str(self.__chi2array[i][1]) + '\n')
        summaryFile.close()
        createSvgSummary(summary)
        self.__chi2array.sort()
        for i in self.__chi2array:
            self.__mainFile.write('<TR><TD ALIGN=left>')
            self.__mainFile.write('<A HREF=')
            self.__mainFile.write('\"' + str(i[1]) + '.html\">')
            self.__mainFile.write(str(i[1]))
            self.__mainFile.write('</A>')
            self.__mainFile.write('</TD><TD ALIGN=left>')
            self.__mainFile.write(str(i[0]))
            self.__mainFile.write('</TD></TR>\n')
        self.__mainFile.write('</TABLE>\n<br><br>\n')
        ratio = []
        for i in range(len(self.__ratioArray)):
            ratio.append((self.__ratioArray[i][0][0]/self.__ratioArray[i][0][1], self.__ratioArray[i][0][2]/self.__ratioArray[i][0][3], self.__ratioArray[i][1]))
        self.__mainFile.write('<TABLE>\n')
        self.__mainFile.write('<CAPTION><h2>RMSD Values for RunSets</h2></CAPTION>\n')
        self.__mainFile.write('<TR><TH ALIGN=left>RunSet</TH><TH ALIGN=left>Ratio 0</TH><TH ALIGN=left>Ratio 1</TH></TR>\n')
        ratio.sort()
        for i in ratio:
            self.__mainFile.write('<TR><TD ALIGN=left>')
            self.__mainFile.write('<A HREF=')
            self.__mainFile.write('\"' + str(i[2]) + '.html\">')
            self.__mainFile.write(str(i[2]))
            self.__mainFile.write('</A>')
            self.__mainFile.write('</TD>\n')
            self.__mainFile.write('<TD ALIGN=left>')
            self.__mainFile.write(str(i[0]))
            self.__mainFile.write('</TD>')
            self.__mainFile.write('<TD ALIGN=left>')
            self.__mainFile.write(str(i[1]))
            self.__mainFile.write('</TD>')
            self.__mainFile.write('</TR>\n')
        self.__mainFile.write('</TABLE>\n<br><br>\n')
        self.__mainFile.write('</BODY>\n</HTML>\n')
        self.__mainFile.close()
        
    def finalize(self):
        self.mainHtmlClose()

    def runSet(self, rVector):
        rsAnalysis = AnalyzeRunSet(rVector, self.__corrTime, self.__polydeg, self.__mask, self.__rcond)
        chi2 = rsAnalysis.fit()
        print "Chi Squared:\n", chi2
        ratios = rsAnalysis.ratios()
        rsAnalysis.finalize()
        self.__chi2array.append((chi2, rVector[0]['RunSet']))
        self.__ratioArray.append((ratios, rVector[0]['RunSet']))

