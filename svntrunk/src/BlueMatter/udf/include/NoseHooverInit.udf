/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 void NoseHooverInit ( 
        MDVM &aMDVM
        )
{
  
 int NumberOfThermostats = aMDVM.GetNumberOfThermostats();
 int NumberOfSitesPerThermostat = aMDVM.GetNumberOfSitesPerThermostat();     

 // Nose-Hoover add-ons
 double kt1 = aMDVM.GetVelocityResampleTargetTemperature() * SciConst::KBoltzmann_IU;
 // double tau = 100 * aMDVM.GetDeltaT() * aMDVM.GetNoseHooverMassFactor();   
 double tau = aMDVM.GetProperTimeConstant() * aMDVM.GetNoseHooverMassFactor();
        
      
 int dim = aMDVM.GetFragmentDimension();        

 aMDVM.ReportDkT0( 0, dim * kt1 ); 

 int degOfFreedom = 3 * aMDVM.GetFragmentSiteCount() - 3 - aMDVM.GetFragmentConstraintCount();

// if( degOfFreedom == 0 )
//   degOfFreedom = 3;

 aMDVM.ReportDkT1( 0, degOfFreedom * kt1 );
          
  for(int j = 1; j < NumberOfSitesPerThermostat; j++)
    {
      aMDVM.ReportDkT0( j, kt1 ); 
      aMDVM.ReportDkT1( j, kt1 ); 
    }
   
  /****************************************************************
   *       Initialize Thermostat Masses Positions Velocities
   ****************************************************************/
   for(int thermostat=0; thermostat  < NumberOfThermostats ; thermostat++)
    {   
      for(int inhc=0; inhc < NumberOfSitesPerThermostat ; inhc++)
	{
          // double kt = _dkt[thermostat][inhc];
          double kt = aMDVM.GetDkt( thermostat, inhc );
          // double tau = aMDVM.GetTAU();

          // _thermostatMasses[thermostat][inhc] = kt * tau  * tau;
          double thermostatMass = kt * tau  * tau;
          aMDVM.ReportThermostatMass( thermostat, inhc, thermostatMass );
	}
    }        
   /****************************************************************/
}
