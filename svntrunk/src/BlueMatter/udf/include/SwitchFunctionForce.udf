/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 void SwitchFunctionForce(
        MDVM &aMDVM,
        )
{
   XYZ force = aMDVM.GetForce( MDVM::SiteA );     
   XYZ virial = aMDVM.GetVirial();     
   double energy = aMDVM.GetEnergy();                      
   double distance = aMDVM.GetDistance( MDVM::SiteA, MDVM::SiteB );
                     
   double S ;
   double pdSdR ;
//   SwitchFunctionRadii sfr;
//   aMDVM.GetSwitchFunctionRadii( sfr );
//   SwitchFunction sf( sfr ) ;  
//   sf.Evaluate(distance, S, pdSdR) ;
   aMDVM.EvaluateSwitch(distance, S, pdSdR) ;

//   XYZ dVecAB = aMDVM.GetVector( MDVM::SiteA, MDVM::SiteB );
//   double dVecABMagR = aMDVM.GetReciprocalDistance( MDVM::SiteA, MDVM::SiteB );
//   XYZ unitVector = dVecAB*dVecABMagR;

   //    XYZ ForceSwitched = force*S - unitVector*energy*pdSdR;
   XYZ ForceSwitched = force*S;
//   double EnergySwitched = energy * S;
   XYZ    VirialSwitched = virial * S;

   aMDVM.ReportEnergy( energy );
   aMDVM.ReportVirial( virial );
                      
   aMDVM.ReportForce( MDVM::SiteA,   ForceSwitched );
   aMDVM.ReportForce( MDVM::SiteB, - ForceSwitched );
// !!! tjcw caution; if we ever suport switch function force with Ewald scalar 
// virials, we will need some code here. But I think we would do it a different awy
}
