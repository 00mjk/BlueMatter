/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 void LennardJones14Force(
        MDVM &aMDVM,
        double epsilon,
        double sigma
        )
  {
#if !defined(OMIT_BOND_VECTOR_TABLE)
  double dVecABMag = aMDVM.GetLength() ;
  double dVecABMagR = aMDVM.GetRecipLength() ;
  double dVecABMag2R   = dVecABMagR*dVecABMagR ;
  double tmp2          = sigma*sigma*dVecABMag2R ;
  double tmp6          = tmp2*tmp2*tmp2 ;
  double tmp12         = tmp6 * tmp6;

  double lje           = epsilon * (tmp12 - 2.0 * tmp6) ;
  double dEdr =
                (
                  (12 * epsilon) *
                  (
                      (  tmp12)
                    - (  tmp6)
                  )
                )  * dVecABMagR ;

  aMDVM.ReportEnergy( lje );
  aMDVM.ReportdEdr(dEdr) ;

#else
  XYZ    dVecAB        = aMDVM.GetVector( MDVM::SiteA, MDVM::SiteB) ;
  double dVecABMag2    = dVecAB.LengthSquared() ;

  double dVecABMagR    = 1.0/sqrt(dVecABMag2) ;
  double dVecABMag2R   = dVecABMagR*dVecABMagR ;
  double dVecABMag     = dVecABMag2 * dVecABMagR ;

  double tmp2          = sigma*sigma*dVecABMag2R ;
  double tmp6          = tmp2*tmp2*tmp2 ;
  double tmp12         = tmp6 * tmp6;

  double lje           = epsilon * (tmp12 - 2.0 * tmp6) ;

  aMDVM.ReportEnergy( lje );

  double DEDR =
                (
                  (12 * epsilon) *
                  (
                      (  tmp12)
                    - (  tmp6)
                  )
                ) * dVecABMagR ;

  XYZ    fab     = dVecAB * dVecABMagR * DEDR;

  aMDVM.ReportForce( MDVM::SiteA ,   fab ) ;
  aMDVM.ReportForce( MDVM::SiteB , - fab ) ;

  return;
#endif  
  }
