/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 void StdHarmonicBondForce(
        MDVM &aMDVM,
        double k,
        double r0
        )
{
#if !defined(OMIT_BOND_VECTOR_TABLE)
      double rAB = aMDVM.GetLength() ;
      double rABr = aMDVM.GetRecipLength() ;
      double DeltaFromEquilibrium  = rAB - r0;

      aMDVM.ReportEnergy(  k
                      * DeltaFromEquilibrium * DeltaFromEquilibrium );

      double dEdr  =
        -2.0 * ( k * DeltaFromEquilibrium ) ;
      aMDVM.ReportdEdr(dEdr) ;
#else
      XYZ dVecAB = aMDVM.GetVector( MDVM::SiteA, MDVM::SiteB ) ;
      double rAB2 = dVecAB.LengthSquared() ;
      double rABr = 1.0 / sqrt(rAB2) ;
      double rAB = rAB2 * rABr ;
      double DeltaFromEquilibrium  = rAB - r0;

      aMDVM.ReportEnergy(  k
                      * DeltaFromEquilibrium * DeltaFromEquilibrium );

      double DEDR  =
        -2.0 * ( k * DeltaFromEquilibrium ) * rABr;

      XYZ Force = dVecAB * DEDR;

      aMDVM.ReportForce( MDVM::SiteA, Force );
      aMDVM.ReportForce( MDVM::SiteB, Force * (-1) );
#endif      
}

