/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #ifndef __MSD_HPP__
#define __MSD_HPP__
#ifndef EXECUTABLEID 
#define EXECUTABLEID -1
#endif 
//%database_name:mdsetup
//%source_id:8218
//%system_id:18504
//%ctp_id:4997
//%probspec_version:v1.0.0
//%probspec_tag:RTP file is comming in from db2
//%magic_number:0xFACEB0B4
#ifndef MSD_COMPILE_DATA_ONLY
#include <pk/platform.hpp>
#include <pk/fxlogger.hpp>
#endif
#include <BlueMatter/XYZ.hpp>
#include <BlueMatter/BoundingBox.hpp>

#ifndef assert
#include <assert.h>
#endif
#ifndef MSD_COMPILE_DATA_ONLY
#include <BlueMatter/RunTimeGlobals.hpp>
RunTimeGlobals RTG;
#endif
#include <BlueMatter/UDF_Binding.hpp>
#include <BlueMatter/MSD_Prefix.hpp>
#define MSDDEF_DoWaterInit	0

#define MSDDEF_DoVelocityResample	1

#define MSDDEF_DoTemperatureControl	1

#define MSDDEF_DoShakeRattleProtein	1

#define MSDDEF_DoPressureControl	0

#define MSDDEF_DoShakeRattleWater	1

#define MSDDEF_DoNVT	1

#define MSDDEF_DoShakeRattle	1

#define MSDDEF_DoFreeEnergy	0

#define MSDDEF_DoNSQCheck	0

#define MSDDEF_STDCOULOMB

#define charge14  1
#define charge14scale  1.0
#define ChargeConversion  SciConst::StdChargeConversion
#define lj14  1
#define lj14scale  1.0
#define TimeConversionFactor  SciConst::StdTimeConversion


class MSD
{
public:

enum { NSQ0 = 0, NSQ1 = 1, NSQ2 = 2};
enum { Exclusion = 0, Inclusion = 1};
enum { WATER = 0, AMINOACID = 1, OTHER=2};
enum { NORM = 0, COMB = 1};

static const int    SimTicksAtRespaLevel[];
static const int    RespaLevelByUDFCode[];
static const int    NumberOfRespaLevels;
static const int    RespaLevelNonBonded;
static int    NumberOfSimTicks;
static const double ConvertedInnerTimeStep;
static const double IntegratorLevelConvertedTimeDelta[];
static const double ShakeTolerance;
static const int    ShakeMaxIterations;
static const double RattleTolerance;
static const int    RattleMaxIterations;
static const double EwaldAlpha;
static const double LeknerEpsilon;
static const int    EwaldKmax;
static const int    P3MEchargeAssignment;
static const int    P3MEdiffOrder;
static const double InnerTimeStepInPicoSeconds;
static const int    NumberOfInnerTimeSteps;
static const int       DoOuter;
static const double OuterTimeStepInPicoSeconds;
static int    NumberOfOuterTimeSteps;
static const int    NumberOfConstraints;
static int    SnapshotPeriodInOTS;
static const int    SimTicksPerTimeStep;
static int    EmitEnergyTimeStepModulo;
static const double    ExternalPressure;
static double    PressureControlPistonMass;
static double    PressureControlPistonInitialVelocity;
static int       VelocityResamplePeriodInOTS;
static int       VelocityResampleRandomSeed;
static double    VelocityResampleTargetTemperature;
static double    PressureControlTarget;
static const double    SwitchLowerCutoff;
static const double    SwitchDelta;
static const XYZ    P3MEinitSpacing;
static BoundingBox    BoundingBoxDef;
static const double    Lambda;

static const double TimeConversionFactorMsd;
static UdfInvocation UdfInvocationTable[];
static const int UdfInvocationTableSize;

static const int magicNumber;

static const int sourceId;

static const SiteInfo SiteInformation[];
static const int SiteInformationSize;

static const int SiteIDtoSiteTypeMap[];
static const int SiteIDtoSiteTypeMapSize;

static const UDF_Binding::NSQCoulomb_Params ChargeNsqParams[];
static const UDF_Binding::NSQLennardJones_Params LJNsqParams[];
static const int NumberOfNsqSiteTypes;

static const int NsqSiteIDtoSiteTypeMap[];
static const int NsqSiteIDtoSiteTypeMapSize;

static const int ExclusionList1_2_3_4[];
static const int ExclusionList1_2_3_4Size;

static const NsqUdfInvocation NsqInvocationTable[];
static const int NsqInvocationTableSize;

static const UDF_Binding::LennardJonesForce_Params LJ14PairTable[];
static const int LJ14PairTableSize;

static const UDF_Binding::Coulomb14_Params Charge14PairTable[];
static const int Charge14PairTableSize;

static const int Pair14SiteList[];
static const int Pair14SiteListSize;

static const IrreduciblePartitionType IrreduciblePartitionTypeList[];
static const int IrreduciblePartitionTypeListSize;

static const int IrreduciblePartitionCount;

static const IrreduciblePartitionMap IrreduciblePartitionIndexToTypeMap[];
static const int IrreduciblePartitionIndexToTypeMapSize;

inline static int GetNumberOfSimTicks();

static const int NumberOfEnergyReportingUDFs;

static const int Water3sites[];

static const int Rigid2Sites[];
static const int Rigid3Sites[];
static const int Rigid4Sites[];

static const UDF_Binding::ShakeGroup2_Params Rigid2Params[];
static const UDF_Binding::ShakeGroup3_Params Rigid3Params[];
static const UDF_Binding::ShakeGroup4_Params Rigid4Params[];

static const int ImproperDihedralForce_sitesSiteTupleList[];
static const UDF_Binding::ImproperDihedralForce_Params ImproperDihedralForce_paramsParamTupleList[];

static const int StdHarmonicAngleForce_sitesSiteTupleList[];
static const UDF_Binding::StdHarmonicAngleForce_Params StdHarmonicAngleForce_paramsParamTupleList[];

static const int StdHarmonicBondForce_sitesSiteTupleList[];
static const UDF_Binding::StdHarmonicBondForce_Params StdHarmonicBondForce_paramsParamTupleList[];

static const int SwopeTorsionForce_sitesSiteTupleList[];
static const UDF_Binding::SwopeTorsionForce_Params SwopeTorsionForce_paramsParamTupleList[];

static const int UreyBradleyForce_sitesSiteTupleList[];
static const UDF_Binding::UreyBradleyForce_Params UreyBradleyForce_paramsParamTupleList[];

};

#ifndef MSD_COMPILE_CODE_ONLY


const int MSD::Rigid2Sites[] = {
4,5,
10,11,
12,13,
15,16,
17,18,
19,20,
23,24,
30,31,
37,38,
39,40,
45,46,
47,48,
49,50,
51,52,
53,54,
57,58,
59,60};

const UDF_Binding::ShakeGroup2_Params MSD::Rigid2Params[] = {
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 0.9600}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 0.9970}} ,
{{ 0.9970}} ,
{{ 0.9970}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 1.0800}} ,
{{ 0.9970}} ,
{{ 1.0800}} };

const int MSD::Rigid3Sites[] = {
6,7,8,
25,26,27,
32,33,34,
41,42,43,
61,62,63,
64,65,66};

const UDF_Binding::ShakeGroup3_Params MSD::Rigid3Params[] = {
{{ 1.1110,1.1110}} ,
{{ 1.1110,1.1110}} ,
{{ 1.0800,1.0800}} ,
{{ 1.0800,1.0800}} ,
{{ 1.0800,1.0800}} ,
{{ 1.0800,1.0800}} };

const int MSD::Rigid4Sites[] = {
0,1,2,3,
68,69,70,71};

const UDF_Binding::ShakeGroup4_Params MSD::Rigid4Params[] = {
{{ 1.0400,1.0400,1.0400}} ,
{{ 1.0400,1.0400,1.0400}} };/*
These are the sites.
*/
const int MSD::ImproperDihedralForce_sitesSiteTupleList[] = {
21,4,23,22,
23,21,25,24,
28,25,30,29,
30,28,32,31,
35,32,37,36,
37,35,39,38,
55,39,57,56,
57,55,59,58,
72,59,74,73};
/*
The parameters are in the order of the structs above.
*/
const UDF_Binding::ImproperDihedralForce_Params MSD::ImproperDihedralForce_paramsParamTupleList[] = {
{ 120.0000 , (0.0000*Math::Deg2Rad) },
{ 20.0000 , (0.0000*Math::Deg2Rad) },
{ 120.0000 , (0.0000*Math::Deg2Rad) },
{ 20.0000 , (0.0000*Math::Deg2Rad) },
{ 120.0000 , (0.0000*Math::Deg2Rad) },
{ 20.0000 , (0.0000*Math::Deg2Rad) },
{ 120.0000 , (0.0000*Math::Deg2Rad) },
{ 20.0000 , (0.0000*Math::Deg2Rad) },
{ 96.0000 , (0.0000*Math::Deg2Rad) } };
/*
These are the sites.
*/
const int MSD::StdHarmonicAngleForce_sitesSiteTupleList[] = {
0,4,5,
0,4,6,
0,4,21,
1,0,2,
1,0,3,
1,0,4,
2,0,3,
2,0,4,
3,0,4,
4,6,7,
4,6,8,
4,6,9,
4,21,22,
4,21,23,
5,4,6,
5,4,21,
6,4,21,
6,9,10,
6,9,17,
7,6,8,
7,6,9,
8,6,9,
9,10,11,
9,10,12,
9,17,18,
9,17,19,
10,9,17,
10,12,13,
10,12,14,
11,10,12,
12,14,15,
12,14,19,
13,12,14,
14,15,16,
14,19,17,
14,19,20,
15,14,19,
17,19,20,
18,17,19,
21,23,24,
21,23,25,
22,21,23,
23,25,26,
23,25,27,
23,25,28,
24,23,25,
25,28,29,
25,28,30,
26,25,27,
26,25,28,
27,25,28,
28,30,31,
28,30,32,
29,28,30,
30,32,33,
30,32,34,
30,32,35,
31,30,32,
32,35,36,
32,35,37,
33,32,34,
33,32,35,
34,32,35,
35,37,38,
35,37,39,
36,35,37,
37,39,40,
37,39,41,
37,39,55,
38,37,39,
39,41,42,
39,41,43,
39,41,44,
39,55,56,
39,55,57,
40,39,41,
40,39,55,
41,39,55,
41,44,45,
41,44,51,
42,41,43,
42,41,44,
43,41,44,
44,45,46,
44,45,47,
44,51,52,
44,51,53,
45,44,51,
45,47,48,
45,47,49,
46,45,47,
47,49,50,
47,49,53,
48,47,49,
49,53,51,
49,53,54,
50,49,53,
51,53,54,
52,51,53,
55,57,58,
55,57,59,
56,55,57,
57,59,60,
57,59,61,
57,59,72,
58,57,59,
59,61,62,
59,61,63,
59,61,64,
59,72,73,
59,72,74,
60,59,61,
60,59,72,
61,59,72,
61,64,65,
61,64,66,
61,64,67,
62,61,63,
62,61,64,
63,61,64,
64,67,68,
65,64,66,
65,64,67,
66,64,67,
67,68,69,
67,68,70,
67,68,71,
69,68,70,
69,68,71,
70,68,71,
73,72,74};
/*
The parameters are in the order of the structs above.
*/
const UDF_Binding::StdHarmonicAngleForce_Params MSD::StdHarmonicAngleForce_paramsParamTupleList[] = {
{ 51.500 , (107.5000*Math::Deg2Rad) },
{ 67.700 , (110.0000*Math::Deg2Rad) },
{ 43.700 , (110.0000*Math::Deg2Rad) },
{ 44.000 , (109.5000*Math::Deg2Rad) },
{ 44.000 , (109.5000*Math::Deg2Rad) },
{ 30.000 , (109.50*Math::Deg2Rad) },
{ 44.000 , (109.5000*Math::Deg2Rad) },
{ 30.000 , (109.50*Math::Deg2Rad) },
{ 30.000 , (109.50*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 51.800 , (107.5000*Math::Deg2Rad) },
{ 80.000 , (121.0000*Math::Deg2Rad) },
{ 80.000 , (116.5000*Math::Deg2Rad) },
{ 35.000 , (111.0000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 52.000 , (108.0000*Math::Deg2Rad) },
{ 45.800 , (122.3000*Math::Deg2Rad) },
{ 45.800 , (122.3000*Math::Deg2Rad) },
{ 35.500 , (109.00*Math::Deg2Rad) },
{ 49.300 , (107.5000*Math::Deg2Rad) },
{ 49.300 , (107.5000*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 45.200 , (120.0000*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 65.000 , (108.0000*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 45.200 , (120.0000*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 34.000 , (123.0000*Math::Deg2Rad) },
{ 50.000 , (120.0000*Math::Deg2Rad) },
{ 80.000 , (122.5000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 50.000 , (107.0000*Math::Deg2Rad) },
{ 35.000 , (117.0000*Math::Deg2Rad) },
{ 80.000 , (121.0000*Math::Deg2Rad) },
{ 80.000 , (116.5000*Math::Deg2Rad) },
{ 36.000 , (115.0000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 34.000 , (123.0000*Math::Deg2Rad) },
{ 50.000 , (120.0000*Math::Deg2Rad) },
{ 80.000 , (122.5000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 50.000 , (107.0000*Math::Deg2Rad) },
{ 35.000 , (117.0000*Math::Deg2Rad) },
{ 80.000 , (121.0000*Math::Deg2Rad) },
{ 80.000 , (116.5000*Math::Deg2Rad) },
{ 36.000 , (115.0000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 34.000 , (123.0000*Math::Deg2Rad) },
{ 50.000 , (120.0000*Math::Deg2Rad) },
{ 80.000 , (122.5000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 70.000 , (113.5000*Math::Deg2Rad) },
{ 50.000 , (107.0000*Math::Deg2Rad) },
{ 35.000 , (117.0000*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 51.800 , (107.5000*Math::Deg2Rad) },
{ 80.000 , (121.0000*Math::Deg2Rad) },
{ 80.000 , (116.5000*Math::Deg2Rad) },
{ 35.000 , (111.0000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 52.000 , (108.0000*Math::Deg2Rad) },
{ 45.800 , (122.3000*Math::Deg2Rad) },
{ 45.800 , (122.3000*Math::Deg2Rad) },
{ 35.500 , (109.00*Math::Deg2Rad) },
{ 49.300 , (107.5000*Math::Deg2Rad) },
{ 49.300 , (107.5000*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 40.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 30.000 , (120.00*Math::Deg2Rad) },
{ 34.000 , (123.0000*Math::Deg2Rad) },
{ 50.000 , (120.0000*Math::Deg2Rad) },
{ 80.000 , (122.5000*Math::Deg2Rad) },
{ 48.000 , (108.0000*Math::Deg2Rad) },
{ 70.000 , (113.5000*Math::Deg2Rad) },
{ 50.000 , (107.0000*Math::Deg2Rad) },
{ 35.000 , (117.0000*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 33.430 , (110.10*Math::Deg2Rad) },
{ 58.350 , (113.50*Math::Deg2Rad) },
{ 40.000 , (118.00*Math::Deg2Rad) },
{ 40.000 , (118.00*Math::Deg2Rad) },
{ 35.000 , (111.0000*Math::Deg2Rad) },
{ 50.000 , (109.5000*Math::Deg2Rad) },
{ 52.000 , (108.0000*Math::Deg2Rad) },
{ 26.500 , (110.10*Math::Deg2Rad) },
{ 26.500 , (110.10*Math::Deg2Rad) },
{ 58.000 , (114.5000*Math::Deg2Rad) },
{ 35.500 , (109.00*Math::Deg2Rad) },
{ 26.500 , (110.10*Math::Deg2Rad) },
{ 26.500 , (110.10*Math::Deg2Rad) },
{ 34.000 , (95.0000*Math::Deg2Rad) },
{ 35.500 , (109.00*Math::Deg2Rad) },
{ 46.100 , (111.3000*Math::Deg2Rad) },
{ 46.100 , (111.3000*Math::Deg2Rad) },
{ 46.100 , (111.3000*Math::Deg2Rad) },
{ 46.100 , (111.3000*Math::Deg2Rad) },
{ 46.100 , (111.3000*Math::Deg2Rad) },
{ 35.500 , (108.40*Math::Deg2Rad) },
{ 35.500 , (108.40*Math::Deg2Rad) },
{ 35.500 , (108.40*Math::Deg2Rad) },
{ 100.000 , (124.00*Math::Deg2Rad) } };
/*
These are the sites.
*/
const int MSD::StdHarmonicBondForce_sitesSiteTupleList[] = {
0,4,
6,4,
9,6,
10,9,
12,10,
12,14,
14,19,
15,14,
17,9,
19,17,
21,4,
21,23,
22,21,
23,25,
28,25,
28,30,
29,28,
30,32,
35,32,
35,37,
36,35,
37,39,
41,39,
44,41,
45,44,
47,45,
49,47,
49,53,
51,44,
53,51,
55,39,
55,57,
56,55,
57,59,
61,59,
64,61,
67,64,
68,67,
72,59,
72,73,
72,74};
/*
The parameters are in the order of the structs above.
*/
const UDF_Binding::StdHarmonicBondForce_Params MSD::StdHarmonicBondForce_paramsParamTupleList[] = {
{ 200.000 , 1.4800 },
{ 222.500 , 1.5380 },
{ 230.000 , 1.4900 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 334.300 , 1.4110 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 250.000 , 1.4900 },
{ 370.000 , 1.3450 },
{ 620.000 , 1.2300 },
{ 320.000 , 1.4300 },
{ 250.000 , 1.4900 },
{ 370.000 , 1.3450 },
{ 620.000 , 1.2300 },
{ 320.000 , 1.4300 },
{ 250.000 , 1.4900 },
{ 370.000 , 1.3450 },
{ 620.000 , 1.2300 },
{ 320.000 , 1.4300 },
{ 222.500 , 1.5380 },
{ 230.000 , 1.4900 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 305.000 , 1.3750 },
{ 250.000 , 1.4900 },
{ 370.000 , 1.3450 },
{ 620.000 , 1.2300 },
{ 320.000 , 1.4300 },
{ 222.500 , 1.5380 },
{ 222.500 , 1.5300 },
{ 198.000 , 1.8180 },
{ 240.000 , 1.8160 },
{ 200.000 , 1.5220 },
{ 525.000 , 1.2600 },
{ 525.000 , 1.2600 } };
/*
These are the sites.
*/
const int MSD::SwopeTorsionForce_sitesSiteTupleList[] = {
0,4,6,7,
0,4,6,8,
0,4,6,9,
0,4,21,23,
1,0,4,5,
1,0,4,6,
1,0,4,21,
2,0,4,5,
2,0,4,6,
2,0,4,21,
3,0,4,5,
3,0,4,6,
3,0,4,21,
4,6,9,10,
4,6,9,17,
4,21,23,24,
4,21,23,25,
4,21,23,25,
5,4,6,7,
5,4,6,8,
5,4,6,9,
6,4,21,22,
6,9,10,11,
6,9,10,12,
6,9,17,18,
6,9,17,19,
7,6,4,21,
8,6,4,21,
9,6,4,21,
9,10,12,13,
9,10,12,14,
9,17,19,14,
9,17,19,20,
10,9,17,18,
10,9,17,19,
10,12,14,15,
10,12,14,19,
11,10,9,17,
11,10,12,13,
11,10,12,14,
12,10,9,17,
12,14,15,16,
12,14,19,17,
12,14,19,20,
13,12,14,15,
13,12,14,19,
14,19,17,18,
15,14,19,17,
15,14,19,20,
16,15,14,19,
18,17,19,20,
21,23,25,28,
22,21,23,24,
22,21,23,25,
23,25,28,30,
25,28,30,31,
25,28,30,32,
25,28,30,32,
28,30,32,35,
29,28,30,31,
29,28,30,32,
30,32,35,37,
32,35,37,38,
32,35,37,39,
32,35,37,39,
35,37,39,41,
35,37,39,55,
36,35,37,38,
36,35,37,39,
37,39,41,42,
37,39,41,43,
37,39,41,44,
37,39,55,57,
39,41,44,45,
39,41,44,51,
39,55,57,58,
39,55,57,59,
39,55,57,59,
40,39,41,42,
40,39,41,43,
40,39,41,44,
41,39,55,56,
41,44,45,46,
41,44,45,47,
41,44,51,52,
41,44,51,53,
42,41,39,55,
43,41,39,55,
44,41,39,55,
44,45,47,48,
44,45,47,49,
44,51,53,49,
44,51,53,54,
45,44,51,52,
45,44,51,53,
45,47,49,50,
45,47,49,53,
46,45,44,51,
46,45,47,48,
46,45,47,49,
47,45,44,51,
47,49,53,51,
47,49,53,54,
48,47,49,50,
48,47,49,53,
49,53,51,52,
50,49,53,51,
50,49,53,54,
52,51,53,54,
55,57,59,61,
55,57,59,72,
56,55,57,58,
56,55,57,59,
57,59,61,62,
57,59,61,63,
57,59,61,64,
57,59,72,73,
57,59,72,74,
59,61,64,65,
59,61,64,66,
59,61,64,67,
60,59,61,62,
60,59,61,63,
60,59,61,64,
60,59,72,73,
60,59,72,74,
61,59,72,73,
61,59,72,74,
61,64,67,68,
61,64,67,68,
62,61,59,72,
62,61,64,65,
62,61,64,66,
62,61,64,67,
63,61,59,72,
63,61,64,65,
63,61,64,66,
63,61,64,67,
64,61,59,72,
64,67,68,69,
64,67,68,70,
64,67,68,71,
65,64,67,68,
66,64,67,68};
/*
The parameters are in the order of the structs above.
*/
const UDF_Binding::SwopeTorsionForce_Params MSD::SwopeTorsionForce_paramsParamTupleList[] = {
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 1.4000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.0400 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.9900 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.9900 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.8000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 1.4000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.0400 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 1.8000 , sin(0.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 },
{ cos(180.00*Math::Deg2Rad) , 0.2400 , sin(180.00*Math::Deg2Rad) , 1 },
{ cos(0.00*Math::Deg2Rad) , 0.3700 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.0100 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.0100 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 },
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 } };
/*
These are the sites.
*/
const int MSD::UreyBradleyForce_sitesSiteTupleList[] = {
1,4,
2,4,
3,4,
4,7,
4,8,
7,8,
9,11,
9,12,
9,18,
9,19,
10,17,
10,13,
10,14,
11,12,
12,19,
13,14,
14,17,
14,20,
17,20,
18,19,
39,42,
39,43,
42,43,
44,46,
44,47,
44,52,
44,53,
45,51,
45,48,
45,49,
46,47,
47,50,
47,53,
48,49,
49,51,
49,54,
50,53,
51,54,
52,53,
59,62,
59,63,
59,64,
59,73,
59,74,
61,65,
61,66,
62,63,
62,64,
63,64,
65,66,
69,70,
69,71,
70,71,
73,74};
/*
The parameters are in the order of the structs above.
*/
const UDF_Binding::UreyBradleyForce_Params MSD::UreyBradleyForce_paramsParamTupleList[] = {
{ 20.00 , 2.07400 },
{ 20.00 , 2.07400 },
{ 20.00 , 2.07400 },
{ 22.53 , 2.17900 },
{ 22.53 , 2.17900 },
{ 5.40 , 1.80200 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 22.53 , 2.17900 },
{ 22.53 , 2.17900 },
{ 5.40 , 1.80200 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 35.00 , 2.41620 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 22.00 , 2.15250 },
{ 22.53 , 2.17900 },
{ 22.53 , 2.17900 },
{ 11.16 , 2.56100 },
{ 50.00 , 2.38800 },
{ 50.00 , 2.38800 },
{ 22.53 , 2.17900 },
{ 22.53 , 2.17900 },
{ 5.40 , 1.80200 },
{ 22.53 , 2.17900 },
{ 22.53 , 2.17900 },
{ 5.40 , 1.80200 },
{ 5.40 , 1.80200 },
{ 5.40 , 1.80200 },
{ 5.40 , 1.80200 },
{ 70.00 , 2.22500 } };
const double MSD::TimeConversionFactorMsd = TimeConversionFactor;

const double MSD::ShakeTolerance = 1.0E-6;

const double MSD::EwaldAlpha = 0.0;

double MSD::VelocityResampleTargetTemperature = 300.0;

double MSD::PressureControlPistonInitialVelocity = 0.0;

int MSD::NumberOfOuterTimeSteps = 500;

int MSD::VelocityResampleRandomSeed = 51579;

double MSD::PressureControlPistonMass = 0.0;

double MSD::PressureControlTarget = 1.0;

const double MSD::RattleTolerance = 1.0E-4;

const XYZ MSD::P3MEinitSpacing = {.5,.5,.5};

const double MSD::Lambda = 0.0;

const int MSD::P3MEdiffOrder = 2;

const double MSD::OuterTimeStepInPicoSeconds = 0.001;

int MSD::SnapshotPeriodInOTS = 10;

const int MSD::ShakeMaxIterations = 5000;

const double MSD::LeknerEpsilon = 0.0;

const int MSD::DoOuter = 1;

int MSD::EmitEnergyTimeStepModulo = 1;

int MSD::VelocityResamplePeriodInOTS = 200;

const double MSD::InnerTimeStepInPicoSeconds = -1.0;

const int MSD::EwaldKmax = 0;

const int MSD::P3MEchargeAssignment = 4;

const double MSD::ExternalPressure = 1.0;

const double MSD::SwitchLowerCutoff = 1.0E100;

BoundingBox MSD::BoundingBoxDef = { -5.1e5 , -6.7e5 , -4.3e5 , 7.0e5 , 5.2e5 , 4.4e5 };

const double MSD::SwitchDelta = 1.0;

const int MSD::RattleMaxIterations = 5000;

const int MSD::NumberOfInnerTimeSteps = -1;

const int MSD::SimTicksAtRespaLevel[] = {
1};

const int MSD::SimTicksPerTimeStep = 1;

const int MSD::RespaLevelByUDFCode[] = {
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
};
const int MSD::NumberOfRespaLevels = 1;

const int MSD::RespaLevelNonBonded = 0;

const double MSD::ConvertedInnerTimeStep = 0.0010/MSD::TimeConversionFactorMsd ;

const double MSD::IntegratorLevelConvertedTimeDelta[] = {
MSD::ConvertedInnerTimeStep * 1
};
#endif

inline int MSD::GetNumberOfSimTicks()
{
int simTicks = ( NumberOfOuterTimeSteps * 1 );
return simTicks;
}

#define MSD_GetNumberOfSimTicks_Method
#ifndef MSD_COMPILE_CODE_ONLY

/*
Indexed by site type  = { mass, halfInverseMass, charge, lj_type, lj_14_type };
*/

const SiteInfo MSD::SiteInformation[] = 
{
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.140000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.180000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.200000E-01*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.220000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.210000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.700000E-01*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.100000*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.900000E-01*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.115000*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.310000*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.330000*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.430000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.115000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.000000E+00*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.110000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.340000*ChargeConversion) },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.510000*ChargeConversion) },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.510000*ChargeConversion) },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.670000*ChargeConversion) },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.540000*ChargeConversion) },
{ 14.0070 , 1.0/(2.0 * 14.0070) , (-.470000*ChargeConversion) },
{ 14.0070 , 1.0/(2.0 * 14.0070) , (-.300000*ChargeConversion) },
{ 32.0600 , 1.0/(2.0 * 32.0600) , (-.900000E-01*ChargeConversion) },
{ 1.00800 , 1.0/(2.0 * 1.00800) , 0.4170 * ChargeConversion },
{ 15.9994 , 1.0/(2.0 * 15.9994) , -0.8340 * ChargeConversion }
};
const int MSD::SiteInformationSize = 25;


const int MSD::Pair14SiteList[] = 
{
0 , 7,
0 , 8,
0 , 9,
0 , 22,
0 , 23,
1 , 5,
1 , 6,
1 , 21,
2 , 5,
2 , 6,
2 , 21,
3 , 5,
3 , 6,
3 , 21,
4 , 10,
4 , 17,
4 , 24,
4 , 25,
5 , 7,
5 , 8,
5 , 9,
5 , 22,
5 , 23,
6 , 11,
6 , 12,
6 , 18,
6 , 19,
6 , 22,
6 , 23,
7 , 10,
7 , 17,
7 , 21,
8 , 10,
8 , 17,
8 , 21,
9 , 13,
9 , 14,
9 , 20,
9 , 21,
10 , 15,
10 , 18,
10 , 19,
11 , 13,
11 , 14,
11 , 17,
12 , 16,
12 , 17,
12 , 20,
13 , 15,
13 , 19,
14 , 18,
15 , 17,
15 , 20,
16 , 19,
18 , 20,
21 , 26,
21 , 27,
21 , 28,
22 , 24,
22 , 25,
23 , 29,
23 , 30,
24 , 26,
24 , 27,
24 , 28,
25 , 31,
25 , 32,
26 , 29,
26 , 30,
27 , 29,
27 , 30,
28 , 33,
28 , 34,
28 , 35,
29 , 31,
29 , 32,
30 , 36,
30 , 37,
31 , 33,
31 , 34,
31 , 35,
32 , 38,
32 , 39,
33 , 36,
33 , 37,
34 , 36,
34 , 37,
35 , 40,
35 , 41,
35 , 55,
36 , 38,
36 , 39,
37 , 42,
37 , 43,
37 , 44,
37 , 56,
37 , 57,
38 , 40,
38 , 41,
38 , 55,
39 , 45,
39 , 51,
39 , 58,
39 , 59,
40 , 42,
40 , 43,
40 , 44,
40 , 56,
40 , 57,
41 , 46,
41 , 47,
41 , 52,
41 , 53,
41 , 56,
41 , 57,
42 , 45,
42 , 51,
42 , 55,
43 , 45,
43 , 51,
43 , 55,
44 , 48,
44 , 49,
44 , 54,
44 , 55,
45 , 50,
45 , 52,
45 , 53,
46 , 48,
46 , 49,
46 , 51,
47 , 51,
47 , 54,
48 , 50,
48 , 53,
49 , 52,
50 , 51,
50 , 54,
52 , 54,
55 , 60,
55 , 61,
55 , 72,
56 , 58,
56 , 59,
57 , 62,
57 , 63,
57 , 64,
57 , 73,
57 , 74,
58 , 60,
58 , 61,
58 , 72,
59 , 65,
59 , 66,
59 , 67,
60 , 62,
60 , 63,
60 , 64,
60 , 73,
60 , 74,
61 , 68,
61 , 73,
61 , 74,
62 , 65,
62 , 66,
62 , 67,
62 , 72,
63 , 65,
63 , 66,
63 , 67,
63 , 72,
64 , 69,
64 , 70,
64 , 71,
64 , 72,
65 , 68,
66 , 68
};

const int MSD::Pair14SiteListSize = 177;

const UDF_Binding::Coulomb14_Params MSD::Charge14PairTable[] = 
{ 
{ (-.300000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.300000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.300000*ChargeConversion) * (.000000E+00*ChargeConversion) * charge14scale },
{ (-.300000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.300000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.100000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.100000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.100000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.330000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.210000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.210000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.210000*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (.210000*ChargeConversion) * (-.200000E-01*ChargeConversion) * charge14scale },
{ (.100000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.100000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.100000*ChargeConversion) * (.000000E+00*ChargeConversion) * charge14scale },
{ (.100000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.100000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.110000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (-.540000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.110000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.430000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.540000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.110000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.540000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.540000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.430000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (-.200000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.200000E-01*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.200000E-01*ChargeConversion) * (-.200000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (-.200000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.200000E-01*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.200000E-01*ChargeConversion) * (.700000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.700000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (.000000E+00*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (.700000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.000000E+00*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.510000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.470000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.000000E+00*ChargeConversion) * (.510000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (-.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (-.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.115000*ChargeConversion) * (.115000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.510000*ChargeConversion) * (.340000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.310000*ChargeConversion) * charge14scale },
{ (-.510000*ChargeConversion) * (.700000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.140000*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (-.470000*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (-.180000*ChargeConversion) * charge14scale },
{ (.310000*ChargeConversion) * (.340000*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.700000E-01*ChargeConversion) * (-.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.140000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.220000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (-.180000*ChargeConversion) * (-.670000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.340000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.900000E-01*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (.340000*ChargeConversion) * charge14scale },
{ (-.140000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.140000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.140000*ChargeConversion) * (.900000E-01*ChargeConversion) * charge14scale },
{ (-.140000*ChargeConversion) * (.340000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.220000*ChargeConversion) * charge14scale },
{ (.900000E-01*ChargeConversion) * (-.220000*ChargeConversion) * charge14scale }
};

const int MSD::Charge14PairTableSize = 177;

const UDF_Binding::LennardJonesForce_Params MSD::LJ14PairTable[] = 
{ 
{ +0.010000 , 2*1.900000 },
{ +0.010000 , 2*1.900000 },
{ +0.010000 , 2*1.900000 },
{ +0.010000 , 2*1.900000 },
{ +0.010000 , 2*1.900000 },
{ +0.010000 , 2*1.900000 },
{ +0.022000 , 2*1.320000 },
{ +0.022000 , 2*1.320000 },
{ +0.030000 , 2*1.358200 },
{ +0.046000 , 2*0.224500 },
{ +0.046000 , 2*0.224500 },
{ +0.046000 , 2*0.224500 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*2.000000 },
{ +0.110000 , 2*2.000000 },
{ +0.120000 , 2*1.400000 },
{ +0.120000 , 2*1.700000 },
{ +0.152100 , 2*1.770000 },
{ +0.200000 , 2*1.550000 },
{ +0.200000 , 2*1.850000 },
{ +0.450000 , 2*2.000000 },
{ 0.0 , 0.0 },
{ 0.0 , 0.0 }};

const int MSD::LJ14PairTableSize = 25;

/* 
UdfCode, size of tupleList, siteTupleListPtr, paramTupleListPtr, CombinationRule, ToCombine
*/

UdfInvocation MSD::UdfInvocationTable[] = 
{
{ 7 , 9 , (int*) ImproperDihedralForce_sitesSiteTupleList, (void*) ImproperDihedralForce_paramsParamTupleList,  MSD::NORM,  -1  },
{ 2 , 131 , (int*) StdHarmonicAngleForce_sitesSiteTupleList, (void*) StdHarmonicAngleForce_paramsParamTupleList,  MSD::NORM,  -1  },
{ 1 , 76 , (int*) StdHarmonicBondForce_sitesSiteTupleList, (void*) StdHarmonicBondForce_paramsParamTupleList,  MSD::NORM,  -1  },
{ 3 , 144 , (int*) SwopeTorsionForce_sitesSiteTupleList, (void*) SwopeTorsionForce_paramsParamTupleList,  MSD::NORM,  -1  },
{ 4 , 54 , (int*) UreyBradleyForce_sitesSiteTupleList, (void*) UreyBradleyForce_paramsParamTupleList,  MSD::NORM,  -1  },
{ 36 , 177 , (int*)Pair14SiteList , (void*)Charge14PairTable, MSD::NORM, -1 },
{ 8 , 177 , (int*)Pair14SiteList , (void*)LJ14PairTable, MSD::COMB, 32 }
};

const int MSD::UdfInvocationTableSize = 7;

const UDF_Binding::NSQCoulomb_Params MSD::ChargeNsqParams[] = 
{
{ (.210000*ChargeConversion) },
{ (.700000E-01*ChargeConversion) },
{ (.100000*ChargeConversion) },
{ (.900000E-01*ChargeConversion) },
{ (.115000*ChargeConversion) },
{ (.310000*ChargeConversion) },
{ (.330000*ChargeConversion) },
{ (.430000*ChargeConversion) },
{ (-.140000*ChargeConversion) },
{ (-.180000*ChargeConversion) },
{ (-.200000E-01*ChargeConversion) },
{ (-.115000*ChargeConversion) },
{ (.000000E+00*ChargeConversion) },
{ (.110000*ChargeConversion) },
{ (.340000*ChargeConversion) },
{ (-.220000*ChargeConversion) },
{ (.510000*ChargeConversion) },
{ (-.510000*ChargeConversion) },
{ (-.670000*ChargeConversion) },
{ (-.540000*ChargeConversion) },
{ (-.300000*ChargeConversion) },
{ (-.470000*ChargeConversion) },
{ (-.900000E-01*ChargeConversion) },
{ 0.4170 * ChargeConversion },
{ -0.8340 * ChargeConversion }
};
const int MSD::NumberOfNsqSiteTypes = 25;

const UDF_Binding::NSQLennardJones_Params MSD::LJNsqParams[] = 
{
{ +0.020000 , 2*2.275000 },
{ +0.020000 , 2*2.275000 },
{ +0.022000 , 2*1.320000 },
{ +0.022000 , 2*1.320000 },
{ +0.030000 , 2*1.358200 },
{ +0.046000 , 2*0.224500 },
{ +0.046000 , 2*0.224500 },
{ +0.046000 , 2*0.224500 },
{ +0.055000 , 2*2.175000 },
{ +0.055000 , 2*2.175000 },
{ +0.055000 , 2*2.175000 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*1.992400 },
{ +0.070000 , 2*2.000000 },
{ +0.080000 , 2*2.060000 },
{ +0.110000 , 2*2.000000 },
{ +0.120000 , 2*1.700000 },
{ +0.120000 , 2*1.700000 },
{ +0.152100 , 2*1.770000 },
{ +0.200000 , 2*1.850000 },
{ +0.200000 , 2*1.850000 },
{ +0.450000 , 2*2.000000 },
{ 0.0 , 0.0 * SciConst::SixthRootOfTwo },
{ 0.1521 , 3.1506 * SciConst::SixthRootOfTwo }
};
const int MSD::NsqSiteIDtoSiteTypeMap[] = 
{
20,
6,
6,
6,
0,
2,
9,
3,
3,
12,
11,
4,
11,
4,
13,
19,
7,
11,
4,
11,
4,
16,
17,
21,
5,
10,
3,
3,
16,
17,
21,
5,
10,
3,
3,
16,
17,
21,
5,
1,
3,
9,
3,
3,
12,
11,
4,
11,
4,
11,
4,
11,
4,
11,
4,
16,
17,
21,
5,
1,
3,
9,
3,
3,
8,
3,
3,
22,
15,
3,
3,
3,
14,
18,
18,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23
};
const int MSD::NsqSiteIDtoSiteTypeMapSize = 747;

const int MSD::ExclusionList1_2_3_4[] = 
{
0 , 1,
0 , 2,
0 , 3,
0 , 4,
0 , 5,
0 , 6,
0 , 7,
0 , 8,
0 , 9,
0 , 21,
0 , 22,
0 , 23,
1 , 2,
1 , 3,
1 , 4,
1 , 5,
1 , 6,
1 , 21,
2 , 3,
2 , 4,
2 , 5,
2 , 6,
2 , 21,
3 , 4,
3 , 5,
3 , 6,
3 , 21,
4 , 5,
4 , 6,
4 , 7,
4 , 8,
4 , 9,
4 , 10,
4 , 17,
4 , 21,
4 , 22,
4 , 23,
4 , 24,
4 , 25,
5 , 6,
5 , 7,
5 , 8,
5 , 9,
5 , 21,
5 , 22,
5 , 23,
6 , 7,
6 , 8,
6 , 9,
6 , 10,
6 , 11,
6 , 12,
6 , 17,
6 , 18,
6 , 19,
6 , 21,
6 , 22,
6 , 23,
7 , 8,
7 , 9,
7 , 10,
7 , 17,
7 , 21,
8 , 9,
8 , 10,
8 , 17,
8 , 21,
9 , 10,
9 , 11,
9 , 12,
9 , 13,
9 , 14,
9 , 17,
9 , 18,
9 , 19,
9 , 20,
9 , 21,
10 , 11,
10 , 12,
10 , 13,
10 , 14,
10 , 15,
10 , 17,
10 , 18,
10 , 19,
11 , 12,
11 , 13,
11 , 14,
11 , 17,
12 , 13,
12 , 14,
12 , 15,
12 , 16,
12 , 17,
12 , 19,
12 , 20,
13 , 14,
13 , 15,
13 , 19,
14 , 15,
14 , 16,
14 , 17,
14 , 18,
14 , 19,
14 , 20,
15 , 16,
15 , 17,
15 , 19,
15 , 20,
16 , 19,
17 , 18,
17 , 19,
17 , 20,
18 , 19,
18 , 20,
19 , 20,
21 , 22,
21 , 23,
21 , 24,
21 , 25,
21 , 26,
21 , 27,
21 , 28,
22 , 23,
22 , 24,
22 , 25,
23 , 24,
23 , 25,
23 , 26,
23 , 27,
23 , 28,
23 , 29,
23 , 30,
24 , 25,
24 , 26,
24 , 27,
24 , 28,
25 , 26,
25 , 27,
25 , 28,
25 , 29,
25 , 30,
25 , 31,
25 , 32,
26 , 27,
26 , 28,
26 , 29,
26 , 30,
27 , 28,
27 , 29,
27 , 30,
28 , 29,
28 , 30,
28 , 31,
28 , 32,
28 , 33,
28 , 34,
28 , 35,
29 , 30,
29 , 31,
29 , 32,
30 , 31,
30 , 32,
30 , 33,
30 , 34,
30 , 35,
30 , 36,
30 , 37,
31 , 32,
31 , 33,
31 , 34,
31 , 35,
32 , 33,
32 , 34,
32 , 35,
32 , 36,
32 , 37,
32 , 38,
32 , 39,
33 , 34,
33 , 35,
33 , 36,
33 , 37,
34 , 35,
34 , 36,
34 , 37,
35 , 36,
35 , 37,
35 , 38,
35 , 39,
35 , 40,
35 , 41,
35 , 55,
36 , 37,
36 , 38,
36 , 39,
37 , 38,
37 , 39,
37 , 40,
37 , 41,
37 , 42,
37 , 43,
37 , 44,
37 , 55,
37 , 56,
37 , 57,
38 , 39,
38 , 40,
38 , 41,
38 , 55,
39 , 40,
39 , 41,
39 , 42,
39 , 43,
39 , 44,
39 , 45,
39 , 51,
39 , 55,
39 , 56,
39 , 57,
39 , 58,
39 , 59,
40 , 41,
40 , 42,
40 , 43,
40 , 44,
40 , 55,
40 , 56,
40 , 57,
41 , 42,
41 , 43,
41 , 44,
41 , 45,
41 , 46,
41 , 47,
41 , 51,
41 , 52,
41 , 53,
41 , 55,
41 , 56,
41 , 57,
42 , 43,
42 , 44,
42 , 45,
42 , 51,
42 , 55,
43 , 44,
43 , 45,
43 , 51,
43 , 55,
44 , 45,
44 , 46,
44 , 47,
44 , 48,
44 , 49,
44 , 51,
44 , 52,
44 , 53,
44 , 54,
44 , 55,
45 , 46,
45 , 47,
45 , 48,
45 , 49,
45 , 50,
45 , 51,
45 , 52,
45 , 53,
46 , 47,
46 , 48,
46 , 49,
46 , 51,
47 , 48,
47 , 49,
47 , 50,
47 , 51,
47 , 53,
47 , 54,
48 , 49,
48 , 50,
48 , 53,
49 , 50,
49 , 51,
49 , 52,
49 , 53,
49 , 54,
50 , 51,
50 , 53,
50 , 54,
51 , 52,
51 , 53,
51 , 54,
52 , 53,
52 , 54,
53 , 54,
55 , 56,
55 , 57,
55 , 58,
55 , 59,
55 , 60,
55 , 61,
55 , 72,
56 , 57,
56 , 58,
56 , 59,
57 , 58,
57 , 59,
57 , 60,
57 , 61,
57 , 62,
57 , 63,
57 , 64,
57 , 72,
57 , 73,
57 , 74,
58 , 59,
58 , 60,
58 , 61,
58 , 72,
59 , 60,
59 , 61,
59 , 62,
59 , 63,
59 , 64,
59 , 65,
59 , 66,
59 , 67,
59 , 72,
59 , 73,
59 , 74,
60 , 61,
60 , 62,
60 , 63,
60 , 64,
60 , 72,
60 , 73,
60 , 74,
61 , 62,
61 , 63,
61 , 64,
61 , 65,
61 , 66,
61 , 67,
61 , 68,
61 , 72,
61 , 73,
61 , 74,
62 , 63,
62 , 64,
62 , 65,
62 , 66,
62 , 67,
62 , 72,
63 , 64,
63 , 65,
63 , 66,
63 , 67,
63 , 72,
64 , 65,
64 , 66,
64 , 67,
64 , 68,
64 , 69,
64 , 70,
64 , 71,
64 , 72,
65 , 66,
65 , 67,
65 , 68,
66 , 67,
66 , 68,
67 , 68,
67 , 69,
67 , 70,
67 , 71,
68 , 69,
68 , 70,
68 , 71,
69 , 70,
69 , 71,
70 , 71,
72 , 73,
72 , 74,
73 , 74,
75 , 76,
75 , 77,
76 , 77,
78 , 79,
78 , 80,
79 , 80,
81 , 82,
81 , 83,
82 , 83,
84 , 85,
84 , 86,
85 , 86,
87 , 88,
87 , 89,
88 , 89,
90 , 91,
90 , 92,
91 , 92,
93 , 94,
93 , 95,
94 , 95,
96 , 97,
96 , 98,
97 , 98,
99 , 100,
99 , 101,
100 , 101,
102 , 103,
102 , 104,
103 , 104,
105 , 106,
105 , 107,
106 , 107,
108 , 109,
108 , 110,
109 , 110,
111 , 112,
111 , 113,
112 , 113,
114 , 115,
114 , 116,
115 , 116,
117 , 118,
117 , 119,
118 , 119,
120 , 121,
120 , 122,
121 , 122,
123 , 124,
123 , 125,
124 , 125,
126 , 127,
126 , 128,
127 , 128,
129 , 130,
129 , 131,
130 , 131,
132 , 133,
132 , 134,
133 , 134,
135 , 136,
135 , 137,
136 , 137,
138 , 139,
138 , 140,
139 , 140,
141 , 142,
141 , 143,
142 , 143,
144 , 145,
144 , 146,
145 , 146,
147 , 148,
147 , 149,
148 , 149,
150 , 151,
150 , 152,
151 , 152,
153 , 154,
153 , 155,
154 , 155,
156 , 157,
156 , 158,
157 , 158,
159 , 160,
159 , 161,
160 , 161,
162 , 163,
162 , 164,
163 , 164,
165 , 166,
165 , 167,
166 , 167,
168 , 169,
168 , 170,
169 , 170,
171 , 172,
171 , 173,
172 , 173,
174 , 175,
174 , 176,
175 , 176,
177 , 178,
177 , 179,
178 , 179,
180 , 181,
180 , 182,
181 , 182,
183 , 184,
183 , 185,
184 , 185,
186 , 187,
186 , 188,
187 , 188,
189 , 190,
189 , 191,
190 , 191,
192 , 193,
192 , 194,
193 , 194,
195 , 196,
195 , 197,
196 , 197,
198 , 199,
198 , 200,
199 , 200,
201 , 202,
201 , 203,
202 , 203,
204 , 205,
204 , 206,
205 , 206,
207 , 208,
207 , 209,
208 , 209,
210 , 211,
210 , 212,
211 , 212,
213 , 214,
213 , 215,
214 , 215,
216 , 217,
216 , 218,
217 , 218,
219 , 220,
219 , 221,
220 , 221,
222 , 223,
222 , 224,
223 , 224,
225 , 226,
225 , 227,
226 , 227,
228 , 229,
228 , 230,
229 , 230,
231 , 232,
231 , 233,
232 , 233,
234 , 235,
234 , 236,
235 , 236,
237 , 238,
237 , 239,
238 , 239,
240 , 241,
240 , 242,
241 , 242,
243 , 244,
243 , 245,
244 , 245,
246 , 247,
246 , 248,
247 , 248,
249 , 250,
249 , 251,
250 , 251,
252 , 253,
252 , 254,
253 , 254,
255 , 256,
255 , 257,
256 , 257,
258 , 259,
258 , 260,
259 , 260,
261 , 262,
261 , 263,
262 , 263,
264 , 265,
264 , 266,
265 , 266,
267 , 268,
267 , 269,
268 , 269,
270 , 271,
270 , 272,
271 , 272,
273 , 274,
273 , 275,
274 , 275,
276 , 277,
276 , 278,
277 , 278,
279 , 280,
279 , 281,
280 , 281,
282 , 283,
282 , 284,
283 , 284,
285 , 286,
285 , 287,
286 , 287,
288 , 289,
288 , 290,
289 , 290,
291 , 292,
291 , 293,
292 , 293,
294 , 295,
294 , 296,
295 , 296,
297 , 298,
297 , 299,
298 , 299,
300 , 301,
300 , 302,
301 , 302,
303 , 304,
303 , 305,
304 , 305,
306 , 307,
306 , 308,
307 , 308,
309 , 310,
309 , 311,
310 , 311,
312 , 313,
312 , 314,
313 , 314,
315 , 316,
315 , 317,
316 , 317,
318 , 319,
318 , 320,
319 , 320,
321 , 322,
321 , 323,
322 , 323,
324 , 325,
324 , 326,
325 , 326,
327 , 328,
327 , 329,
328 , 329,
330 , 331,
330 , 332,
331 , 332,
333 , 334,
333 , 335,
334 , 335,
336 , 337,
336 , 338,
337 , 338,
339 , 340,
339 , 341,
340 , 341,
342 , 343,
342 , 344,
343 , 344,
345 , 346,
345 , 347,
346 , 347,
348 , 349,
348 , 350,
349 , 350,
351 , 352,
351 , 353,
352 , 353,
354 , 355,
354 , 356,
355 , 356,
357 , 358,
357 , 359,
358 , 359,
360 , 361,
360 , 362,
361 , 362,
363 , 364,
363 , 365,
364 , 365,
366 , 367,
366 , 368,
367 , 368,
369 , 370,
369 , 371,
370 , 371,
372 , 373,
372 , 374,
373 , 374,
375 , 376,
375 , 377,
376 , 377,
378 , 379,
378 , 380,
379 , 380,
381 , 382,
381 , 383,
382 , 383,
384 , 385,
384 , 386,
385 , 386,
387 , 388,
387 , 389,
388 , 389,
390 , 391,
390 , 392,
391 , 392,
393 , 394,
393 , 395,
394 , 395,
396 , 397,
396 , 398,
397 , 398,
399 , 400,
399 , 401,
400 , 401,
402 , 403,
402 , 404,
403 , 404,
405 , 406,
405 , 407,
406 , 407,
408 , 409,
408 , 410,
409 , 410,
411 , 412,
411 , 413,
412 , 413,
414 , 415,
414 , 416,
415 , 416,
417 , 418,
417 , 419,
418 , 419,
420 , 421,
420 , 422,
421 , 422,
423 , 424,
423 , 425,
424 , 425,
426 , 427,
426 , 428,
427 , 428,
429 , 430,
429 , 431,
430 , 431,
432 , 433,
432 , 434,
433 , 434,
435 , 436,
435 , 437,
436 , 437,
438 , 439,
438 , 440,
439 , 440,
441 , 442,
441 , 443,
442 , 443,
444 , 445,
444 , 446,
445 , 446,
447 , 448,
447 , 449,
448 , 449,
450 , 451,
450 , 452,
451 , 452,
453 , 454,
453 , 455,
454 , 455,
456 , 457,
456 , 458,
457 , 458,
459 , 460,
459 , 461,
460 , 461,
462 , 463,
462 , 464,
463 , 464,
465 , 466,
465 , 467,
466 , 467,
468 , 469,
468 , 470,
469 , 470,
471 , 472,
471 , 473,
472 , 473,
474 , 475,
474 , 476,
475 , 476,
477 , 478,
477 , 479,
478 , 479,
480 , 481,
480 , 482,
481 , 482,
483 , 484,
483 , 485,
484 , 485,
486 , 487,
486 , 488,
487 , 488,
489 , 490,
489 , 491,
490 , 491,
492 , 493,
492 , 494,
493 , 494,
495 , 496,
495 , 497,
496 , 497,
498 , 499,
498 , 500,
499 , 500,
501 , 502,
501 , 503,
502 , 503,
504 , 505,
504 , 506,
505 , 506,
507 , 508,
507 , 509,
508 , 509,
510 , 511,
510 , 512,
511 , 512,
513 , 514,
513 , 515,
514 , 515,
516 , 517,
516 , 518,
517 , 518,
519 , 520,
519 , 521,
520 , 521,
522 , 523,
522 , 524,
523 , 524,
525 , 526,
525 , 527,
526 , 527,
528 , 529,
528 , 530,
529 , 530,
531 , 532,
531 , 533,
532 , 533,
534 , 535,
534 , 536,
535 , 536,
537 , 538,
537 , 539,
538 , 539,
540 , 541,
540 , 542,
541 , 542,
543 , 544,
543 , 545,
544 , 545,
546 , 547,
546 , 548,
547 , 548,
549 , 550,
549 , 551,
550 , 551,
552 , 553,
552 , 554,
553 , 554,
555 , 556,
555 , 557,
556 , 557,
558 , 559,
558 , 560,
559 , 560,
561 , 562,
561 , 563,
562 , 563,
564 , 565,
564 , 566,
565 , 566,
567 , 568,
567 , 569,
568 , 569,
570 , 571,
570 , 572,
571 , 572,
573 , 574,
573 , 575,
574 , 575,
576 , 577,
576 , 578,
577 , 578,
579 , 580,
579 , 581,
580 , 581,
582 , 583,
582 , 584,
583 , 584,
585 , 586,
585 , 587,
586 , 587,
588 , 589,
588 , 590,
589 , 590,
591 , 592,
591 , 593,
592 , 593,
594 , 595,
594 , 596,
595 , 596,
597 , 598,
597 , 599,
598 , 599,
600 , 601,
600 , 602,
601 , 602,
603 , 604,
603 , 605,
604 , 605,
606 , 607,
606 , 608,
607 , 608,
609 , 610,
609 , 611,
610 , 611,
612 , 613,
612 , 614,
613 , 614,
615 , 616,
615 , 617,
616 , 617,
618 , 619,
618 , 620,
619 , 620,
621 , 622,
621 , 623,
622 , 623,
624 , 625,
624 , 626,
625 , 626,
627 , 628,
627 , 629,
628 , 629,
630 , 631,
630 , 632,
631 , 632,
633 , 634,
633 , 635,
634 , 635,
636 , 637,
636 , 638,
637 , 638,
639 , 640,
639 , 641,
640 , 641,
642 , 643,
642 , 644,
643 , 644,
645 , 646,
645 , 647,
646 , 647,
648 , 649,
648 , 650,
649 , 650,
651 , 652,
651 , 653,
652 , 653,
654 , 655,
654 , 656,
655 , 656,
657 , 658,
657 , 659,
658 , 659,
660 , 661,
660 , 662,
661 , 662,
663 , 664,
663 , 665,
664 , 665,
666 , 667,
666 , 668,
667 , 668,
669 , 670,
669 , 671,
670 , 671,
672 , 673,
672 , 674,
673 , 674,
675 , 676,
675 , 677,
676 , 677,
678 , 679,
678 , 680,
679 , 680,
681 , 682,
681 , 683,
682 , 683,
684 , 685,
684 , 686,
685 , 686,
687 , 688,
687 , 689,
688 , 689,
690 , 691,
690 , 692,
691 , 692,
693 , 694,
693 , 695,
694 , 695,
696 , 697,
696 , 698,
697 , 698,
699 , 700,
699 , 701,
700 , 701,
702 , 703,
702 , 704,
703 , 704,
705 , 706,
705 , 707,
706 , 707,
708 , 709,
708 , 710,
709 , 710,
711 , 712,
711 , 713,
712 , 713,
714 , 715,
714 , 716,
715 , 716,
717 , 718,
717 , 719,
718 , 719,
720 , 721,
720 , 722,
721 , 722,
723 , 724,
723 , 725,
724 , 725,
726 , 727,
726 , 728,
727 , 728,
729 , 730,
729 , 731,
730 , 731,
732 , 733,
732 , 734,
733 , 734,
735 , 736,
735 , 737,
736 , 737,
738 , 739,
738 , 740,
739 , 740,
741 , 742,
741 , 743,
742 , 743,
744 , 745,
744 , 746,
745 , 746
};
const int MSD::ExclusionList1_2_3_4Size = 1056;

const NsqUdfInvocation MSD::NsqInvocationTable[] = 
{
{ 31, -1, MSD::NSQ2, 1056, MSD::Exclusion, (SiteTuplePair *)ExclusionList1_2_3_4, (void *)ChargeNsqParams  } ,
{ 30, 32, MSD::NSQ1, 1056, MSD::Exclusion, (SiteTuplePair *)ExclusionList1_2_3_4,  (void *)LJNsqParams } 
};
const int MSD::NsqInvocationTableSize = 2;

const int MSD::SiteIDtoSiteTypeMap[] = 
{
21,
10,
10,
10,
4,
6,
1,
7,
7,
13,
12,
8,
12,
8,
14,
19,
11,
12,
8,
12,
8,
16,
17,
20,
9,
2,
7,
7,
16,
17,
20,
9,
2,
7,
7,
16,
17,
20,
9,
5,
7,
1,
7,
7,
13,
12,
8,
12,
8,
12,
8,
12,
8,
12,
8,
16,
17,
20,
9,
5,
7,
1,
7,
7,
0,
7,
7,
22,
3,
7,
7,
7,
15,
18,
18,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23,
24,
23,
23
};
const int MSD::SiteIDtoSiteTypeMapSize = 747;

// All molecules in their own fragment
const IrreduciblePartitionType MSD::IrreduciblePartitionTypeList[] = 
{
/*NONE*/ { 75 ,  MSD::OTHER, 0, 99999999.0,  (  (1*12.0110) + (3*12.0110) + (2*12.0110) + (1*12.0110) + (1*12.0110) + (2*12.0110) + (1*1.00800) + (17*1.00800) + (9*1.00800) + (4*1.00800) + (3*1.00800) + (1*1.00800) + (9*12.0110) + (2*12.0110) + (1*12.0110) + (1*12.0110) + (4*12.0110) + (4*15.9990) + (2*15.9990) + (1*15.9990) + (4*14.0070) + (1*14.0070) + (1*32.0600) )},
/*NONE*/ { 3 ,  MSD::WATER, 0, 1.1 * 0.9572,  (  (2*1.00800) + (1*15.9994) )}
};

const int MSD::IrreduciblePartitionTypeListSize = 2;

const int MSD::IrreduciblePartitionCount = 225;

// {start_site , ip_type, molecule_id, fragments_index_in_molecule} 
const IrreduciblePartitionMap MSD::IrreduciblePartitionIndexToTypeMap[] = 
{
{ 0, 0, 0, 0 },
{ 75, 1, 1, 0 },
{ 78, 1, 2, 0 },
{ 81, 1, 3, 0 },
{ 84, 1, 4, 0 },
{ 87, 1, 5, 0 },
{ 90, 1, 6, 0 },
{ 93, 1, 7, 0 },
{ 96, 1, 8, 0 },
{ 99, 1, 9, 0 },
{ 102, 1, 10, 0 },
{ 105, 1, 11, 0 },
{ 108, 1, 12, 0 },
{ 111, 1, 13, 0 },
{ 114, 1, 14, 0 },
{ 117, 1, 15, 0 },
{ 120, 1, 16, 0 },
{ 123, 1, 17, 0 },
{ 126, 1, 18, 0 },
{ 129, 1, 19, 0 },
{ 132, 1, 20, 0 },
{ 135, 1, 21, 0 },
{ 138, 1, 22, 0 },
{ 141, 1, 23, 0 },
{ 144, 1, 24, 0 },
{ 147, 1, 25, 0 },
{ 150, 1, 26, 0 },
{ 153, 1, 27, 0 },
{ 156, 1, 28, 0 },
{ 159, 1, 29, 0 },
{ 162, 1, 30, 0 },
{ 165, 1, 31, 0 },
{ 168, 1, 32, 0 },
{ 171, 1, 33, 0 },
{ 174, 1, 34, 0 },
{ 177, 1, 35, 0 },
{ 180, 1, 36, 0 },
{ 183, 1, 37, 0 },
{ 186, 1, 38, 0 },
{ 189, 1, 39, 0 },
{ 192, 1, 40, 0 },
{ 195, 1, 41, 0 },
{ 198, 1, 42, 0 },
{ 201, 1, 43, 0 },
{ 204, 1, 44, 0 },
{ 207, 1, 45, 0 },
{ 210, 1, 46, 0 },
{ 213, 1, 47, 0 },
{ 216, 1, 48, 0 },
{ 219, 1, 49, 0 },
{ 222, 1, 50, 0 },
{ 225, 1, 51, 0 },
{ 228, 1, 52, 0 },
{ 231, 1, 53, 0 },
{ 234, 1, 54, 0 },
{ 237, 1, 55, 0 },
{ 240, 1, 56, 0 },
{ 243, 1, 57, 0 },
{ 246, 1, 58, 0 },
{ 249, 1, 59, 0 },
{ 252, 1, 60, 0 },
{ 255, 1, 61, 0 },
{ 258, 1, 62, 0 },
{ 261, 1, 63, 0 },
{ 264, 1, 64, 0 },
{ 267, 1, 65, 0 },
{ 270, 1, 66, 0 },
{ 273, 1, 67, 0 },
{ 276, 1, 68, 0 },
{ 279, 1, 69, 0 },
{ 282, 1, 70, 0 },
{ 285, 1, 71, 0 },
{ 288, 1, 72, 0 },
{ 291, 1, 73, 0 },
{ 294, 1, 74, 0 },
{ 297, 1, 75, 0 },
{ 300, 1, 76, 0 },
{ 303, 1, 77, 0 },
{ 306, 1, 78, 0 },
{ 309, 1, 79, 0 },
{ 312, 1, 80, 0 },
{ 315, 1, 81, 0 },
{ 318, 1, 82, 0 },
{ 321, 1, 83, 0 },
{ 324, 1, 84, 0 },
{ 327, 1, 85, 0 },
{ 330, 1, 86, 0 },
{ 333, 1, 87, 0 },
{ 336, 1, 88, 0 },
{ 339, 1, 89, 0 },
{ 342, 1, 90, 0 },
{ 345, 1, 91, 0 },
{ 348, 1, 92, 0 },
{ 351, 1, 93, 0 },
{ 354, 1, 94, 0 },
{ 357, 1, 95, 0 },
{ 360, 1, 96, 0 },
{ 363, 1, 97, 0 },
{ 366, 1, 98, 0 },
{ 369, 1, 99, 0 },
{ 372, 1, 100, 0 },
{ 375, 1, 101, 0 },
{ 378, 1, 102, 0 },
{ 381, 1, 103, 0 },
{ 384, 1, 104, 0 },
{ 387, 1, 105, 0 },
{ 390, 1, 106, 0 },
{ 393, 1, 107, 0 },
{ 396, 1, 108, 0 },
{ 399, 1, 109, 0 },
{ 402, 1, 110, 0 },
{ 405, 1, 111, 0 },
{ 408, 1, 112, 0 },
{ 411, 1, 113, 0 },
{ 414, 1, 114, 0 },
{ 417, 1, 115, 0 },
{ 420, 1, 116, 0 },
{ 423, 1, 117, 0 },
{ 426, 1, 118, 0 },
{ 429, 1, 119, 0 },
{ 432, 1, 120, 0 },
{ 435, 1, 121, 0 },
{ 438, 1, 122, 0 },
{ 441, 1, 123, 0 },
{ 444, 1, 124, 0 },
{ 447, 1, 125, 0 },
{ 450, 1, 126, 0 },
{ 453, 1, 127, 0 },
{ 456, 1, 128, 0 },
{ 459, 1, 129, 0 },
{ 462, 1, 130, 0 },
{ 465, 1, 131, 0 },
{ 468, 1, 132, 0 },
{ 471, 1, 133, 0 },
{ 474, 1, 134, 0 },
{ 477, 1, 135, 0 },
{ 480, 1, 136, 0 },
{ 483, 1, 137, 0 },
{ 486, 1, 138, 0 },
{ 489, 1, 139, 0 },
{ 492, 1, 140, 0 },
{ 495, 1, 141, 0 },
{ 498, 1, 142, 0 },
{ 501, 1, 143, 0 },
{ 504, 1, 144, 0 },
{ 507, 1, 145, 0 },
{ 510, 1, 146, 0 },
{ 513, 1, 147, 0 },
{ 516, 1, 148, 0 },
{ 519, 1, 149, 0 },
{ 522, 1, 150, 0 },
{ 525, 1, 151, 0 },
{ 528, 1, 152, 0 },
{ 531, 1, 153, 0 },
{ 534, 1, 154, 0 },
{ 537, 1, 155, 0 },
{ 540, 1, 156, 0 },
{ 543, 1, 157, 0 },
{ 546, 1, 158, 0 },
{ 549, 1, 159, 0 },
{ 552, 1, 160, 0 },
{ 555, 1, 161, 0 },
{ 558, 1, 162, 0 },
{ 561, 1, 163, 0 },
{ 564, 1, 164, 0 },
{ 567, 1, 165, 0 },
{ 570, 1, 166, 0 },
{ 573, 1, 167, 0 },
{ 576, 1, 168, 0 },
{ 579, 1, 169, 0 },
{ 582, 1, 170, 0 },
{ 585, 1, 171, 0 },
{ 588, 1, 172, 0 },
{ 591, 1, 173, 0 },
{ 594, 1, 174, 0 },
{ 597, 1, 175, 0 },
{ 600, 1, 176, 0 },
{ 603, 1, 177, 0 },
{ 606, 1, 178, 0 },
{ 609, 1, 179, 0 },
{ 612, 1, 180, 0 },
{ 615, 1, 181, 0 },
{ 618, 1, 182, 0 },
{ 621, 1, 183, 0 },
{ 624, 1, 184, 0 },
{ 627, 1, 185, 0 },
{ 630, 1, 186, 0 },
{ 633, 1, 187, 0 },
{ 636, 1, 188, 0 },
{ 639, 1, 189, 0 },
{ 642, 1, 190, 0 },
{ 645, 1, 191, 0 },
{ 648, 1, 192, 0 },
{ 651, 1, 193, 0 },
{ 654, 1, 194, 0 },
{ 657, 1, 195, 0 },
{ 660, 1, 196, 0 },
{ 663, 1, 197, 0 },
{ 666, 1, 198, 0 },
{ 669, 1, 199, 0 },
{ 672, 1, 200, 0 },
{ 675, 1, 201, 0 },
{ 678, 1, 202, 0 },
{ 681, 1, 203, 0 },
{ 684, 1, 204, 0 },
{ 687, 1, 205, 0 },
{ 690, 1, 206, 0 },
{ 693, 1, 207, 0 },
{ 696, 1, 208, 0 },
{ 699, 1, 209, 0 },
{ 702, 1, 210, 0 },
{ 705, 1, 211, 0 },
{ 708, 1, 212, 0 },
{ 711, 1, 213, 0 },
{ 714, 1, 214, 0 },
{ 717, 1, 215, 0 },
{ 720, 1, 216, 0 },
{ 723, 1, 217, 0 },
{ 726, 1, 218, 0 },
{ 729, 1, 219, 0 },
{ 732, 1, 220, 0 },
{ 735, 1, 221, 0 },
{ 738, 1, 222, 0 },
{ 741, 1, 223, 0 },
{ 744, 1, 224, 0 }
};

const int MSD::IrreduciblePartitionIndexToTypeMapSize = 225;

const int MSD::Water3sites[] = {
76,75,77,
79,78,80,
82,81,83,
85,84,86,
88,87,89,
91,90,92,
94,93,95,
97,96,98,
100,99,101,
103,102,104,
106,105,107,
109,108,110,
112,111,113,
115,114,116,
118,117,119,
121,120,122,
124,123,125,
127,126,128,
130,129,131,
133,132,134,
136,135,137,
139,138,140,
142,141,143,
145,144,146,
148,147,149,
151,150,152,
154,153,155,
157,156,158,
160,159,161,
163,162,164,
166,165,167,
169,168,170,
172,171,173,
175,174,176,
178,177,179,
181,180,182,
184,183,185,
187,186,188,
190,189,191,
193,192,194,
196,195,197,
199,198,200,
202,201,203,
205,204,206,
208,207,209,
211,210,212,
214,213,215,
217,216,218,
220,219,221,
223,222,224,
226,225,227,
229,228,230,
232,231,233,
235,234,236,
238,237,239,
241,240,242,
244,243,245,
247,246,248,
250,249,251,
253,252,254,
256,255,257,
259,258,260,
262,261,263,
265,264,266,
268,267,269,
271,270,272,
274,273,275,
277,276,278,
280,279,281,
283,282,284,
286,285,287,
289,288,290,
292,291,293,
295,294,296,
298,297,299,
301,300,302,
304,303,305,
307,306,308,
310,309,311,
313,312,314,
316,315,317,
319,318,320,
322,321,323,
325,324,326,
328,327,329,
331,330,332,
334,333,335,
337,336,338,
340,339,341,
343,342,344,
346,345,347,
349,348,350,
352,351,353,
355,354,356,
358,357,359,
361,360,362,
364,363,365,
367,366,368,
370,369,371,
373,372,374,
376,375,377,
379,378,380,
382,381,383,
385,384,386,
388,387,389,
391,390,392,
394,393,395,
397,396,398,
400,399,401,
403,402,404,
406,405,407,
409,408,410,
412,411,413,
415,414,416,
418,417,419,
421,420,422,
424,423,425,
427,426,428,
430,429,431,
433,432,434,
436,435,437,
439,438,440,
442,441,443,
445,444,446,
448,447,449,
451,450,452,
454,453,455,
457,456,458,
460,459,461,
463,462,464,
466,465,467,
469,468,470,
472,471,473,
475,474,476,
478,477,479,
481,480,482,
484,483,485,
487,486,488,
490,489,491,
493,492,494,
496,495,497,
499,498,500,
502,501,503,
505,504,506,
508,507,509,
511,510,512,
514,513,515,
517,516,518,
520,519,521,
523,522,524,
526,525,527,
529,528,530,
532,531,533,
535,534,536,
538,537,539,
541,540,542,
544,543,545,
547,546,548,
550,549,551,
553,552,554,
556,555,557,
559,558,560,
562,561,563,
565,564,566,
568,567,569,
571,570,572,
574,573,575,
577,576,578,
580,579,581,
583,582,584,
586,585,587,
589,588,590,
592,591,593,
595,594,596,
598,597,599,
601,600,602,
604,603,605,
607,606,608,
610,609,611,
613,612,614,
616,615,617,
619,618,620,
622,621,623,
625,624,626,
628,627,629,
631,630,632,
634,633,635,
637,636,638,
640,639,641,
643,642,644,
646,645,647,
649,648,650,
652,651,653,
655,654,656,
658,657,659,
661,660,662,
664,663,665,
667,666,668,
670,669,671,
673,672,674,
676,675,677,
679,678,680,
682,681,683,
685,684,686,
688,687,689,
691,690,692,
694,693,695,
697,696,698,
700,699,701,
703,702,704,
706,705,707,
709,708,710,
712,711,713,
715,714,716,
718,717,719,
721,720,722,
724,723,725,
727,726,728,
730,729,731,
733,732,734,
736,735,737,
739,738,740,
742,741,743,
745,744,746};



const int MSD::NumberOfConstraints =710;

const int MSD::magicNumber = 0xFACEB0B4;

const int MSD::sourceId = 8218;

MSD MolecularSystemDef;

#endif // MSD_COMPILE_CODE_ONLY

// This is the common area, defines go here...
#define MSD_RTP_VelocityResampleTargetTemperature_NONCONST  
#define MSD_RTP_PressureControlPistonInitialVelocity_NONCONST  
#define MSD_RTP_VelocityResampleRandomSeed_NONCONST  
#define PAIR14_SITE_LIST_SIZE 177
#define MSD_RTP_NumberOfOuterTimeSteps_NONCONST  
#define EXCLUSION_LIST1_2_3_4 1056
#define MSD_RTP_VelocityResamplePeriodInOTS_NONCONST  
#define MSD_RTP_PressureControlTarget_NONCONST  
#define NUMBER_OF_RESPA_LEVELS 1
#define NUMBER_OF_FRAGMENTS 225
#define MSD_RTP_SnapshotPeriodInOTS_NONCONST  
#define NUMBER_OF_NSQ_SITE_TYPES 25
#define MSD_RTP_BoundingBoxDef_NONCONST  
#define MSD_RTP_PressureControlPistonMass_NONCONST  
#define NUMBER_OF_SITES 747
#define MSD_RTP_EmitEnergyTimeStepModulo_NONCONST  
#ifndef MSD_COMPILE_DATA_ONLY

extern MSD MolecularSystemDef;

/****************************************************************************
 *  Payload logic 
 * 
 * The confusion is due to our commitment to support both phase 1 and phase 2 
 ****************************************************************************/ 
#include <math.h>
#define EXPECTED_PAYLOAD_SUM ( 0xffffffff >> 1 ) // max unsigned int divided by 2 
#define UDF_PAYLOAD          ( rint( EXPECTED_PAYLOAD_SUM / Platform::Topology::GetAddressSpaceCount() ) )
#define EmitEnergyDistributed( TimeStep, UdfCode, Energy ) \ 
  ED_Emit_UDFd1( TimeStep, UdfCode, UDF_PAYLOAD,  Energy) 
#define EmitEnergyUni(TimeStep, UdfCode, Energy)    ED_Emit_UDFd1( TimeStep, UdfCode, 1u,  Energy)
#ifdef PK_MPI_ALL
// If we're in phase 2 then all the energy emits are distributed.
// If we're in phase 1 then only some are distributed. So hence the UniContext distinction.
#ifdef PK_MPI_PHASE2
#define EmitEnergy(TimeStep, UdfCode, Energy, UniContext) EmitEnergyDistributed( TimeStep, UdfCode, Energy )
#else
#define EmitEnergy(TimeStep, UdfCode, Energy, UniContext) \ 
{ \ 
if( UniContext == 1 ) \ 
  EmitEnergyUni( TimeStep, UdfCode, Energy ) \ 
else \ 
  EmitEnergyDistributed( TimeStep, UdfCode, Energy ) \ 
} 
#endif 
#else
#define EmitEnergy(TimeStep, UdfCode, Energy, UniContext) EmitEnergyUni( TimeStep, UdfCode, Energy )
#endif
/**********************************************************************/
#include <BlueMatter/UDF_BindingWrapper.hpp>

#include <BlueMatter/DynamicVariableManager.hpp>

typedef TDynamicVariableManager< NUMBER_OF_SITES,
                                 NUMBER_OF_FRAGMENTS,
                                 NUMBER_OF_RESPA_LEVELS
                               > DynamicVariableManager;
DynamicVariableManager DynVarMgrIF;

#include <BlueMatter/MDVM_IF.hpp>

#include <BlueMatter/LocalTupleListDriver.hpp>

#include <BlueMatter/LocalFragmentDirectDriver.hpp>

// This file is meant to contain code that modifys how the
// msd.hpp file information is seen by the core.

#include <BlueMatter/TupleDriverUdfBinder.hpp>



class ParamAccessor_Base
  {
  public:
    static void Init(){}
  };

template< int UdfInvocationInstance >
class ParamAccessor{};

class ImproperDihedralForceAccessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ImproperDihedralForce_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::ImproperDihedralForce_paramsParamTupleList[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_ImproperDihedralForce,
                9,
                MSD::ImproperDihedralForce_sitesSiteTupleList,
                ImproperDihedralForceAccessor > ImproperDihedralForceUDF_Bound;

class StdHarmonicAngleForceAccessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::StdHarmonicAngleForce_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::StdHarmonicAngleForce_paramsParamTupleList[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_StdHarmonicAngleForce,
                131,
                MSD::StdHarmonicAngleForce_sitesSiteTupleList,
                StdHarmonicAngleForceAccessor > StdHarmonicAngleForceUDF_Bound;

class StdHarmonicBondForceAccessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::StdHarmonicBondForce_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::StdHarmonicBondForce_paramsParamTupleList[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_StdHarmonicBondForce,
                76,
                MSD::StdHarmonicBondForce_sitesSiteTupleList,
                StdHarmonicBondForceAccessor > StdHarmonicBondForceUDF_Bound;

class SwopeTorsionForceAccessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::SwopeTorsionForce_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::SwopeTorsionForce_paramsParamTupleList[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_SwopeTorsionForce,
                144,
                MSD::SwopeTorsionForce_sitesSiteTupleList,
                SwopeTorsionForceAccessor > SwopeTorsionForceUDF_Bound;

class UreyBradleyForceAccessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::UreyBradleyForce_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::UreyBradleyForce_paramsParamTupleList[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_UreyBradleyForce,
                54,
                MSD::UreyBradleyForce_sitesSiteTupleList,
                UreyBradleyForceAccessor > UreyBradleyForceUDF_Bound;

class Coulomb14Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::Coulomb14_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Charge14PairTable[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_Coulomb14,
                177,
                MSD::Pair14SiteList,
                Coulomb14Accessor > Coulomb14UDF_Bound;

template<class Combiner>
class LennardJones14ParamAccessor   : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::LennardJonesForce_Params ParamType;

//    static ParamType* combinedParameterArray;

    static
    void
    Init()
    {
      int numberOfSiteTuples =  PAIR14_SITE_LIST_SIZE;
      int paramSize          = sizeof(ParamType);

      ParamType* combinedParameterArray = NULL;
      GetParam( -1, &combinedParameterArray );

      for (int i = 0; i < numberOfSiteTuples; i++)
        {

          int site1 = MSD::Pair14SiteList[ 2*i ];
          int site2 = MSD::Pair14SiteList[ 2*i + 1 ];

          int siteType1 = MSD::SiteIDtoSiteTypeMap[ site1 ];
          int siteType2 = MSD::SiteIDtoSiteTypeMap[ site2 ];
          Combiner::Combine<ParamType>( MSD::LJ14PairTable[ siteType1 ],  MSD::LJ14PairTable[ siteType2 ], combinedParameterArray[ i ] );
        }
    }

    static
    ParamType
    GetParam( int i , ParamType **SecretParameterArrayReturnField = (ParamType **) 0xFFFFFFFF )
      {
      static ParamType CombinedParameterArray[ PAIR14_SITE_LIST_SIZE ];
      if( SecretParameterArrayReturnField != (ParamType **)0xFFFFFFFF )
        {
        *SecretParameterArrayReturnField = CombinedParameterArray;
        return( CombinedParameterArray[ 0 ] );
        }
      return( CombinedParameterArray[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_LennardJones14Force,
                PAIR14_SITE_LIST_SIZE,
                MSD::Pair14SiteList,
                LennardJones14ParamAccessor<LennardJones14CHARMMCombiner > > LennardJones14UDF_Bound;




///----------------------------------------------------------------

// This is needed for EwaldCorrection and LeknerCorrection
template<class Combiner>
class Coulomb1_2_3_4ParamAccessor   : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::NSQCoulomb_Params ParamType;

//    static ParamType* combinedParameterArray;

    static
    void
    Init()
    {
      int numberOfSiteTuples =  EXCLUSION_LIST1_2_3_4;
      int paramSize          = sizeof(ParamType);

      ParamType* combinedParameterArray = NULL;
      GetParam( -1, &combinedParameterArray );

      for (int i = 0; i < numberOfSiteTuples; i++)
        {
          int site1 = MSD::ExclusionList1_2_3_4[ 2*i ];
          int site2 = MSD::ExclusionList1_2_3_4[ 2*i + 1 ];

          int siteType1 = MSD::SiteIDtoSiteTypeMap[ site1 ];
          int siteType2 = MSD::SiteIDtoSiteTypeMap[ site2 ];
          
          ParamType charge1;
          ParamType charge2;
          charge1.ChargeAxB = MSD::SiteInformation[ siteType1 ].charge;
          charge2.ChargeAxB = MSD::SiteInformation[ siteType2 ].charge;
          
          Combiner::Combine<ParamType>( charge1 ,  
                                        charge2, 
                                        combinedParameterArray[ i ] );
        }
    }

    static
    ParamType
    GetParam( int i , ParamType **SecretParameterArrayReturnField = (ParamType **) 0xFFFFFFFF )
      {
      static ParamType CombinedParameterArray[ EXCLUSION_LIST1_2_3_4 ];
      if( SecretParameterArrayReturnField != (ParamType **)0xFFFFFFFF )
        {
        *SecretParameterArrayReturnField = CombinedParameterArray;
        return( CombinedParameterArray[ 0 ] );
        }
      return( CombinedParameterArray[ i ] );
      }
  };




class  NSQCoulombParamsAccessor  : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::NSQCoulomb_Params ParamType;

    static
    ParamType
    GetParam( int aAbsSiteId )
      {
      // contain the map to compressed parameter table in this method
      int ParamSiteType =  MSD::NsqSiteIDtoSiteTypeMap[ aAbsSiteId ];
      // could assert array bounds here - even compile time assert!
      return( MSD::ChargeNsqParams[ ParamSiteType ] );
      }
  };



///----------------------------------------------------------------

class NSQLennardJonesParamAccessor  : public ParamAccessor_Base
  {
  public:

    typedef  UDF_Binding::NSQLennardJones_Params ParamType;

    static
    ParamType
    GetParamByIndex( int aIndex )
    {
    return(  MSD::LJNsqParams[ aIndex ] );
    }


    static
    ParamType
    GetParam( int aAbsSiteId )
      {
      int ParamSiteType =  MSD::NsqSiteIDtoSiteTypeMap[ aAbsSiteId ];
      return(  MSD::LJNsqParams[ ParamSiteType ] );
      }
  };


#include <BlueMatter/IFP_Binder.hpp>
typedef IFP_Binder<UDF_NSQCHARMMLennardJonesForce,  NSQLennardJonesParamAccessor> UDF_LennardJonesForce_Bound;

typedef IFP_Binder<UDF_NSQCoulomb,  NSQCoulombParamsAccessor> UDF_NSQCoulomb_Bound;

typedef UdfGroup
        < UDF_NSQCoulomb_Bound,
          UDF_LennardJonesForce_Bound
        > NsqUdfGroup;

  typedef LocalFragmentDirectDriver
          < UDF_UpdateVelocity,
            UDF_ZeroForce
          > MSD_TYPED_LFD_UpdateVelocityFirstHalfStepDriver; // This name is expected by code in main loop
  typedef LocalFragmentDirectDriver
          < UDF_UpdateVelocity
          > MSD_TYPED_LFD_UpdateVelocitySecondHalfStepDriver; // This name is expected by code in main loop

typedef LocalFragmentDirectDriver
        < UDF_KineticEnergy
        > MSD_TYPED_LFD_UpdateKineticEnergyDriver;  // This name is expected in the main loop

typedef LocalFragmentDirectDriver
        < UDF_UpdateCenterOfMass
        > MSD_TYPED_LFD_UpdateCenterOfMassDriver;  // This name is expected in the main loop

typedef LocalFragmentDirectDriver
        < UDF_UpdateCenterOfMass,
          UDF_UpdateCenterOfMassKineticEnergy 
        > MSD_TYPED_LFD_UpdateCenterOfMassAndFragmentKineticEnergyDriver;  // This name is expected in the main loop

typedef LocalFragmentDirectDriver
        < UDF_UpdateCenterOfMassKineticEnergy
        > MSD_TYPED_LFD_UpdateFragmentKineticEnergyDriver;  // This name is expected in the main loop

  typedef LocalFragmentDirectDriver
          < UDF_UpdatePosition
          > MSD_TYPED_LFD_UpdatePositionDriver;  // This name is expected in the main loop

typedef SiteTupleDriver
        <  MDVM ,
           ImproperDihedralForceUDF_Bound,
           StdHarmonicAngleForceUDF_Bound,
           StdHarmonicBondForceUDF_Bound,
           SwopeTorsionForceUDF_Bound,
           UreyBradleyForceUDF_Bound,
           Coulomb14UDF_Bound,
           LennardJones14UDF_Bound
        > MSD_TYPED_STD_BondedForceDriver;  // This name is expected by code in main loop
typedef TupleDriverUdfBinder <UDF_WaterTIP3PInit,
                              224,
                              MSD::Water3sites,
                              NULL_ParamAccessor > WaterInitUDF_Bound;

typedef TupleDriverUdfBinder <UDF_WaterTIP3PShake,
                              224,
                              MSD::Water3sites,
                              NULL_ParamAccessor > WaterShakeUDF_Bound;

typedef TupleDriverUdfBinder <UDF_WaterTIP3PRattle,
                              224,
                              MSD::Water3sites,
                              NULL_ParamAccessor > WaterRattleUDF_Bound;


class RigidShake2Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup2_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid2Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_ShakeGroup2,
                              17,
                              MSD::Rigid2Sites,
                              RigidShake2Accessor > RigidShake2UDF_Bound;


class RigidShake3Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup3_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid3Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_ShakeGroup3,
                              6,
                              MSD::Rigid3Sites,
                              RigidShake3Accessor > RigidShake3UDF_Bound;


class RigidShake4Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup4_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid4Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_ShakeGroup4,
                              2,
                              MSD::Rigid4Sites,
                              RigidShake4Accessor > RigidShake4UDF_Bound;


class RigidRattle2Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup2_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid2Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_RattleGroup2,
                              17,
                              MSD::Rigid2Sites,
                              RigidRattle2Accessor > RigidRattle2UDF_Bound;


class RigidRattle3Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup3_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid3Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_RattleGroup3,
                              6,
                              MSD::Rigid3Sites,
                              RigidRattle3Accessor > RigidRattle3UDF_Bound;


class RigidRattle4Accessor : public ParamAccessor_Base
  {
  public:

    typedef UDF_Binding::ShakeGroup4_Params ParamType;

    static
    ParamType
    GetParam( int i )
      {
      return( MSD::Rigid4Params[ i ] );
      }
  };

typedef TupleDriverUdfBinder< UDF_RattleGroup4,
                              2,
                              MSD::Rigid4Sites,
                              RigidRattle4Accessor > RigidRattle4UDF_Bound;

#include <BlueMatter/MDVM_UVP_IF.hpp>

typedef SiteTupleDriver
        <  MDVM_UVP
,        WaterInitUDF_Bound
        > MSD_TYPED_STD_GroupInitDriver;  // This name is expected by code in main loop

typedef SiteTupleDriver
        <  MDVM_UVP
,        WaterShakeUDF_Bound
,        RigidShake2UDF_Bound
,        RigidShake3UDF_Bound
,        RigidShake4UDF_Bound
        > MSD_TYPED_STD_GroupShakeDriver;  // This name is expected by code in main loop

typedef SiteTupleDriver
        <  MDVM_UVP
,        WaterRattleUDF_Bound
,        RigidRattle2UDF_Bound
,        RigidRattle3UDF_Bound
,        RigidRattle4UDF_Bound
        > MSD_TYPED_STD_GroupRattleDriver;  // This name is expected by code in main loop

#endif

#ifndef MSD_COMPILE_CODE_ONLY

const int MSD::NumberOfEnergyReportingUDFs = 10;

#endif

#ifndef MSD_COMPILE_DATA_ONLY



#include <BlueMatter/p2.hpp>

#endif
#endif
