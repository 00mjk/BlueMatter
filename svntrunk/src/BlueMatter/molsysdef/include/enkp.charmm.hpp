/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #ifndef __MSD_HPP__
#define __MSD_HPP__
#define charge14  1
#define charge14scale  1.0
#define lj14  1
#define lj14scale  1.0
#define ChargeConversion  SciConst::StdChargeConversion
#define TimeConversionFactor  SciConst::StdTimeConversion


class MSD
{
public:

enum { NSQ0 = 0, NSQ1 = 1, NSQ2 = 2};
enum { Exclusion = 0, Inclusion = 1};
enum { NON_WATER = 0, WATER = 1};

static const int    LongRangeForceMethod;
static const int    SimTicksAtRespaLevel[];
static const int    RespaLevelByUDFCode[];
static const int    NumberOfRespaLevels;
static const int    RespaLevelNonBonded;
static const int    DoShakeRattle;
static const double ShakeTolerance;
static const int    NumberOfShakeIterations;
static const double RattleTolerance;
static const int    NumberOfRattleIterations;
static const double EwaldAlpha;
static const int    EwaldKmax;
static const int    P3MEchargeAssignment;
static const int    P3MEdiffOrder;
static const double InnerTimeStepInPicoSeconds;
static const int    NumberOfInnerTimeSteps;
static const int       DoOuter;
static const double OuterTimeStepInPicoSeconds;
static const int    NumberOfOuterTimeSteps;
static const int    NumberOfCOMConstraints;
static const int    SnapshotPeriodInOTS;
static const int       DoPressureControl;
static const double    PressureControlPistonMass;
static const double    PressureControlTarget;
static const double    PressureControlPistonInitialVelocity;
static const int       DoNVT;
static const int       VelocityResamplePeriodInOTS;
static const double    VelocityResampleTargetTemperature;
static const double    SwitchLowerCutoff;
static const double    SwitchDelta;
static const XYZ    P3MEinitSpacing;
static const BoundingBox    BoundingBoxDef;
static const int       DoFreeEnergy;
static const double    Lambda;

static const double TimeConversionFactorMsd;
static const UdfInvocation UdfInvocationTable[];
static const int UdfInvocationTableSize;

static const SiteInfo SiteInformation[];
static const int SiteInformationSize;

static const int SiteIDtoSiteTypeMap[];
static const int SiteIDtoSiteTypeMapSize;

static const UDF_Binding::NSQCoulomb_Params ChargeNsqParams[];
static const UDF_Binding::NSQLennardJones_Params LJNsqParams[];
static const int NumberOfNsqSiteTypes;

static const int NsqSiteIDtoSiteTypeMap[];
static const int NsqSiteIDtoSiteTypeMapSize;

static const SiteTuplePair ExclusionList1_2_3_4[];
static const int ExclusionList1_2_3_4Size;

static const NsqUdfInvocation NsqInvocationTable[];
static const int NsqInvocationTableSize;

static const UDF_Binding::LennardJonesForce_Params LJ14PairTable[];
static const int LJ14PairTableSize;

static const UDF_Binding::StdChargeForce_Params Charge14PairTable[];
static const int Charge14PairTableSize;

static const int Pair14SiteList[];
static const int Pair14SiteListSize;

static const Partition PartitionList[];
static const int PartitionListSize;

static const int PartitionCount;

static int ImproperDihedralForce_sitesSiteTupleList[];
static UDF_Binding::ImproperDihedralForce_Params ImproperDihedralForce_paramsParamTupleList[];

static int StdHarmonicAngleForce_sitesSiteTupleList[];
static UDF_Binding::StdHarmonicAngleForce_Params StdHarmonicAngleForce_paramsParamTupleList[];

static int StdHarmonicBondForce_sitesSiteTupleList[];
static UDF_Binding::StdHarmonicBondForce_Params StdHarmonicBondForce_paramsParamTupleList[];

static int SwopeTorsionForce_sitesSiteTupleList[];
static UDF_Binding::SwopeTorsionForce_Params SwopeTorsionForce_paramsParamTupleList[];

static int UreyBradleyForce_sitesSiteTupleList[];
static UDF_Binding::UreyBradleyForce_Params UreyBradleyForce_paramsParamTupleList[];

};

/*
The parameters are in the order of the structs above.
*/
UDF_Binding::ImproperDihedralForce_Params MSD::ImproperDihedralForce_paramsParamTupleList[] = {
{ 120.0000 , (0.0000*Math::Deg2Rad) }, 
{ 20.0000 , (0.0000*Math::Deg2Rad) }, 
{ 120.0000 , (0.0000*Math::Deg2Rad) }, 
{ 20.0000 , (0.0000*Math::Deg2Rad) }, 
{ 120.0000 , (0.0000*Math::Deg2Rad) }, 
{ 20.0000 , (0.0000*Math::Deg2Rad) }, 
{ 120.0000 , (0.0000*Math::Deg2Rad) }, 
{ 20.0000 , (0.0000*Math::Deg2Rad) }, 
{ 96.0000 , (0.0000*Math::Deg2Rad) } 
 };
/*
These are the sites.
*/
int MSD::ImproperDihedralForce_sitesSiteTupleList[] = {
21,4,23,22 ,
23,21,25,24 ,
28,25,30,29 ,
30,28,32,31 ,
35,32,37,36 ,
37,35,39,38 ,
55,39,57,56 ,
57,55,59,58 ,
72,59,74,73
};
/*
The parameters are in the order of the structs above.
*/
UDF_Binding::StdHarmonicAngleForce_Params MSD::StdHarmonicAngleForce_paramsParamTupleList[] = {
{ 44.000 , (109.5000*Math::Deg2Rad) }, 
{ 44.000 , (109.5000*Math::Deg2Rad) }, 
{ 30.000 , (109.50*Math::Deg2Rad) }, 
{ 44.000 , (109.5000*Math::Deg2Rad) }, 
{ 30.000 , (109.50*Math::Deg2Rad) }, 
{ 30.000 , (109.50*Math::Deg2Rad) }, 
{ 51.500 , (107.5000*Math::Deg2Rad) }, 
{ 67.700 , (110.0000*Math::Deg2Rad) }, 
{ 43.700 , (110.0000*Math::Deg2Rad) }, 
{ 35.000 , (111.0000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 52.000 , (108.0000*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 51.800 , (107.5000*Math::Deg2Rad) }, 
{ 35.500 , (109.00*Math::Deg2Rad) }, 
{ 49.300 , (107.5000*Math::Deg2Rad) }, 
{ 49.300 , (107.5000*Math::Deg2Rad) }, 
{ 45.800 , (122.3000*Math::Deg2Rad) }, 
{ 45.800 , (122.3000*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 45.200 , (120.0000*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 45.200 , (120.0000*Math::Deg2Rad) }, 
{ 65.000 , (108.0000*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 80.000 , (121.0000*Math::Deg2Rad) }, 
{ 80.000 , (116.5000*Math::Deg2Rad) }, 
{ 80.000 , (122.5000*Math::Deg2Rad) }, 
{ 34.000 , (123.0000*Math::Deg2Rad) }, 
{ 50.000 , (120.0000*Math::Deg2Rad) }, 
{ 35.000 , (117.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 50.000 , (107.0000*Math::Deg2Rad) }, 
{ 36.000 , (115.0000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 80.000 , (121.0000*Math::Deg2Rad) }, 
{ 80.000 , (116.5000*Math::Deg2Rad) }, 
{ 80.000 , (122.5000*Math::Deg2Rad) }, 
{ 34.000 , (123.0000*Math::Deg2Rad) }, 
{ 50.000 , (120.0000*Math::Deg2Rad) }, 
{ 35.000 , (117.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 50.000 , (107.0000*Math::Deg2Rad) }, 
{ 36.000 , (115.0000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 80.000 , (121.0000*Math::Deg2Rad) }, 
{ 80.000 , (116.5000*Math::Deg2Rad) }, 
{ 80.000 , (122.5000*Math::Deg2Rad) }, 
{ 34.000 , (123.0000*Math::Deg2Rad) }, 
{ 50.000 , (120.0000*Math::Deg2Rad) }, 
{ 35.000 , (117.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 70.000 , (113.5000*Math::Deg2Rad) }, 
{ 50.000 , (107.0000*Math::Deg2Rad) }, 
{ 35.000 , (111.0000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 52.000 , (108.0000*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 51.800 , (107.5000*Math::Deg2Rad) }, 
{ 35.500 , (109.00*Math::Deg2Rad) }, 
{ 49.300 , (107.5000*Math::Deg2Rad) }, 
{ 49.300 , (107.5000*Math::Deg2Rad) }, 
{ 45.800 , (122.3000*Math::Deg2Rad) }, 
{ 45.800 , (122.3000*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 40.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 30.000 , (120.00*Math::Deg2Rad) }, 
{ 80.000 , (121.0000*Math::Deg2Rad) }, 
{ 80.000 , (116.5000*Math::Deg2Rad) }, 
{ 80.000 , (122.5000*Math::Deg2Rad) }, 
{ 34.000 , (123.0000*Math::Deg2Rad) }, 
{ 50.000 , (120.0000*Math::Deg2Rad) }, 
{ 35.000 , (117.0000*Math::Deg2Rad) }, 
{ 48.000 , (108.0000*Math::Deg2Rad) }, 
{ 70.000 , (113.5000*Math::Deg2Rad) }, 
{ 50.000 , (107.0000*Math::Deg2Rad) }, 
{ 35.000 , (111.0000*Math::Deg2Rad) }, 
{ 50.000 , (109.5000*Math::Deg2Rad) }, 
{ 52.000 , (108.0000*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 33.430 , (110.10*Math::Deg2Rad) }, 
{ 58.350 , (113.50*Math::Deg2Rad) }, 
{ 35.500 , (109.00*Math::Deg2Rad) }, 
{ 26.500 , (110.10*Math::Deg2Rad) }, 
{ 26.500 , (110.10*Math::Deg2Rad) }, 
{ 26.500 , (110.10*Math::Deg2Rad) }, 
{ 26.500 , (110.10*Math::Deg2Rad) }, 
{ 58.000 , (114.5000*Math::Deg2Rad) }, 
{ 35.500 , (109.00*Math::Deg2Rad) }, 
{ 46.100 , (111.3000*Math::Deg2Rad) }, 
{ 46.100 , (111.3000*Math::Deg2Rad) }, 
{ 34.000 , (95.0000*Math::Deg2Rad) }, 
{ 46.100 , (111.3000*Math::Deg2Rad) }, 
{ 46.100 , (111.3000*Math::Deg2Rad) }, 
{ 46.100 , (111.3000*Math::Deg2Rad) }, 
{ 35.500 , (108.40*Math::Deg2Rad) }, 
{ 35.500 , (108.40*Math::Deg2Rad) }, 
{ 35.500 , (108.40*Math::Deg2Rad) }, 
{ 40.000 , (118.00*Math::Deg2Rad) }, 
{ 40.000 , (118.00*Math::Deg2Rad) }, 
{ 100.000 , (124.00*Math::Deg2Rad) } 
 };
/*
These are the sites.
*/
int MSD::StdHarmonicAngleForce_sitesSiteTupleList[] = {
1,0,2 ,
1,0,3 ,
1,0,4 ,
2,0,3 ,
2,0,4 ,
3,0,4 ,
0,4,5 ,
0,4,6 ,
0,4,21 ,
5,4,6 ,
5,4,21 ,
6,4,21 ,
4,6,7 ,
4,6,8 ,
4,6,9 ,
7,6,8 ,
7,6,9 ,
8,6,9 ,
6,9,10 ,
6,9,17 ,
10,9,17 ,
9,10,11 ,
9,10,12 ,
11,10,12 ,
10,12,13 ,
10,12,14 ,
13,12,14 ,
12,14,15 ,
12,14,19 ,
15,14,19 ,
14,15,16 ,
9,17,18 ,
9,17,19 ,
18,17,19 ,
14,19,17 ,
14,19,20 ,
17,19,20 ,
4,21,22 ,
4,21,23 ,
22,21,23 ,
21,23,24 ,
21,23,25 ,
24,23,25 ,
23,25,26 ,
23,25,27 ,
23,25,28 ,
26,25,27 ,
26,25,28 ,
27,25,28 ,
25,28,29 ,
25,28,30 ,
29,28,30 ,
28,30,31 ,
28,30,32 ,
31,30,32 ,
30,32,33 ,
30,32,34 ,
30,32,35 ,
33,32,34 ,
33,32,35 ,
34,32,35 ,
32,35,36 ,
32,35,37 ,
36,35,37 ,
35,37,38 ,
35,37,39 ,
38,37,39 ,
37,39,40 ,
37,39,41 ,
37,39,55 ,
40,39,41 ,
40,39,55 ,
41,39,55 ,
39,41,42 ,
39,41,43 ,
39,41,44 ,
42,41,43 ,
42,41,44 ,
43,41,44 ,
41,44,45 ,
41,44,51 ,
45,44,51 ,
44,45,46 ,
44,45,47 ,
46,45,47 ,
45,47,48 ,
45,47,49 ,
48,47,49 ,
47,49,50 ,
47,49,53 ,
50,49,53 ,
44,51,52 ,
44,51,53 ,
52,51,53 ,
49,53,51 ,
49,53,54 ,
51,53,54 ,
39,55,56 ,
39,55,57 ,
56,55,57 ,
55,57,58 ,
55,57,59 ,
58,57,59 ,
57,59,60 ,
57,59,61 ,
57,59,72 ,
60,59,61 ,
60,59,72 ,
61,59,72 ,
59,61,62 ,
59,61,63 ,
59,61,64 ,
62,61,63 ,
62,61,64 ,
63,61,64 ,
61,64,65 ,
61,64,66 ,
61,64,67 ,
65,64,66 ,
65,64,67 ,
66,64,67 ,
64,67,68 ,
67,68,69 ,
67,68,70 ,
67,68,71 ,
69,68,70 ,
69,68,71 ,
70,68,71 ,
59,72,73 ,
59,72,74 ,
73,72,74
};
/*
The parameters are in the order of the structs above.
*/
UDF_Binding::StdHarmonicBondForce_Params MSD::StdHarmonicBondForce_paramsParamTupleList[] = {
{ 403.000 , 1.0400 }, 
{ 403.000 , 1.0400 }, 
{ 403.000 , 1.0400 }, 
{ 222.500 , 1.5380 }, 
{ 230.000 , 1.4900 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 334.300 , 1.4110 }, 
{ 200.000 , 1.4800 }, 
{ 250.000 , 1.4900 }, 
{ 370.000 , 1.3450 }, 
{ 330.000 , 1.0800 }, 
{ 309.000 , 1.1110 }, 
{ 309.000 , 1.1110 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 545.000 , 0.9600 }, 
{ 620.000 , 1.2300 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 440.000 , 0.9970 }, 
{ 320.000 , 1.4300 }, 
{ 250.000 , 1.4900 }, 
{ 370.000 , 1.3450 }, 
{ 330.000 , 1.0800 }, 
{ 330.000 , 1.0800 }, 
{ 620.000 , 1.2300 }, 
{ 440.000 , 0.9970 }, 
{ 320.000 , 1.4300 }, 
{ 250.000 , 1.4900 }, 
{ 370.000 , 1.3450 }, 
{ 330.000 , 1.0800 }, 
{ 330.000 , 1.0800 }, 
{ 620.000 , 1.2300 }, 
{ 222.500 , 1.5380 }, 
{ 230.000 , 1.4900 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 440.000 , 0.9970 }, 
{ 320.000 , 1.4300 }, 
{ 250.000 , 1.4900 }, 
{ 370.000 , 1.3450 }, 
{ 330.000 , 1.0800 }, 
{ 309.000 , 1.1110 }, 
{ 309.000 , 1.1110 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 620.000 , 1.2300 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 305.000 , 1.3750 }, 
{ 340.000 , 1.0800 }, 
{ 340.000 , 1.0800 }, 
{ 222.500 , 1.5380 }, 
{ 222.500 , 1.5300 }, 
{ 198.000 , 1.8180 }, 
{ 240.000 , 1.8160 }, 
{ 440.000 , 0.9970 }, 
{ 320.000 , 1.4300 }, 
{ 200.000 , 1.5220 }, 
{ 330.000 , 1.0800 }, 
{ 309.000 , 1.1110 }, 
{ 309.000 , 1.1110 }, 
{ 309.000 , 1.1110 }, 
{ 309.000 , 1.1110 }, 
{ 322.000 , 1.1110 }, 
{ 322.000 , 1.1110 }, 
{ 322.000 , 1.1110 }, 
{ 525.000 , 1.2600 }, 
{ 525.000 , 1.2600 } 
 };
/*
These are the sites.
*/
int MSD::StdHarmonicBondForce_sitesSiteTupleList[] = {
1,0 ,
2,0 ,
3,0 ,
6,4 ,
9,6 ,
17,9 ,
12,10 ,
14,19 ,
15,14 ,
0,4 ,
21,4 ,
21,23 ,
4,5 ,
6,7 ,
6,8 ,
10,11 ,
17,18 ,
12,13 ,
19,20 ,
15,16 ,
22,21 ,
10,9 ,
12,14 ,
19,17 ,
23,24 ,
23,25 ,
28,25 ,
28,30 ,
25,26 ,
25,27 ,
29,28 ,
30,31 ,
30,32 ,
35,32 ,
35,37 ,
32,33 ,
32,34 ,
36,35 ,
41,39 ,
44,41 ,
51,44 ,
47,45 ,
49,53 ,
37,38 ,
37,39 ,
55,39 ,
55,57 ,
39,40 ,
41,42 ,
41,43 ,
45,46 ,
51,52 ,
47,48 ,
56,55 ,
45,44 ,
49,47 ,
53,51 ,
53,54 ,
49,50 ,
61,59 ,
64,61 ,
67,64 ,
68,67 ,
57,58 ,
57,59 ,
72,59 ,
59,60 ,
61,62 ,
61,63 ,
64,65 ,
64,66 ,
68,69 ,
68,70 ,
68,71 ,
72,74 ,
72,73
};
/*
The parameters are in the order of the structs above.
*/
UDF_Binding::SwopeTorsionForce_Params MSD::SwopeTorsionForce_paramsParamTupleList[] = {
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 1.4000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.0400 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.9900 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.9900 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.8000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2300 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.6000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 1.4000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.0400 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 3.1000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 4.2000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.4000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 1.8000 , sin(0.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2000 , sin(180.00*Math::Deg2Rad) , 1 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(180.00*Math::Deg2Rad) , 2.5000 , sin(180.00*Math::Deg2Rad) , 2 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(180.00*Math::Deg2Rad) , 0.0500 , sin(180.00*Math::Deg2Rad) , 6 }, 
{ cos(180.00*Math::Deg2Rad) , 0.2400 , sin(180.00*Math::Deg2Rad) , 1 }, 
{ cos(0.00*Math::Deg2Rad) , 0.3700 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.0100 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.1950 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.0100 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2000 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 }, 
{ cos(0.00*Math::Deg2Rad) , 0.2800 , sin(0.00*Math::Deg2Rad) , 3 } 
 };
/*
These are the sites.
*/
int MSD::SwopeTorsionForce_sitesSiteTupleList[] = {
0,4,6,7 ,
0,4,6,8 ,
0,4,6,9 ,
0,4,21,23 ,
1,0,4,5 ,
1,0,4,6 ,
1,0,4,21 ,
2,0,4,5 ,
2,0,4,6 ,
2,0,4,21 ,
3,0,4,5 ,
3,0,4,6 ,
3,0,4,21 ,
4,6,9,10 ,
4,6,9,17 ,
4,21,23,24 ,
4,21,23,25 ,
4,21,23,25 ,
5,4,6,7 ,
5,4,6,8 ,
5,4,6,9 ,
6,4,21,22 ,
6,9,10,11 ,
6,9,10,12 ,
6,9,17,18 ,
6,9,17,19 ,
7,6,4,21 ,
8,6,4,21 ,
9,6,4,21 ,
9,10,12,13 ,
9,10,12,14 ,
9,17,19,14 ,
9,17,19,20 ,
10,9,17,18 ,
10,9,17,19 ,
10,12,14,15 ,
10,12,14,19 ,
11,10,9,17 ,
11,10,12,13 ,
11,10,12,14 ,
12,10,9,17 ,
12,14,15,16 ,
12,14,19,17 ,
12,14,19,20 ,
13,12,14,15 ,
13,12,14,19 ,
14,19,17,18 ,
15,14,19,17 ,
15,14,19,20 ,
16,15,14,19 ,
18,17,19,20 ,
21,23,25,28 ,
22,21,23,24 ,
22,21,23,25 ,
23,25,28,30 ,
25,28,30,31 ,
25,28,30,32 ,
25,28,30,32 ,
28,30,32,35 ,
29,28,30,31 ,
29,28,30,32 ,
30,32,35,37 ,
32,35,37,38 ,
32,35,37,39 ,
32,35,37,39 ,
35,37,39,41 ,
35,37,39,55 ,
36,35,37,38 ,
36,35,37,39 ,
37,39,41,42 ,
37,39,41,43 ,
37,39,41,44 ,
37,39,55,57 ,
39,41,44,45 ,
39,41,44,51 ,
39,55,57,58 ,
39,55,57,59 ,
39,55,57,59 ,
40,39,41,42 ,
40,39,41,43 ,
40,39,41,44 ,
41,39,55,56 ,
41,44,45,46 ,
41,44,45,47 ,
41,44,51,52 ,
41,44,51,53 ,
42,41,39,55 ,
43,41,39,55 ,
44,41,39,55 ,
44,45,47,48 ,
44,45,47,49 ,
44,51,53,49 ,
44,51,53,54 ,
45,44,51,52 ,
45,44,51,53 ,
45,47,49,50 ,
45,47,49,53 ,
46,45,44,51 ,
46,45,47,48 ,
46,45,47,49 ,
47,45,44,51 ,
47,49,53,51 ,
47,49,53,54 ,
48,47,49,50 ,
48,47,49,53 ,
49,53,51,52 ,
50,49,53,51 ,
50,49,53,54 ,
52,51,53,54 ,
55,57,59,61 ,
55,57,59,72 ,
56,55,57,58 ,
56,55,57,59 ,
57,59,61,62 ,
57,59,61,63 ,
57,59,61,64 ,
57,59,72,73 ,
57,59,72,74 ,
59,61,64,65 ,
59,61,64,66 ,
59,61,64,67 ,
60,59,61,62 ,
60,59,61,63 ,
60,59,61,64 ,
60,59,72,73 ,
60,59,72,74 ,
61,59,72,73 ,
61,59,72,74 ,
61,64,67,68 ,
61,64,67,68 ,
62,61,59,72 ,
62,61,64,65 ,
62,61,64,66 ,
62,61,64,67 ,
63,61,59,72 ,
63,61,64,65 ,
63,61,64,66 ,
63,61,64,67 ,
64,61,59,72 ,
64,67,68,69 ,
64,67,68,70 ,
64,67,68,71 ,
65,64,67,68 ,
66,64,67,68
};
/*
The parameters are in the order of the structs above.
*/
UDF_Binding::UreyBradleyForce_Params MSD::UreyBradleyForce_paramsParamTupleList[] = {
{ 20.00 , 2.07400 }, 
{ 20.00 , 2.07400 }, 
{ 20.00 , 2.07400 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 5.40 , 1.80200 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 5.40 , 1.80200 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 35.00 , 2.41620 }, 
{ 22.00 , 2.15250 }, 
{ 22.00 , 2.15250 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 11.16 , 2.56100 }, 
{ 5.40 , 1.80200 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 22.53 , 2.17900 }, 
{ 5.40 , 1.80200 }, 
{ 5.40 , 1.80200 }, 
{ 5.40 , 1.80200 }, 
{ 5.40 , 1.80200 }, 
{ 50.00 , 2.38800 }, 
{ 50.00 , 2.38800 }, 
{ 70.00 , 2.22500 } 
 };
/*
These are the sites.
*/
int MSD::UreyBradleyForce_sitesSiteTupleList[] = {
1,4 ,
2,4 ,
3,4 ,
4,7 ,
4,8 ,
7,8 ,
10,17 ,
9,11 ,
9,12 ,
11,12 ,
10,13 ,
10,14 ,
13,14 ,
12,19 ,
9,18 ,
9,19 ,
18,19 ,
14,17 ,
14,20 ,
17,20 ,
39,42 ,
39,43 ,
42,43 ,
45,51 ,
44,46 ,
44,47 ,
46,47 ,
45,48 ,
45,49 ,
48,49 ,
47,50 ,
47,53 ,
50,53 ,
44,52 ,
44,53 ,
52,53 ,
49,51 ,
49,54 ,
51,54 ,
59,62 ,
59,63 ,
59,64 ,
62,63 ,
62,64 ,
63,64 ,
61,65 ,
61,66 ,
65,66 ,
69,70 ,
69,71 ,
70,71 ,
59,73 ,
59,74 ,
73,74
};

const double MSD::ShakeTolerance = 0.0;

const int MSD::DoNVT = 0;

const double MSD::EwaldAlpha = 0.0;

const double MSD::VelocityResampleTargetTemperature = 0.0;

const double MSD::PressureControlPistonInitialVelocity = 0.0;

const int MSD::LongRangeForceMethod = PreMSD::STDCOULOMB;

const int MSD::DoPressureControl = 0;

const int MSD::NumberOfOuterTimeSteps = 0;

const double MSD::PressureControlPistonMass = 0.0;

const double MSD::PressureControlTarget = 0.0;

const int MSD::NumberOfRattleIterations = 0;

const XYZ MSD::P3MEinitSpacing = {0,0,0};

const double MSD::RattleTolerance = 0.0;

const double MSD::Lambda = 0.0;

const int MSD::NumberOfShakeIterations = 0;

const int MSD::P3MEdiffOrder = 0;

const double MSD::OuterTimeStepInPicoSeconds = 0.0;

const int MSD::SnapshotPeriodInOTS = -1;

const int MSD::DoOuter = 0;

const int MSD::NumberOfCOMConstraints = 3;

const int MSD::VelocityResamplePeriodInOTS = 0;

const double MSD::InnerTimeStepInPicoSeconds = 0.001;

const int MSD::EwaldKmax = 0;

const int MSD::P3MEchargeAssignment = 0;

const int MSD::DoShakeRattle = 0;

const BoundingBox MSD::BoundingBoxDef = { -5.1e5,-6.7e5,-4.3e5,7.0e5,5.2e5,4.4e5 };

const double MSD::SwitchLowerCutoff = 1.0E100;

const int MSD::DoFreeEnergy = 0;

const double MSD::SwitchDelta = 1.0E100;

const int MSD::NumberOfInnerTimeSteps = 10;

const int MSD::SimTicksAtRespaLevel[] = {
1
};

const int MSD::NumberOfRespaLevels = 1;

const int MSD::RespaLevelByUDFCode[] = {
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0};

const int MSD::RespaLevelNonBonded = 0;


/*
Indexed by site type  = { mass, halfInverseMass, charge, lj_type, lj_14_type };
*/

const SiteInfo MSD::SiteInformation[] = 
{
{ 14.0070 , 1.0/(2.0 * 14.0070) , (-.300000*ChargeConversion) , 0 , 0 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.330000*ChargeConversion) , 1 , 1 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.210000*ChargeConversion) , 2 , 2 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.700000E-01*ChargeConversion) , 2 , 2 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.100000*ChargeConversion) , 3 , 3 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.900000E-01*ChargeConversion) , 3 , 3 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.140000*ChargeConversion) , 4 , 4 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.180000*ChargeConversion) , 4 , 4 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.200000E-01*ChargeConversion) , 4 , 4 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.900000E-01*ChargeConversion) , 5 , 5 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.115000*ChargeConversion) , 6 , 6 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.000000E+00*ChargeConversion) , 6 , 6 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.110000*ChargeConversion) , 6 , 6 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.115000*ChargeConversion) , 7 , 7 },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.540000*ChargeConversion) , 8 , 8 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.310000*ChargeConversion) , 9 , 9 },
{ 1.00800 , 1.0/(2.0 * 1.00800) , (.430000*ChargeConversion) , 9 , 9 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.510000*ChargeConversion) , 10 , 10 },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.510000*ChargeConversion) , 11 , 11 },
{ 14.0070 , 1.0/(2.0 * 14.0070) , (-.470000*ChargeConversion) , 12 , 12 },
{ 32.0600 , 1.0/(2.0 * 32.0600) , (-.900000E-01*ChargeConversion) , 13 , 13 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (-.220000*ChargeConversion) , 14 , 14 },
{ 12.0110 , 1.0/(2.0 * 12.0110) , (.340000*ChargeConversion) , 15 , 15 },
{ 15.9990 , 1.0/(2.0 * 15.9990) , (-.670000*ChargeConversion) , 16 , 16 }
};
const int MSD::SiteInformationSize = 24;


const int MSD::Pair14SiteList[] = 
{
0 , 7,
0 , 8,
0 , 9,
0 , 22,
0 , 23,
1 , 5,
1 , 6,
1 , 21,
2 , 5,
2 , 6,
2 , 21,
3 , 5,
3 , 6,
3 , 21,
4 , 10,
4 , 17,
4 , 24,
4 , 25,
5 , 7,
5 , 8,
5 , 9,
5 , 22,
5 , 23,
6 , 11,
6 , 12,
6 , 18,
6 , 19,
6 , 22,
6 , 23,
7 , 10,
7 , 17,
7 , 21,
8 , 10,
8 , 17,
8 , 21,
9 , 13,
9 , 14,
9 , 20,
9 , 21,
10 , 15,
10 , 18,
10 , 19,
11 , 13,
11 , 14,
11 , 17,
12 , 16,
12 , 17,
12 , 20,
13 , 15,
13 , 19,
14 , 18,
15 , 17,
15 , 20,
16 , 19,
18 , 20,
21 , 26,
21 , 27,
21 , 28,
22 , 24,
22 , 25,
23 , 29,
23 , 30,
24 , 26,
24 , 27,
24 , 28,
25 , 31,
25 , 32,
26 , 29,
26 , 30,
27 , 29,
27 , 30,
28 , 33,
28 , 34,
28 , 35,
29 , 31,
29 , 32,
30 , 36,
30 , 37,
31 , 33,
31 , 34,
31 , 35,
32 , 38,
32 , 39,
33 , 36,
33 , 37,
34 , 36,
34 , 37,
35 , 40,
35 , 41,
35 , 55,
36 , 38,
36 , 39,
37 , 42,
37 , 43,
37 , 44,
37 , 56,
37 , 57,
38 , 40,
38 , 41,
38 , 55,
39 , 45,
39 , 51,
39 , 58,
39 , 59,
40 , 42,
40 , 43,
40 , 44,
40 , 56,
40 , 57,
41 , 46,
41 , 47,
41 , 52,
41 , 53,
41 , 56,
41 , 57,
42 , 45,
42 , 51,
42 , 55,
43 , 45,
43 , 51,
43 , 55,
44 , 48,
44 , 49,
44 , 54,
44 , 55,
45 , 50,
45 , 52,
45 , 53,
46 , 48,
46 , 49,
46 , 51,
47 , 51,
47 , 54,
48 , 50,
48 , 53,
49 , 52,
50 , 51,
50 , 54,
52 , 54,
55 , 60,
55 , 61,
55 , 72,
56 , 58,
56 , 59,
57 , 62,
57 , 63,
57 , 64,
57 , 73,
57 , 74,
58 , 60,
58 , 61,
58 , 72,
59 , 65,
59 , 66,
59 , 67,
60 , 62,
60 , 63,
60 , 64,
60 , 73,
60 , 74,
61 , 68,
61 , 73,
61 , 74,
62 , 65,
62 , 66,
62 , 67,
62 , 72,
63 , 65,
63 , 66,
63 , 67,
63 , 72,
64 , 69,
64 , 70,
64 , 71,
64 , 72,
65 , 68,
66 , 68
};

const int MSD::Pair14SiteListSize = 177;

const UDF_Binding::StdChargeForce_Params MSD::Charge14PairTable[] = 
{ 
{ (-.300000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.300000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.300000*ChargeConversion)*(.000000E+00*ChargeConversion)*charge14scale },
{ (-.300000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.300000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.100000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.100000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.100000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.330000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.210000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.210000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.210000*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (.210000*ChargeConversion)*(-.200000E-01*ChargeConversion)*charge14scale },
{ (.100000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.100000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.100000*ChargeConversion)*(.000000E+00*ChargeConversion)*charge14scale },
{ (.100000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.100000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.110000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(-.540000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.110000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.430000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.540000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.110000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.540000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.540000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.430000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(-.200000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.200000E-01*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.200000E-01*ChargeConversion)*(-.200000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(-.200000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.200000E-01*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.200000E-01*ChargeConversion)*(.700000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.700000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(.000000E+00*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(.700000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.000000E+00*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.510000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.470000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.000000E+00*ChargeConversion)*(.510000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (-.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(-.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.115000*ChargeConversion)*(.115000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.510000*ChargeConversion)*(.340000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.310000*ChargeConversion)*charge14scale },
{ (-.510000*ChargeConversion)*(.700000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.140000*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (-.470000*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(-.180000*ChargeConversion)*charge14scale },
{ (.310000*ChargeConversion)*(.340000*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.700000E-01*ChargeConversion)*(-.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.140000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.220000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (-.180000*ChargeConversion)*(-.670000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.340000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.900000E-01*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(.340000*ChargeConversion)*charge14scale },
{ (-.140000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.140000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.140000*ChargeConversion)*(.900000E-01*ChargeConversion)*charge14scale },
{ (-.140000*ChargeConversion)*(.340000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.220000*ChargeConversion)*charge14scale },
{ (.900000E-01*ChargeConversion)*(-.220000*ChargeConversion)*charge14scale }};

const int MSD::Charge14PairTableSize = 177;

const UDF_Binding::LennardJonesForce_Params MSD::LJ14PairTable[] = 
{ 
{ 0.066332495807108 , 3.17 },
{ 0.066332495807108 , 3.17 },
{ 0.118321595661992 , 3.8424 },
{ 0.154919333848297 , 3.25 },
{ 0.2 , 3.4 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0214476105895272 , 2.1245 },
{ 0.071133676975115 , 2.2245 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0214476105895272 , 2.1245 },
{ 0.071133676975115 , 2.2245 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0214476105895272 , 2.1245 },
{ 0.071133676975115 , 2.2245 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0214476105895272 , 2.1245 },
{ 0.01 , 3.8 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0173205080756888 , 3.2582 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0173205080756888 , 3.2582 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0346410161513775 , 3.3 },
{ 0.0447213595499958 , 3.45 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0491934955049954 , 3.32 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0491934955049954 , 3.32 },
{ 0.0458257569495584 , 3.3506 },
{ 0.07 , 3.9848 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0877496438739212 , 3.9924 },
{ 0.103184301131519 , 3.7624 },
{ 0.0458257569495584 , 3.3506 },
{ 0.07 , 3.9848 },
{ 0.03 , 2.7164 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0567450438364444 , 2.2169 },
{ 0.07 , 3.9848 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0675499814951862 , 3.1282 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.103184301131519 , 3.7624 },
{ 0.0675499814951862 , 3.1282 },
{ 0.0567450438364444 , 2.2169 },
{ 0.03 , 2.7164 },
{ 0.0491934955049954 , 3.32 },
{ 0.0491934955049954 , 3.32 },
{ 0.11 , 4 },
{ 0.0742967024840268 , 1.6245 },
{ 0.0346410161513775 , 3.3 },
{ 0.154919333848297 , 2.95 },
{ 0.2 , 3.1 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0318119474411737 , 1.5445 },
{ 0.071133676975115 , 2.2245 },
{ 0.0214476105895272 , 2.1245 },
{ 0.01 , 3.8 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0491934955049954 , 3.32 },
{ 0.0491934955049954 , 3.32 },
{ 0.11 , 4 },
{ 0.0742967024840268 , 1.6245 },
{ 0.0346410161513775 , 3.3 },
{ 0.154919333848297 , 2.95 },
{ 0.2 , 3.1 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0318119474411737 , 1.5445 },
{ 0.071133676975115 , 2.2245 },
{ 0.0214476105895272 , 2.1245 },
{ 0.01 , 3.8 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0491934955049954 , 3.32 },
{ 0.033166247903554 , 3.9 },
{ 0.11 , 4 },
{ 0.0742967024840268 , 1.6245 },
{ 0.0346410161513775 , 3.3 },
{ 0.066332495807108 , 2.87 },
{ 0.066332495807108 , 2.87 },
{ 0.118321595661992 , 3.5424 },
{ 0.154919333848297 , 2.95 },
{ 0.2 , 3.1 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0214476105895272 , 2.1245 },
{ 0.071133676975115 , 2.2245 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0214476105895272 , 2.1245 },
{ 0.01 , 3.8 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0513809303146605 , 2.72 },
{ 0.066332495807108 , 2.87 },
{ 0.0173205080756888 , 3.2582 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0173205080756888 , 3.2582 },
{ 0.0264575131106459 , 3.8924 },
{ 0.0346410161513775 , 3.3 },
{ 0.0447213595499958 , 3.45 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0491934955049954 , 3.32 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0392428337406972 , 3.3124 },
{ 0.0491934955049954 , 3.32 },
{ 0.0458257569495584 , 3.3506 },
{ 0.07 , 3.9848 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0877496438739212 , 3.9924 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.07 , 3.9848 },
{ 0.03 , 2.7164 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.07 , 3.9848 },
{ 0.0458257569495584 , 3.3506 },
{ 0.03 , 2.7164 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.0458257569495584 , 3.3506 },
{ 0.03 , 2.7164 },
{ 0.03 , 2.7164 },
{ 0.0491934955049954 , 3.32 },
{ 0.033166247903554 , 3.9 },
{ 0.0877496438739212 , 4 },
{ 0.0742967024840268 , 1.6245 },
{ 0.0346410161513775 , 3.3 },
{ 0.066332495807108 , 2.87 },
{ 0.066332495807108 , 2.87 },
{ 0.0447213595499958 , 3.45 },
{ 0.154919333848297 , 3.25 },
{ 0.154919333848297 , 3.25 },
{ 0.0318119474411737 , 1.5445 },
{ 0.0214476105895272 , 2.1245 },
{ 0.0567450438364444 , 2.2245 },
{ 0.0148323969741913 , 3.22 },
{ 0.0148323969741913 , 3.22 },
{ 0.0670820393249937 , 3.9 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 },
{ 0.0148323969741913 , 3.22 },
{ 0.0513809303146605 , 3.02 },
{ 0.0513809303146605 , 3.02 },
{ 0.01 , 3.8 },
{ 0.0346410161513775 , 3.6 },
{ 0.0346410161513775 , 3.6 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 },
{ 0.099498743710662 , 3.32 },
{ 0.0392428337406972 , 3.32 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 },
{ 0.099498743710662 , 3.32 },
{ 0.0392428337406972 , 3.32 },
{ 0.0148323969741913 , 3.22 },
{ 0.0148323969741913 , 3.22 },
{ 0.0148323969741913 , 3.22 },
{ 0.0264575131106459 , 3.9 },
{ 0.0148323969741913 , 3.22 },
{ 0.0148323969741913 , 3.22 }};

const int MSD::LJ14PairTableSize = 177;

/* 
UdfCode, size of tupleList, siteTupleListPtr, paramTupleListPtr
*/

const UdfInvocation MSD::UdfInvocationTable[] = 
{
{ 7 , 9 , (int*) ImproperDihedralForce_sitesSiteTupleList, (void*) ImproperDihedralForce_paramsParamTupleList },
{ 2 , 131 , (int*) StdHarmonicAngleForce_sitesSiteTupleList, (void*) StdHarmonicAngleForce_paramsParamTupleList },
{ 1 , 76 , (int*) StdHarmonicBondForce_sitesSiteTupleList, (void*) StdHarmonicBondForce_paramsParamTupleList },
{ 3 , 144 , (int*) SwopeTorsionForce_sitesSiteTupleList, (void*) SwopeTorsionForce_paramsParamTupleList },
{ 4 , 54 , (int*) UreyBradleyForce_sitesSiteTupleList, (void*) UreyBradleyForce_paramsParamTupleList },
{ 36 , 177 , (int*)Pair14SiteList , (void*)Charge14PairTable },
{ 8 , 177 , (int*)Pair14SiteList , (void*)LJ14PairTable }
};

const int MSD::UdfInvocationTableSize = 7;

const UDF_Binding::NSQCoulomb_Params MSD::ChargeNsqParams[] = 
{
{ (-.115000*ChargeConversion) },
{ (-.140000*ChargeConversion) },
{ (-.180000*ChargeConversion) },
{ (-.200000E-01*ChargeConversion) },
{ (-.220000*ChargeConversion) },
{ (-.300000*ChargeConversion) },
{ (-.470000*ChargeConversion) },
{ (-.510000*ChargeConversion) },
{ (-.540000*ChargeConversion) },
{ (-.670000*ChargeConversion) },
{ (-.900000E-01*ChargeConversion) },
{ (.000000E+00*ChargeConversion) },
{ (.100000*ChargeConversion) },
{ (.110000*ChargeConversion) },
{ (.115000*ChargeConversion) },
{ (.210000*ChargeConversion) },
{ (.310000*ChargeConversion) },
{ (.330000*ChargeConversion) },
{ (.340000*ChargeConversion) },
{ (.430000*ChargeConversion) },
{ (.510000*ChargeConversion) },
{ (.700000E-01*ChargeConversion) },
{ (.900000E-01*ChargeConversion) },
{ (.900000E-01*ChargeConversion) }
};
const int MSD::NumberOfNsqSiteTypes = 24;

const UDF_Binding::NSQLennardJones_Params MSD::LJNsqParams[] = 
{
{ 0.07 , 3.9848 },
{ 0.055 , 4.35 },
{ 0.055 , 4.35 },
{ 0.055 , 4.35 },
{ 0.08 , 4.12 },
{ 0.2 , 3.7 },
{ 0.2 , 3.7 },
{ 0.12 , 3.4 },
{ 0.1521 , 3.54 },
{ 0.12 , 3.4 },
{ 0.45 , 4 },
{ 0.07 , 3.9848 },
{ 0.022 , 2.64 },
{ 0.07 , 3.9848 },
{ 0.03 , 2.7164 },
{ 0.02 , 4.55 },
{ 0.046 , 0.449 },
{ 0.046 , 0.449 },
{ 0.07 , 4 },
{ 0.046 , 0.449 },
{ 0.11 , 4 },
{ 0.02 , 4.55 },
{ 0.022 , 2.64 },
{ 0.022 , 2.64 }
};
const int MSD::NsqSiteIDtoSiteTypeMap[] = 
{
5,
17,
17,
17,
15,
12,
2,
23,
23,
11,
0,
14,
0,
14,
13,
8,
19,
0,
14,
0,
14,
20,
7,
6,
16,
3,
22,
22,
20,
7,
6,
16,
3,
22,
22,
20,
7,
6,
16,
21,
22,
2,
23,
23,
11,
0,
14,
0,
14,
0,
14,
0,
14,
0,
14,
20,
7,
6,
16,
21,
22,
2,
23,
23,
1,
23,
23,
10,
4,
23,
23,
23,
18,
9,
9
};
const int MSD::NsqSiteIDtoSiteTypeMapSize = 75;

const SiteTuplePair MSD::ExclusionList1_2_3_4[] = 
{
{ 0 , 1 },
{ 0 , 2 },
{ 0 , 3 },
{ 0 , 4 },
{ 0 , 5 },
{ 0 , 6 },
{ 0 , 7 },
{ 0 , 8 },
{ 0 , 9 },
{ 0 , 21 },
{ 0 , 22 },
{ 0 , 23 },
{ 1 , 2 },
{ 1 , 3 },
{ 1 , 4 },
{ 1 , 5 },
{ 1 , 6 },
{ 1 , 21 },
{ 2 , 3 },
{ 2 , 4 },
{ 2 , 5 },
{ 2 , 6 },
{ 2 , 21 },
{ 3 , 4 },
{ 3 , 5 },
{ 3 , 6 },
{ 3 , 21 },
{ 4 , 5 },
{ 4 , 6 },
{ 4 , 7 },
{ 4 , 8 },
{ 4 , 9 },
{ 4 , 10 },
{ 4 , 17 },
{ 4 , 21 },
{ 4 , 22 },
{ 4 , 23 },
{ 4 , 24 },
{ 4 , 25 },
{ 5 , 6 },
{ 5 , 7 },
{ 5 , 8 },
{ 5 , 9 },
{ 5 , 21 },
{ 5 , 22 },
{ 5 , 23 },
{ 6 , 7 },
{ 6 , 8 },
{ 6 , 9 },
{ 6 , 10 },
{ 6 , 11 },
{ 6 , 12 },
{ 6 , 17 },
{ 6 , 18 },
{ 6 , 19 },
{ 6 , 21 },
{ 6 , 22 },
{ 6 , 23 },
{ 7 , 8 },
{ 7 , 9 },
{ 7 , 10 },
{ 7 , 17 },
{ 7 , 21 },
{ 8 , 9 },
{ 8 , 10 },
{ 8 , 17 },
{ 8 , 21 },
{ 9 , 10 },
{ 9 , 11 },
{ 9 , 12 },
{ 9 , 13 },
{ 9 , 14 },
{ 9 , 17 },
{ 9 , 18 },
{ 9 , 19 },
{ 9 , 20 },
{ 9 , 21 },
{ 10 , 11 },
{ 10 , 12 },
{ 10 , 13 },
{ 10 , 14 },
{ 10 , 15 },
{ 10 , 17 },
{ 10 , 18 },
{ 10 , 19 },
{ 11 , 12 },
{ 11 , 13 },
{ 11 , 14 },
{ 11 , 17 },
{ 12 , 13 },
{ 12 , 14 },
{ 12 , 15 },
{ 12 , 16 },
{ 12 , 17 },
{ 12 , 19 },
{ 12 , 20 },
{ 13 , 14 },
{ 13 , 15 },
{ 13 , 19 },
{ 14 , 15 },
{ 14 , 16 },
{ 14 , 17 },
{ 14 , 18 },
{ 14 , 19 },
{ 14 , 20 },
{ 15 , 16 },
{ 15 , 17 },
{ 15 , 19 },
{ 15 , 20 },
{ 16 , 19 },
{ 17 , 18 },
{ 17 , 19 },
{ 17 , 20 },
{ 18 , 19 },
{ 18 , 20 },
{ 19 , 20 },
{ 21 , 22 },
{ 21 , 23 },
{ 21 , 24 },
{ 21 , 25 },
{ 21 , 26 },
{ 21 , 27 },
{ 21 , 28 },
{ 22 , 23 },
{ 22 , 24 },
{ 22 , 25 },
{ 23 , 24 },
{ 23 , 25 },
{ 23 , 26 },
{ 23 , 27 },
{ 23 , 28 },
{ 23 , 29 },
{ 23 , 30 },
{ 24 , 25 },
{ 24 , 26 },
{ 24 , 27 },
{ 24 , 28 },
{ 25 , 26 },
{ 25 , 27 },
{ 25 , 28 },
{ 25 , 29 },
{ 25 , 30 },
{ 25 , 31 },
{ 25 , 32 },
{ 26 , 27 },
{ 26 , 28 },
{ 26 , 29 },
{ 26 , 30 },
{ 27 , 28 },
{ 27 , 29 },
{ 27 , 30 },
{ 28 , 29 },
{ 28 , 30 },
{ 28 , 31 },
{ 28 , 32 },
{ 28 , 33 },
{ 28 , 34 },
{ 28 , 35 },
{ 29 , 30 },
{ 29 , 31 },
{ 29 , 32 },
{ 30 , 31 },
{ 30 , 32 },
{ 30 , 33 },
{ 30 , 34 },
{ 30 , 35 },
{ 30 , 36 },
{ 30 , 37 },
{ 31 , 32 },
{ 31 , 33 },
{ 31 , 34 },
{ 31 , 35 },
{ 32 , 33 },
{ 32 , 34 },
{ 32 , 35 },
{ 32 , 36 },
{ 32 , 37 },
{ 32 , 38 },
{ 32 , 39 },
{ 33 , 34 },
{ 33 , 35 },
{ 33 , 36 },
{ 33 , 37 },
{ 34 , 35 },
{ 34 , 36 },
{ 34 , 37 },
{ 35 , 36 },
{ 35 , 37 },
{ 35 , 38 },
{ 35 , 39 },
{ 35 , 40 },
{ 35 , 41 },
{ 35 , 55 },
{ 36 , 37 },
{ 36 , 38 },
{ 36 , 39 },
{ 37 , 38 },
{ 37 , 39 },
{ 37 , 40 },
{ 37 , 41 },
{ 37 , 42 },
{ 37 , 43 },
{ 37 , 44 },
{ 37 , 55 },
{ 37 , 56 },
{ 37 , 57 },
{ 38 , 39 },
{ 38 , 40 },
{ 38 , 41 },
{ 38 , 55 },
{ 39 , 40 },
{ 39 , 41 },
{ 39 , 42 },
{ 39 , 43 },
{ 39 , 44 },
{ 39 , 45 },
{ 39 , 51 },
{ 39 , 55 },
{ 39 , 56 },
{ 39 , 57 },
{ 39 , 58 },
{ 39 , 59 },
{ 40 , 41 },
{ 40 , 42 },
{ 40 , 43 },
{ 40 , 44 },
{ 40 , 55 },
{ 40 , 56 },
{ 40 , 57 },
{ 41 , 42 },
{ 41 , 43 },
{ 41 , 44 },
{ 41 , 45 },
{ 41 , 46 },
{ 41 , 47 },
{ 41 , 51 },
{ 41 , 52 },
{ 41 , 53 },
{ 41 , 55 },
{ 41 , 56 },
{ 41 , 57 },
{ 42 , 43 },
{ 42 , 44 },
{ 42 , 45 },
{ 42 , 51 },
{ 42 , 55 },
{ 43 , 44 },
{ 43 , 45 },
{ 43 , 51 },
{ 43 , 55 },
{ 44 , 45 },
{ 44 , 46 },
{ 44 , 47 },
{ 44 , 48 },
{ 44 , 49 },
{ 44 , 51 },
{ 44 , 52 },
{ 44 , 53 },
{ 44 , 54 },
{ 44 , 55 },
{ 45 , 46 },
{ 45 , 47 },
{ 45 , 48 },
{ 45 , 49 },
{ 45 , 50 },
{ 45 , 51 },
{ 45 , 52 },
{ 45 , 53 },
{ 46 , 47 },
{ 46 , 48 },
{ 46 , 49 },
{ 46 , 51 },
{ 47 , 48 },
{ 47 , 49 },
{ 47 , 50 },
{ 47 , 51 },
{ 47 , 53 },
{ 47 , 54 },
{ 48 , 49 },
{ 48 , 50 },
{ 48 , 53 },
{ 49 , 50 },
{ 49 , 51 },
{ 49 , 52 },
{ 49 , 53 },
{ 49 , 54 },
{ 50 , 51 },
{ 50 , 53 },
{ 50 , 54 },
{ 51 , 52 },
{ 51 , 53 },
{ 51 , 54 },
{ 52 , 53 },
{ 52 , 54 },
{ 53 , 54 },
{ 55 , 56 },
{ 55 , 57 },
{ 55 , 58 },
{ 55 , 59 },
{ 55 , 60 },
{ 55 , 61 },
{ 55 , 72 },
{ 56 , 57 },
{ 56 , 58 },
{ 56 , 59 },
{ 57 , 58 },
{ 57 , 59 },
{ 57 , 60 },
{ 57 , 61 },
{ 57 , 62 },
{ 57 , 63 },
{ 57 , 64 },
{ 57 , 72 },
{ 57 , 73 },
{ 57 , 74 },
{ 58 , 59 },
{ 58 , 60 },
{ 58 , 61 },
{ 58 , 72 },
{ 59 , 60 },
{ 59 , 61 },
{ 59 , 62 },
{ 59 , 63 },
{ 59 , 64 },
{ 59 , 65 },
{ 59 , 66 },
{ 59 , 67 },
{ 59 , 72 },
{ 59 , 73 },
{ 59 , 74 },
{ 60 , 61 },
{ 60 , 62 },
{ 60 , 63 },
{ 60 , 64 },
{ 60 , 72 },
{ 60 , 73 },
{ 60 , 74 },
{ 61 , 62 },
{ 61 , 63 },
{ 61 , 64 },
{ 61 , 65 },
{ 61 , 66 },
{ 61 , 67 },
{ 61 , 68 },
{ 61 , 72 },
{ 61 , 73 },
{ 61 , 74 },
{ 62 , 63 },
{ 62 , 64 },
{ 62 , 65 },
{ 62 , 66 },
{ 62 , 67 },
{ 62 , 72 },
{ 63 , 64 },
{ 63 , 65 },
{ 63 , 66 },
{ 63 , 67 },
{ 63 , 72 },
{ 64 , 65 },
{ 64 , 66 },
{ 64 , 67 },
{ 64 , 68 },
{ 64 , 69 },
{ 64 , 70 },
{ 64 , 71 },
{ 64 , 72 },
{ 65 , 66 },
{ 65 , 67 },
{ 65 , 68 },
{ 66 , 67 },
{ 66 , 68 },
{ 67 , 68 },
{ 67 , 69 },
{ 67 , 70 },
{ 67 , 71 },
{ 68 , 69 },
{ 68 , 70 },
{ 68 , 71 },
{ 69 , 70 },
{ 69 , 71 },
{ 70 , 71 },
{ 72 , 73 },
{ 72 , 74 },
{ 73 , 74 }
};
const int MSD::ExclusionList1_2_3_4Size = 384;

const NsqUdfInvocation MSD::NsqInvocationTable[] = 
{
{ 31, -1, MSD::NSQ2, 384, MSD::Exclusion, (SiteTuplePair *)ExclusionList1_2_3_4, (void *)ChargeNsqParams  } ,
{ 30, 32, MSD::NSQ1, 384, MSD::Exclusion, (SiteTuplePair *)ExclusionList1_2_3_4,  (void *)LJNsqParams } 
};
const int MSD::NsqInvocationTableSize = 2;

const int MSD::SiteIDtoSiteTypeMap[] = 
{
0,
1,
1,
1,
2,
4,
7,
9,
9,
11,
10,
13,
10,
13,
12,
14,
16,
10,
13,
10,
13,
17,
18,
19,
15,
8,
5,
5,
17,
18,
19,
15,
8,
5,
5,
17,
18,
19,
15,
3,
5,
7,
9,
9,
11,
10,
13,
10,
13,
10,
13,
10,
13,
10,
13,
17,
18,
19,
15,
3,
5,
7,
9,
9,
6,
9,
9,
20,
21,
9,
9,
9,
22,
23,
23
};
const int MSD::SiteIDtoSiteTypeMapSize = 75;

const double MSD::TimeConversionFactorMsd = TimeConversionFactor;
// All molecules in their own fragment
const Partition MSD::PartitionList[] = 
{
{ 0 , 0 , 75 ,  MSD::NON_WATER }
};

const int MSD::PartitionListSize = 1;

const int MSD::PartitionCount = 1;



MSD MolecularSystemDef;

#endif
