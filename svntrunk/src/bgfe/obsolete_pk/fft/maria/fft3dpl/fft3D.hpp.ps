%!PS-Adobe-3.0
%%Title: fft3D.hpp
%%For: Maria Eleftheriou
%%Creator: a2ps version 4.10.3
%%CreationDate: Sun Mar  2 17:59:59 2003
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 1
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate
90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//  ) c n
(//  IBM T.J.W  R.C.) N
(//  Date : 24/01/2003) N
(//  Name : Maria Eleftheriou) N
(//  FFT.hpp) N
(//) N
(//  The FFT Class provides an interface for performing a sequencial 3D FFT ) N
(//  on distribute data on a 3D-processor mesh. It is templated on the type) N
(//  of 1D FFT to perform and on parallel communication library to use. ) N
(//  Parallel Communication libraries available : MPI, BGL_BLADE, BGL_ ...) N
(//) N
() p n
(#ifndef) K
( __FFT3D_H_) p n
(#define) K
( __FFT3D_H_) p n
() N
(#include) K
( <iostream>) p n
(#include) K
( ") p
(fft_one_dim.hpp) str
(") p n
(#include) K
( ") p
(comm3DLayer.hpp) str
(") p n
(#include) K
( ") p
(BladeMpi.hpp) str
(") p n
(#include) K
( ") p
(mpi.h) str
(") p n
(#include) K
( ") p
(../fftw/complex.hpp) str
(") p n
() N
(template) K
(<) p
(class) K
( FFT_T, ) p
(class) K
( COMM_T>) p n
(class) K
( FFT3D {) p n
(  ) S
(enum) k
({DIM=3};) p n
(  ) S
(enum) k
({PX_MAX = 6, PY_MAX = 6, PZ_MAX = 6};) p n
(public) K
(:) p n
(  FFT_T *_fftx;) N
(  FFT_T *_ffty;) N
(  FFT_T *_fftz;) N
() N
(  COMM_T *_comm;) N
() N
(   ) S
(int) k
( _fftDir;) p n
() N
(  complex ***_localIn;  ) S
(// localIn  [nBars][nFFTs][localSizeOfFFT];) c n
(  complex ***_localOut; ) p
(// localOut [nBars][nFFTs][localSizeOfFFT];) c n
() p n
(  complex **_globalIn;  ) S
(// globalIn [nFFTs][sizeof\(1DFFT\)];) c n
(  complex **_globalOut; ) p
(// globalOut[nFFTs][sizeof\(1DFFT\)];) c n
() p n
(  ) S
(unsigned) k
( ) p
(int) k
( _localNx, _localNy, _localNz;) p n
(  ) S
(unsigned) k
( ) p
(int) k
( _pX, _pY, _pZ;) p n
(  ) N
(  ) S
(unsigned) k
( ) p
(int) k
( _barSzX, _barSzY, _barSzZ;) p n
( ) N
(  ) S
(// communication related data struct) c n
( ) p n
(  ) S
(struct) k
( FFT_Hdr {) p n
(    FFT3D *This; ) N
(    ) S
(int) k
( aIndex;) p n
(    ) S
(int) k
( bIndex;) p n
(    ) S
(int) k
( cIndex;) p n
(  };) N
() N
(  ) S
(typedef) K
( complex Value;) p n
( ) N
(  ) S
(enum) k
( {ELEMENTS_PER_PACKET = \(\() p
(sizeof) K
(\(_BGL_TorusPktPayload \)-) p
(sizeof) K
(\(FFT_Hdr\)\)) p n
() S 8 T () S 16 T () S 24 T (       /) S
(sizeof) K
(\( Value\)\)};) p n
() N
(  ) S
(struct) k
( actorPacket {) p n
(    FFT_Hdr      mHdr;) N
(    complex  mData[14];) N
(  };) N
() N
(  ) S
(int) k
( _xPointsPerPacket;) p n
(  ) S
(int) k
( _yPointsPerPacket;) p n
(  ) S
(int) k
( _zPointsPerPacket;) p n
(  ) S
(int) k
( _bPointsPerPacket;) p n
(fft3D.hpp) (Page 1/2) (Mar 02, 03 16:28) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  ) S
(int) k
( *_xCompletePacket;  ) p n
(  ) S
(int) k
( *_yCompletePacket;  ) p n
(  ) S
(int) k
( *_zCompletePacket;) p n
(  ) S
(int) k
( *_bCompletePacket;) p n
( ) N
(  ) S
(int) k
( _zCompletePencilsInBarCount;) p n
(  ) S
(int) k
( _yCompletePencilsInBarCount;) p n
(  ) S
(int) k
( _xCompletePencilsInBarCount;) p n
(  ) S
(int) k
( _bCompletePencilsInBarCount;) p n
() N
(  ) S
(int) k
( _xCompleteFFTsInBarCount;) p n
(  ) S
(int) k
( _yCompleteFFTsInBarCount;) p n
(  ) S
(int) k
( _zCompleteFFTsInBarCount;) p n
(  ) S
(int) k
( _bCompleteFFTsInBarCount;) p n
(  ) N
(  ) S
(int) k
( _xPacketsPerFFT;) p n
(  ) S
(int) k
( _yPacketsPerFFT;) p n
(  ) S
(int) k
( _zPacketsPerFFT;) p n
(  ) S
(int) k
( _bPacketsPerFFT;) p n
(   ) N
(  FFT3D\() S
(unsigned) k
( ) p
(int) k
( localNx,) p n
() S 8 T () S
(unsigned) k
( ) p
(int) k
( localNy,) p n
(        ) S
(unsigned) k
( ) p
(int) k
( localNz,) p n
() S 8 T () S
(unsigned) k
( ) p
(int) k
( Px,) p n
() S 8 T () S
(unsigned) k
( ) p
(int) k
( Py,) p n
(        ) S
(unsigned) k
( ) p
(int) k
( Pz,) p n
() S 8 T () S
(int) k
( fftDir,) p n
() S 8 T (MPI_Comm comm\);) N
(  ) N
(  ~FFT3D\(\);) N
() N
(  ) S
(void) k
( fft\(complex ***in, complex ***out\);) p n
(  ) N
(  ) S
(void) k
( getPx\() p
(int) k
( &px\);) p n
(  ) S
(void) k
( getPy\() p
(int) k
( &py\);) p n
(  ) S
(void) k
( getPz\() p
(int) k
( &pz\);) p n
() N
(  ) S
(void) k
( getLocalNx\() p
(int) k
( &localNx\);) p n
(  ) S
(void) k
( getLocalNy\() p
(int) k
( &localNy\);) p n
(  ) S
(void) k
( getLocalNz\() p
(int) k
( &localNz\);) p n
( ) N
(  ) S
(static) K
( ) p
(int) k
( _XPacketActorFx\() p
(void) k
(* pkt\);) p n
(  ) S
(static) K
( ) p
(int) k
( _YPacketActorFx\() p
(void) k
(* pkt\);) p n
(  ) S
(static) K
( ) p
(int) k
( _ZPacketActorFx\() p
(void) k
(* pkt\);) p n
(  ) S
(static) K
( ) p
(int) k
( _BPacketActorFx\() p
(void) k
(* pkt\);) p n
() N
(  ) S
(void) k
( gatherZ\(complex*** in, ) p
(int) k
( dim\);) p n
(  ) S
(void) k
( gatherX\(complex**  in, ) p
(int) k
( dim\);) p n
(  ) S
(void) k
( gatherY\(complex**  in, ) p
(int) k
( dim\);) p n
(  ) S
(void) k
( gatherB\(complex*** out, ) p
(int) k
( dim\);) p n
(  ) S
(void) k
( _activeMsgBarrier\() p
(int) k
( completePencilsInBarCount,) p n
() S 8 T () S 16 T () S 24 T ( ) S
(int) k
( barSz\);) p n
(  ) S
(// methods for debbugging ...) c n
(  ) p
(void) k
( _printComplexArrayR\(complex ** array, ) p
(int) k
( nrow, ) p
(int) k
( ncol\);) p n
(  ) S
(void) k
( _printComplexArrayI\(complex ** array, ) p
(int) k
( nrow, ) p
(int) k
( ncol\);) p n
(  ) S
(int) k
( validate3DFFT\(complex ***in, ) p
(const) K
( ) p
(int) k
( globalNx\);) p n
(#define) K
( max\(i, j\) \( \(i>j\)?i:j \)) p n
(#define) K
( min\(i, j\) \( \(i<j\)?i:j \)) p n
(};) N
() N
(#endif) K n
(fft3D.hpp) (Page 2/2) (Mar 02, 03 16:28) title
border
% End of virtual page
grestore
(Printed by Maria Eleftheriou) rhead
(fft3D.hpp) (1/1) (Sunday March 02, 2003) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
