/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include <BlueMatter/ExclusionList.hpp>

void ExclusionList::Init(void) 
{
  mWorkingAtom = -1 ;
}
  
void ExclusionList::Insert(unsigned int aAbsSiteId1, unsigned int aAbsSiteId2) 
{
  if (aAbsSiteId1 >= mWorkingAtom )
  {
    unsigned int NextBit = ( mWorkingAtom == -1 ) 
                  ? 0 
                  : (  mA[mWorkingAtom].m_MyFirstBit 
                     + mA[mWorkingAtom].m_
    if (aAbsSiteId1 > mWorkingAtom)
    {
      mA[aAbsSiteId1].m_MyFirstBit = ( mWorkingAtom == -1 ) ? 0 : mA[mWorkingAtom]
    } else {
      // Another exclusion to the same atom
      unsigned int BitIndex =  mA[aAbsSiteId1].m_MyFirstBit 
                             + aAbsSiteId2 
                             - mA[aAbsSiteId1].m_LowestExclusion ;
        unsigned int ByteIndex = BitIndex / k_BitsPerChar ;
      unsigned int BitMask = 0x80 >> (BitIndex % k_BitsPerChar );
      mBitMap[ByteIndex] |= BitMask ;
    }
  }
}	
void ExclusionList::Consolidate(void) 
{
}
int ExclusionList::AreSitesInExclusionList(unsigned int aAbsSiteId1, unsigned int aAbsSiteId2) 
{
  unsigned int AtomLo = ( aAbsSiteId1 < aAbsSiteId2 ) ? aAbsSiteId1 : aAbsSiteId2 ;
  unsigned int AtomHi = ( aAbsSiteId1 < aAbsSiteId2 ) ? aAbsSiteId2 : aAbsSiteId1 ;
  unsigned int LowestExclusionThisAtom  = mA[aAbsSiteId1].m_LowestExclusion ;
  unsigned int HighestExclusionThisAtom = mA[aAbsSiteId1].m_HighestExclusion ;
  unsigned int MyFirstBit               = mA[aAbsSiteId1].m_MyFirstBit ;
  if (aAbsSiteId2 < LowestExclutionThisAtom 
   || aAbsSiteId2 > HighestExclusionThisAtom ) return 0 ;
   
  unsigned int BitIndex = MyFirstBit + aAbsSiteId2 - LowestExclusion ;
  unsigned int ByteIndex = BitIndex / k_BitsPerChar ;
  unsigned int BitMask = 0x80 >> (BitIndex % k_BitsPerChar );
  return mBitMap[ByteIndex] & BitMask ;
}
