/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include <builtins.h>
#include <math.h>

#include <iostream.h>
#include <iomanip.h>
//using namespace std ;

static void quadfloat_integrate_seq(
    double& new_hi,
    double& new_lo,
    double v0,
    double v1, 
    double v2)
{
  double sum_hi = v0 + v1 ;
  volatile double v_sum_hi = sum_hi ; 
  volatile double chaff_1 = v_sum_hi - v0 ;
  double chaff = chaff_1 - v1 ;
  double sum_lo = v2 - chaff ;
  double s_hi = sum_hi + sum_lo ;

  volatile double v_s_hi = s_hi ;
  volatile double s_chaff_1 = v_s_hi - sum_hi ;
  double s_chaff = s_chaff_1 - sum_lo ;
  new_hi = s_hi ;
  new_lo = -s_chaff ;
}
void quadfloat_integrate(
    double& new_hi,
    double& new_lo,
    double old_hi,
    double old_lo,
    double delta)
{
  double abs_old_hi=fabs(old_hi) ;
  double abs_old_lo=fabs(old_lo) ;
  double abs_delta=fabs(delta) ;
  if( abs_delta > abs_old_hi )
    {
    quadfloat_integrate_seq(new_hi,new_lo,delta,old_hi,old_lo) ;
    }
  else if( abs_delta > abs_old_lo)
    {
    quadfloat_integrate_seq(new_hi,new_lo,old_hi,delta,old_lo) ;
    }
  else 
    {
    quadfloat_integrate_seq(new_hi,new_lo,old_hi,old_lo,delta) ;
    }
       
}

int main(int argc, const char *argv[], const char *envp[])
{
  double old_hi=atof(argv[1]) ;
  double old_lo=atof(argv[2]) ;
  double delta=atof(argv[3]) ;
  double new_hi ;
  double new_lo ;

  quadfloat_integrate(new_hi,new_lo,old_hi,old_lo,delta) ;
  cout << setw(30) << setprecision(20) 
       << "old_hi=" << old_hi
       << " old_lo=" << old_lo
       << " delta=" << delta
       << "\n new_hi=" << new_hi
       << " new_lo=" << new_lo
       << "\n" ;
  return 0 ;

}
