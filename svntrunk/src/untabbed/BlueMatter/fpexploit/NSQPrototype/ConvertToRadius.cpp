/* Copyright 2001, 2019 IBM Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*
 * NSQ prototype bulk conversion from radius-squared to radius
 */

#include <NSQProto.hpp>

void ConvertToRadius(int FragIndexFirst, int FragIndexQuit) 
{
  double p0 = AllFragments.BoundingSphereRadius(FragIndexFirst+0) ;
  double p1 = AllFragments.BoundingSphereRadius(FragIndexFirst+1) ;
  double p2 = AllFragments.BoundingSphereRadius(FragIndexFirst+2) ;
  double p3 = AllFragments.BoundingSphereRadius(FragIndexFirst+3) ;
  double p4 = AllFragments.BoundingSphereRadius(FragIndexFirst+4) ;
  double p5 = AllFragments.BoundingSphereRadius(FragIndexFirst+5) ;
  double p6 = AllFragments.BoundingSphereRadius(FragIndexFirst+6) ;
  double p7 = AllFragments.BoundingSphereRadius(FragIndexFirst+7) ;
  double p8 = AllFragments.BoundingSphereRadius(FragIndexFirst+8) ;
  double p9 = AllFragments.BoundingSphereRadius(FragIndexFirst+9) ;
  
  for ( int x = FragIndexFirst ; x < FragIndexQuit ; x += 10 ) 
  {
    double r0 = p0/sqrt(p0) ;
    double r1 = p1/sqrt(p1) ;
    double r2 = p2/sqrt(p2) ;
    double r3 = p3/sqrt(p3) ;
    double r4 = p4/sqrt(p4) ;
    double r5 = p5/sqrt(p5) ;
    double r6 = p6/sqrt(p6) ;
    double r7 = p7/sqrt(p7) ;
    double r8 = p8/sqrt(p8) ;
    double r9 = p9/sqrt(p9) ;
    
        p0 = AllFragments.BoundingSphereRadius(x+10) ;
        p1 = AllFragments.BoundingSphereRadius(x+11) ;
        p2 = AllFragments.BoundingSphereRadius(x+12) ;
        p3 = AllFragments.BoundingSphereRadius(x+13) ;
        p4 = AllFragments.BoundingSphereRadius(x+14) ;
        p5 = AllFragments.BoundingSphereRadius(x+15) ;
        p6 = AllFragments.BoundingSphereRadius(x+16) ;
        p7 = AllFragments.BoundingSphereRadius(x+17) ;
        p8 = AllFragments.BoundingSphereRadius(x+18) ;
        p9 = AllFragments.BoundingSphereRadius(x+19) ;
        
        AllFragments.BoundingSphereRadius(x+0) = r0 ; 
        AllFragments.BoundingSphereRadius(x+1) = r1 ; 
        AllFragments.BoundingSphereRadius(x+2) = r2 ; 
        AllFragments.BoundingSphereRadius(x+3) = r3 ; 
        AllFragments.BoundingSphereRadius(x+4) = r4 ; 
        AllFragments.BoundingSphereRadius(x+5) = r5 ; 
        AllFragments.BoundingSphereRadius(x+6) = r6 ; 
        AllFragments.BoundingSphereRadius(x+7) = r7 ; 
        AllFragments.BoundingSphereRadius(x+8) = r8 ; 
        AllFragments.BoundingSphereRadius(x+9) = r9 ; 
    
  } ;
}
