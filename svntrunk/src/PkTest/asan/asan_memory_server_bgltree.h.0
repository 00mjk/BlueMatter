#ifndef __ASAN_MEMORY_SERVER__
#define __ASAN_MEMORY_SERVER__

#ifndef DEBUG_ASAN_SORT
#define DEBUG_ASAN_SORT ( 0 )
#endif

#ifndef PKFXLOG_DEBUG_ASAN_SORT
#define PKFXLOG_DEBUG_ASAN_SORT ( 0 )
#endif

#include <execinfo.h>

#include <BonB/BGL_PartitionSPI.h>
#include <rts.h>
#include <Pk/API.hpp>
#include <Pk/Compatibility.hpp>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <string.h>
#include <strings.h>
#include <stdio.h>
#include <errno.h>
#include <dirent.h>
#include <stdlib.h>
#include <assert.h>
#include <arpa/inet.h>

#include <gpfs2cn_protocol.h>

#include <map>
#include <list>
#include <vector>
#include <spi/BGL_Alloc.hpp>
#include <inmemdb/hashfunc.hpp>

#ifndef PKFXLOG_BGLTREE_DEBUG
#define PKFXLOG_BGLTREE_DEBUG ( 0 )
#endif

#define DEBUG_LOG ( 0 )

#define SOCKET_ERROR (-1)
// States
enum 
{
  MEMORY_SERVER_STATE_START,
  MEMORY_SERVER_STATE_CONNECTED,
  MEMORY_SERVER_STATE_DISCONNECTED
};

void error_exit(char *str) 
{ 
  fprintf(stderr,"\n%s\n",str); 
  fprintf(stderr,"errno %d\n ", errno); 
  fflush(stderr); 
  exit(-1); 
}

//#define BGL_TREE_PAYLOAD_SIZE ( _BGL_TREE_PKT_MAX_BYTES - sizeof( _BGL_TreeHwHdr ) )

_BGL_TreeHwHdr DummyHdr ALIGN_QUADWORD;
char RecvTreePayload[ _BGL_TREE_PKT_MAX_BYTES ] ALIGN_QUADWORD;
char SendTreePayload[ _BGL_TREE_PKT_MAX_BYTES ] ALIGN_QUADWORD;

static void writePacket( _BGL_TreeHwHdr* hdr, char* Buf )
{
  BGLTreeSend( 1, hdr, Buf, _BGL_TREE_PKT_MAX_BYTES );
}

static int IsTreeFifoEmpty( int vc )
  {
    _BGL_TreeFifoStatus stat;

    BGLTreeGetStatus( vc, &stat );
    
    return (stat.RecHdrCount == 0) || (stat.RecPyldCount < 0x10);
  }

/* Obtain a backtrace and print it to stdout. */
void print_trace (void)
{
  void *array[10];
  size_t size;
  char **strings;
  size_t i;

  size = backtrace (array, 10);
  strings = backtrace_symbols (array, size);

  BegLogLine( 1 )
    << "print_trace:: " 
    << " Obtained " << size << " stack frames. "
    << EndLogLine;

/*   char* Str = "Hello World!"; */
/*   write( 1, Str, strlen( Str ) ); */

  for (i = 0; i < size; i++)
    {
/*     BegLogLine( 1 ) */
/*       << " print_trace:: " */
/*       << " traceback_symbol[ " << i << " ]: " << strings[ i ]  */
/*       << " " << array[ i ]  */
/*       << EndLogLine;  */
      printf( "print_trace:: traceback_symbol[ %d ]: %s %08x\n", 
	      i, strings[ i ], array[ i ] );
      
      fflush( stdout );
    }

  free (strings);
}

static void readPacket( char* Buf )
{
  BegLogLine( PKFXLOG_BGLTREE_DEBUG )
    << "readPacket:: Entering... "
    << EndLogLine;

  // BGLTreeReceive( 1, &DummyHdr, Buf, _BGL_TREE_PKT_MAX_BYTES );
  BGLTreeReceiveWithYield( 1, &DummyHdr, Buf, _BGL_TREE_PKT_MAX_BYTES, PkFiberYield );

  BegLogLine( PKFXLOG_BGLTREE_DEBUG )
    << "readPacket:: Leaving... "
    << EndLogLine;  
}

static unsigned int readAll( char* Buf, unsigned int len )
{
/*   while( IsTreeFifoEmpty( 1 ) ) */
/*     PkFiberYield(); */
  
  // int rc = BGLTreeReceiveUnaligned( 1, &DummyHdr, Buf, len );
  BegLogLine( PKFXLOG_BGLTREE_DEBUG )
    << "readAll:: Entering... "
    << EndLogLine;

  int rc = BGLTreeReceiveUnalignedWithYield( 1, &DummyHdr, Buf, len, PkFiberYield );

  BegLogLine( PKFXLOG_BGLTREE_DEBUG )
    << "readAll:: Leaving... "
    << EndLogLine;
  
  return rc;
}

unsigned int writeAll( _BGL_TreeHwHdr* hdr, char* Buf, unsigned int len )
{
  return BGLTreeSendUnaligned( 1, hdr, Buf, len );
}

class ASAN_BufferManager
{
 public:
  static char * Buffer;
  static int    BufferSize;
  static int    BufferIndex;
  
  static void AllocateBuffer( int MBCount );
  static char* GetBufferPtr();
  static int GetBufferSize();  
};

#define STL_VECTOR( Key ) std::vector< Key, inmemdb::BGL_Alloc< Key > >
#define STL_LIST( Key ) std::list< Key, inmemdb::BGL_Alloc< Key > >
#define STL_MAP( Key, Data ) std::map< Key, Data, less< Key >, inmemdb::BGL_Alloc< std::pair< const Key, Data > > >

class BlockRep
  {
  public:
  long long  mBlockIndex;
  char*      mBlockPtr;
  
  bool operator<(const BlockRep& aBlockRep ) const
    {
      return mBlockIndex < aBlockRep.mBlockIndex; 
    }
  };

class LocalBlocksForInodeManagerIF
  {
    int            mInode;

  // typedef STL_VECTOR( BlockRep ) BlockRepList_T;
  typedef STL_LIST( BlockRep ) BlockRepList_T;
  BlockRepList_T*              mBlockRepList;
  BlockRepList_T::iterator     mCurrentIter;
  

  public:    
    void Init( int aInode )
      {	
      mInode = aInode;	

      inmemdb::BGL_Alloc< BlockRepList_T > alloc;
	
      mBlockRepList = (BlockRepList_T *) alloc.allocate( 1 );
      alloc.construct( mBlockRepList, BlockRepList_T() );
      
      }

    void SortBlockList()
      {
      mBlockRepList->sort();
      }

    void AddBlock( int BlockIndex, char* BlockPtr )
      {
	BlockRep BR;
	BR.mBlockIndex = BlockIndex;
	BR.mBlockPtr   = BlockPtr;

	mBlockRepList->push_back( BR );
	
	BegLogLine( DEBUG_ASAN_SORT )
	  << "AddBlock:: Just added:"
	  << " BlockIndex: " << BlockIndex
	  << " BlockPtr: " << (void *) BlockPtr
	  << EndLogLine;	
      }
    
    // This call is 
    BlockRep* GetFirstBlock() 
      {
	mCurrentIter = mBlockRepList->begin();
	return (BlockRep *) & (*mCurrentIter);
      }
    
    BlockRep* GetNextBlock()
      {
	mCurrentIter++;
	
	if( mCurrentIter == mBlockRepList->end() )
	  return NULL;
	
	return (BlockRep *) & (*mCurrentIter);
      }
  };

class ASAN_MemoryServer
{
  int    CurrentState;
  char * BufferPtr;

  _BGL_TreeHwHdr TreeHdr ALIGN_QUADWORD;
  unsigned       MyIONodeTreeAddress;

  in_addr_t GetIONodeIP();  
  // void SendDisconnectionAck();
  // void SendConnectionAck();
  void AcceptConnection();
  
  // This happens once for now
  in_addr_t GenerateDiskPortFile();
  void SetBufferPtr( char * buff );

public:
  void Init();
  ASAN_MemoryServer() {}

  void Run( int tracefreq ); 

  int GetLocalBlocksCount( int inode );
  
  LocalBlocksForInodeManagerIF * GetLocalBlocks( int inode );  

  void SendOnTree( char* Data, 
		   int Len, 
		   unsigned long* ResponseReceivedPtr,
		   char*          BufferBase );

};

#define ASAN_MEMORY_BLOCK_SIZE ( 128 * 1024 )

struct DataHashArgs
{
  long long blockIndex;
  long long inode;
};

struct LocalDataAccessKey
{
  int       inode;
  long long blockIndex;

  bool operator<(const LocalDataAccessKey& aKey ) const
  {
    // KeyCompare kc;
    if( inode < aKey.inode )
      return 1;
    else if( inode == aKey.inode )
      return ( blockIndex < aKey.blockIndex );
    else
      return 0;    
  }  
};

struct LocalDataAccessRecord
{
  // This is a flag that's set
  // When the end of the record is 
  // taken by the owner of the record
  char        IsFirstRecordTaken; 
  char*       DataBlock;
};

typedef STL_MAP( LocalDataAccessKey, LocalDataAccessRecord ) LocalDataMap_T;

<<<<<<< .mine
=======
double padd_localdatamap0[ 4 ];
LocalDataMap_T LocalDataMap;
double padd_localdatamap1[ 4 ];

>>>>>>> .r12541
extern LocalDataMap_T LocalDataMap;

static int GetDataOwner(int inode, long long blockIndex )         
{

  DataHashArgs harg;
  harg.inode = inode;
  harg.blockIndex = blockIndex;

  if ( inode < 4096 )
  {
    return 0 ; // Force 'metadata' to node 0
  }
  unsigned int hash_val = hashword( (const unsigned int *) &harg, sizeof( DataHashArgs ) / sizeof ( unsigned int ),  0 );
  
  // It's best if the N is a power of 2
  unsigned int hash_mask = PkNodeGetCount() - 1;
  
  return ( hash_val & hash_mask ); 
}

char* GetLocalDataPtr( int inode,
		       long long blockIndex,
		       int indexInBlock );

#endif
