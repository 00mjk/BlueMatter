################################################################################
#
# Makeconf
#
# This special makefile marks the top of the source tree and is the first
# file read by 'mk'. Several builtin make variables are defined based upon the
# location of this file and the subdirectory within this tree where make was
# invoked.
#
################################################################################

CPFLAGS =

RPM = "rpmbuild --define _unpackaged_files_terminate_build=0"
GENCMF=

QUOTE_INSTALL_FILES ?= 1

# GFLAGS turns symbols on
GFLAGS ?= -g
# BG_OPT_LEVEL gives support for various levels of optimisation, roughly corresponding
# to compiler optimisation levels


# BG_TRUST_LEVEL gives support for various levels of checking/logging
# Intent
#  0 - logging compiled in, asserts checked
#  1 - logging compiled out, asserts checked
#  2 - logging compiled out, asserts not checked
BG_TRUST_LEVEL ?= 0

# BG_USE_BLADE indicates whether we want to use BLADE for torus messaging
# Intent
#  0 - use MPI on BLRTS
#  1 - use packet layer on libblade.a
.if $(CONTEXT) == "bgl_cnk_1"
BG_OPT_LEVEL ?= 0
BG_USE_BLADE ?= 1
CAN_BUILD_SPI ?= 1
.else
BG_USE_BLADE ?= 1 
CAN_BUILD_SPI ?= 0
BG_OPT_LEVEL ?= 2
.endif


# Define for 'packaging' preprocessing
.if !empty(MACHINE:M*_aix_*)
PPFLAGS = "-D_aix_ "
.endif
.if !empty(MACHINE:M*_linux_*)
PPFLAGS = "-D_linux_ "
.endif

# SHORT_OBJ_PATHS is set = 1 so that short relative object paths are used
# This keeps the environment from being overflowed when creating libs with
# many component object files
SHORT_OBJ_PATHS ?= 1

# JAROBJS_NOABS is defined so that args to the jar command are passed exactly
# as given by JAR_OBJECTS.  Otherwise the full path is used
JAROBJS_NOABS ?= 1

OTHER_JAROBJS_NOABS ?= 1

# Set variables for all platform (CONTEXT) types.
#
TOSTAGE=${SOURCEBASE}/../inst.images/${CONTEXT}/shipdata

# Using the -E flags causes genpath to expand only the export subdirectories.
#
INCFLAGS += \
	-Eusr/include 
LIBFLAGS += -Eusr/lib

# Variable triggers the building of java source.
#
BUILDJAVA = 1

# Variable triggers to allow JAVA_CLASSES to be defined from
# ${PROJECT_NAME}.passes.mk or after the inclusion of ${RULES_MK}
USE_JAVA_CLASSES =

## Variable triggers to allow building of one file istall image.
#.if !empty(CONTEXT:M*_linux_*)
##PKG_GEN_DIST_FILE =
#.elif empty(CONTEXT:Mx86_nt_*) && empty(CONTEXT:Mx86_95_*)
#PKG_GEN_DIST_FILE =
#.endif

#.ifdef PKG_GEN_DIST_FILE
#INSTALL_IMAGE_NAME = bluegene
#INSTALL_IMAGE_FILE = ${PKG_OUTPUT_DIR}/${CONTEXT}_install_image
#.endif #PKG_GEN_DIST_FILE

# The name of the library created.  Can be overridden from
# the command line or environment (or Buildconf).
#
LIBBASE ?= exa

# To build the above library as a dynamic/shared library,
# uncomment the following variable definition.  By default,
# it will be built as an archive/static library.
#
# USE_SHARED_LIBRARY =

# To build a .RES resource file containing an icon and STRINGTABLE
# for WinNT or OS/2, uncomment the following variable definition.
# If USE_SHARED_LIBRARY is defined, the .RES file will be linked with
# the shared library; otherwise it is linked with server.exe.
#
# USE_RESOURCES=

# PKG_NAME
#
PKG_NAME ?=bluegene

.if defined(USE_RESOURCES) && !defined(USE_SHARED_LIBRARY)
# link resources file with server.exe
USE_RESOURCES_FILE=
.endif

# Disable LEX and YACC rules for speed
#  (Comment out the following variable definition if the rules are needed)
#
#NO_YACC_RULES =
#NO_LEX_RULES  =

# use flex and bison
#
YACC = bison
LEX = flex

# set YFLAGS for cifparse build
YFLAGS = -d -v -y
# set LFLAGS for cifparse build
LFLAGS = -Cfr -olex.yy.c

# Turn off setting ownership and mode, this is not how AIX packaging works
NO_CHOWN =
NO_CHMOD =
.if defined(CONTEXT)
# Include platform specific Makeconf
#
.include <${CONTEXT}.mk>
.endif  # context defined

# Setting Java compiler flags for debugging
.ifdef DEBUGGING
JFLAGS += -g
.endif

# Allow makefiles to use spaces to indent commands instead
# of enforcing hard tabs.
#.MAKEFLAGS: -w

.if defined(OBJECTDIR)
MAKEOBJDIR=${OBJECTDIR}
.endif

# Set MAKESRCDIRPATH to the backing chains source directories (SOURCEDIR).
# Then add in the appropriate object directory for each backing chain.
.if defined(SOURCEDIR)
MAKESRCDIRPATH := ${SOURCEDIR:S/${PATHSEP}/ /g}
MAKESRCDIRPATH := ${MAKESRCDIRPATH:@WORD@${WORD}${DIRSEP}${OBJECTDIR}${PATHSEP}${WORD}@}
#MAKESRCDIRPATH := ${MAKESRCDIRPATH:s/ /${PATHSEP}/g}
.endif # SOURCEDIR

.if $(CONTEXT) != "x86_linux_2"
# Arrange for export to use 'copy' rather than 'symlink', to avoid problems with dangling links
EXPORT_USING_COPY =
.endif

# Set the directories for installing files onto a target system
BG_NAME = bluegene
#   -- the 'opt' in the line below is for AIX, becuase ODE and Austin are not in sync ...
BG_DIR     = $(IDIR_PREF)/opt/$(BG_NAME)
BG_SRC     = $(BG_DIR)/src
BG_INCLUDE = $(BG_DIR)/include
BG_LIB     = $(BG_DIR)/lib
BG_TGTLIB  = $(BG_DIR)/tgtlib
BG_BIN     = $(BG_DIR)/bin
BG_DOC     = $(BG_DIR)/doc
BG_FIELDS  = $(BG_DIR)/forcefields
BG_WEB     = $(BG_DIR)/webapps

BG_TEST    = $(BG_DIR)/mdtest
BG_REG     = $(BG_DIR)/regression
BG_REGBIN  = $(BG_REG)/bin

# Indicate where installed BG/L files are to be found
BGL_INSTALL ?= /bgl/BlueLight/ppcfloor

# 

SPICFLAGS =

#.if $(CONTEXT) == "bgl_cnk_1"
##SMPCFLAGS = -DPK_MPICH 
##SMPCFLAGS = -DPK_SPI -DPK_ONE_CORE
#SMPCFLAGS = -DPK_SPI -DPK_TWO_CORE_NO_LOCKS
#EXTRA_LIBS = -lblade -lrts.rts -ldevices.rts
#
#.else
SMPCFLAGS = \
 -DPK_SMP \
# -DPLIMPTONPPL \
# -DNEWTON_LIGHT \

#.endif

#UNICFLAGS = -DPK_SMP
UNICFLAGS =

# Various contexts for building
#  rios_aix : Build the setup and analysis tools; package for installation on a 'target' system (front-end node)
#  x86_linux : Validate that a build would work
#  ppc_linux : Local build on a front-end node
#  ppc64_linux : Local build on a front-end node, 64-bit
#  bgl_cnk   : Cross-compile build on a front-end node. (Used to target a BG/L simulator, simulation no longer needed)
#  cyclops_spi : Now defunct, a different design of multi-core chip
#  rios64_aix : Like rios_aix, but arrange 64-bit versions of setup and analysis tools

#.if $(CONTEXT) == "cyclops_spi_1"
#  CYCLOPS=1
#  # Cross-compiling to run on BlueGene or its simulator
#  CAN_BUILD_MPI ?= 0
#  CAN_BUILD_PROBSPEC ?= 0
#
#  CFLAGS += -I$(CYCLOPS_ROOT)/include -I$(CYCLOPS_ROOT)/include/spi
#  CFLAGS += \
#    -D PK_GCC \
#    -D PK_SPI \
#
#  CFLAGS += -D CYCLOPS \
#
#  EXTRA_LIBS += -lbluegene -lstdc++ -lgcc -lbluegene
#
#
#
#
#.if $(BG_TRUST_LEVEL) == 0
#  CFLAGS += -DPKFXLOG
#.elif $(BG_TRUST_LEVEL) == 1
## Nothing special
#.elif $(BG_TRUST_LEVEL) == 2
#  CFLAGS += -DNDEBUG
#.endif
#
#OPT_LEVEL_0 =
#OPT_LEVEL_1 =
#OPT_LEVEL_2 = -O2
#OPT_LEVEL_3 = -O3
#OPT_LEVEL_4 = -O4
#OPT_LEVEL_5 = -O5
#OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))
#
#.endif
# CFLAGS += \
#  -Dbool=int \

.if  !empty(CONTEXT:Mrios64_aix*) || !empty(CONTEXT:Mx86_linux*)
OBJ_MODE = 64
.endif

DB2_INSTALL=/opt/ibm/db2/V11.1
BG_AUX_FLAGS_DB2 = -I${DB2_INSTALL}/include -L${DB2_INSTALL}/lib${OBJ_MODE} -ldb2 
 # Native compilation. We can do this on AIX or Linux
.if !empty(CONTEXT:M*_aix_*)
 # Compile and link flags
  .if $(AIX_USE_GCC) == 1
    CCFAMILY = gnu
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_GCC 
  .else
    CCFAMILY = cset
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_XLC -qmaxmem=-1 -qstaticinline -qalign=natural 
    
  .endif
 CCFAMILY = cset
 CCTYPE = cppr

# Add '-qfuncsect' to ICU and XML, becuase some symbols are not coherently present
# Add '-DAPP_NO_THREADS' to XML, because we lock an uninitialised mutex otherwise
# Add -qnotempinc to prevent tempinc creation/usage
# Add -bmaxdata to try to address memory capacity required by xml
BG_AUX_FLAGS_1 = -qfuncsect -DAPP_NO_THREADS -qnotempinc -bmaxdata:0x20000000

MPICFLAGS = -DPK_MPI
# Used for db2 cli utilities build
# and for analysis which also needs gsl
# Add -qnotempinc to prevent tempinc creation/usage
#  -I/gsa/yktgsa/projects/b/bluematter/bgl/include 
#  -L/gsa/yktgsa/projects/b/bluematter/bgl/rios_aix_5/lib -lgsl 

# use when the cbc/utils test drivers are used
BG_AUX_FLAGS_CBCUTILS = -bmaxdata:0x80000000  -DNO_PK_PLATFORM 
# Used for xerces-c 1.5
BG_AUX_FLAGS_XERCES_1_5 = -qfuncsect -DAPP_NO_THREADS -qnotempinc \
   -DXML_USE_NATIVE_TRANSCODER \
   -DXML_USE_INMEM_MESSAGELOADER

# Used for regression utilities build
# which requires the C++ xstream library from
# http://xstream.sourceforge.net/
# to enable reading and writing of compressed input/output streams
BG_AUX_FLAGS_REGRESSION = -I/usr/local/include

# Used for xerces-c 1.6
# Note: When linking, need flags: -lpthreads_compat -lbsd
BG_AUX_FLAGS_XERCES_1_6 = \
        -qnotempinc \
        -DXML_USE_NATIVE_TRANSCODER \
        -DXML_USE_INMEM_MESSAGELOADER \
        -DXML_USE_PTHREADS \
        -DXML_USE_NETACCESSOR_SOCKET

# Used for xalan 1.3
BG_AUX_FLAGS_XALAN_1_3 = \
        -qnotempinc \
        -D_THREAD_SAFE \
        -DAIX


# Used for xalan-c 1.2
BG_AUX_FLAGS_XALAN_1_2 =  -qfuncsect -DAPP_NO_THREADS -qnotempinc 

.if !empty(CONTEXT:Mrios_aix_*)
BG_AUX_FLAGS_CBCUTILS += -bmaxdata:0x80000000
BG_AUX_FLAGS_XERCES_1_5 += -bmaxdata:0x20000000
BG_AUX_FLAGS_XALAN_1_3 += -bmaxdata:0x20000000
BG_AUX_FLAGS_XALAN_1_2 += -bmaxdata:0x20000000
.endif

# Used for Python extension building
BG_AUX_FLAGS_PYTHON = -qnotempinc -I/u/germain/projects/cbc/local/include/python2.1

## Add '-qnoeh' to kernel, becuase we don't want the housekeeping that ability
## to handle exceptions would imply. (Destructors for local variables won't run
## if an exception is thrown through a function)
#BG_AUX_FLAGS_ = -qnoeh

.if  !empty(CONTEXT:Mrios64_aix*) || !empty(CONTEXT:Mppc64_linux_*)
OBJMODE_FLAGS = -q64
.endif

.if  !empty(CONTEXT:Mrios64_aix*)
ARFLAGS += -X 64
.endif

CLFLAGS += \
  $(OBJMODE_FLAGS) \
  $(GFLAGS) \
  $(BG_AUX_FLAGS_$(BG_AUXILIARY)) \
  $(PK_COMPILER_FLAGS) \
  -qfuncsect \
#  -DPK_SMP \
  
.if !empty(CONTEXT:Mrios_aix_*) || !empty(CONTEXT:Mrios64_aix*)
CLFLAGS += -DPK_AIX \
           -qfuncsect
           
.endif

.if $(BG_TRUST_LEVEL) == 0
  CLFLAGS += -DPKFXLOG
.elif $(BG_TRUST_LEVEL) == 1
# Nothing special
.elif $(BG_TRUST_LEVEL) == 2
  CLFLAGS += -DNDEBUG
.endif

IPAFLAGS ?=                     \
  -qipa=partition=100000000     \
  -qipa=list=$(.PREFIX).ipalst  \
  -qipa=list=long               \
  -qipa=level=1                 \
  -qlist                        \

 CFLAGS += $(CLFLAGS)


.if !empty(CONTEXT:Mrios_aix*) || !empty(CONTEXT:Mrios64_aix*)
  LDFLAGS += $(CLFLAGS)
.endif

.if !empty(CONTEXT:Mrios_aix*) || !empty(CONTEXT:Mrios64_aix*)
# At O3, this would get reciprocal square root directly by using the 'estimate' instruction
#  CODE_DETAIL_FLAGS ?= -qarch=ppcgr -qtune=pwr3
  CODE_DETAIL_FLAGS ?= -qarch=pwr4
# Hardware square root followed by divide
#  CODE_DETAIL_FLAGS ?= -qarch=pwr4 -qtune=pwr4
.endif
OPT_LEVEL_0 =
OPT_LEVEL_1 =
OPT_LEVEL_2 = -O2 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_3 = -O3 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_4 = -O4 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL_5 = -O5 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))

.endif

.if !empty(CONTEXT:Mx86_linux_*)
CLFLAGS += \
  $(OBJMODE_FLAGS) \
  $(GFLAGS) \
  $(BG_AUX_FLAGS_$(BG_AUXILIARY)) \
  $(PK_COMPILER_FLAGS) \

  CCFAMILY = gnu
  CCTYPE = cpp
  CFLAGS += \
    -D PK_GCC \
    -D PK_LINUX \
    -D LINUX \
    $(CLFLAGS) \

  LDFLAGS += $(CLFLAGS) -Wl,-z -Wl,muldefs

  CAN_BUILD_MPI ?= 0
  CAN_BUILD_PROBSPEC ?= 0
  
OPT_LEVEL_0 =
OPT_LEVEL_1 =
OPT_LEVEL_2 = -O2 $(CODE_DETAIL_FLAGS) 
OPT_LEVEL_3 = -O3 $(CODE_DETAIL_FLAGS) 
OPT_LEVEL_4 = -O4 $(CODE_DETAIL_FLAGS) 
OPT_LEVEL_5 = -O5 $(CODE_DETAIL_FLAGS) 
OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))
.endif

.if !empty(CONTEXT:Mbgl_cnk_*)

MPICFLAGS = -DPK_MPICH

## Symbols on, for ASAN/CNK builds
#GFLAGS = -g 

CLFLAGS += \
  $(GFLAGS) \
  $(BG_AUX_FLAGS_$(BG_AUXILIARY)) \
  -DPK_BGL \
  -DPK_PARALLEL \
  -DEXCEPTIONS_UNAVAILABLE \
  -DARCH_HAS_FSEL \
#  -I $(BGL_INSTALL)/bglsys/include \

# Smaybe et 'c99complex' so we can use C99-style complex numbers in the BG/L fabric
#  (to avoid the need for C++ style 'complex<double>' and its header file)
#  -qlanglvl=c99complex \
XLCFLAGS += \
  -qsuppress=1540-1087:1540-1088:1540-1090:1540-0700:1540-1090 \
  -qlonglong \
  -qmaxmem=-1 \
  -qstaticinline \
  -qdebug=except \
  -qnoeh \
  -qnounwind \


.if $(BG_TRUST_LEVEL) == 0
  CLFLAGS += -DPKFXLOG
.elif $(BG_TRUST_LEVEL) == 1
# Nothing special
.elif $(BG_TRUST_LEVEL) == 2
  CLFLAGS += -DNDEBUG
.endif

#CLFLAGS += \
#	-DFIONBIO=-1 
#-D__KERNEL__ \
#	-D_C_SPACE=0x01 \
#	-D_C_PRINT=0x02 \
#	-D_C_GRAPH=0x04 \
#	-D_C_PUNCT=0x08 \
#	-D_C_ALNUM=0x10 \
#	-D_C_DIGIT=0x20 \
#	-D_C_XDIGIT=0x40 \
#	-D_C_ALPHA=0x80 \
#	-D_C_UPPER=0x100 \
#	-D_C_LOWER=0x200 \
#	-D_C_ASCII=0x400 \
#	-D_C_CNTRL=0x800 \
#	-D_C_BLANK=0x1000 \
#	-D_ERRNO_MAX=255 \
#	-D__NO_INLINE__ \
#	-DLLONG_MAX=9223372036854775807LL \
#	"-DLLONG_MIN=(-LLONG_MAX-1LL)" \
#	-DULLONG_MAX=18446744073709551615ULL

 CFLAGS += $(CLFLAGS)

OPT_LEVEL_0 =
OPT_LEVEL_1 =
OPT_LEVEL_2 = -O2 -DARCH_HAS_FSEL
OPT_LEVEL_3 = -O3 -DARCH_HAS_FSEL
OPT_LEVEL_4 = -O4 -DARCH_HAS_FSEL
OPT_LEVEL_5 = -O5 -DARCH_HAS_FSEL
OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))

  CAN_BUILD_MPI ?= 0
  CAN_BUILD_SMP ?= 0 # No 'pthreads' for compute-node-kernel
  CAN_BUILD_PROBSPEC ?= 0

.endif

.if !empty(CONTEXT:Mppc_linux_*) || !empty(CONTEXT:Mppc64_linux_*)
  .if $(LINUX_USE_GCC) == 1
    CCFAMILY = gnu
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_GCC 
  .else
    CCFAMILY = cset
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_XLC -qmaxmem=-1 -qstaticinline
    
  .endif
  CAN_BUILD_MPI ?= 0
  CAN_BUILD_PROBSPEC ?= 1
# Add '-qfuncsect' to ICU and XML, becuase some symbols are not coherently present
# Add '-DAPP_NO_THREADS' to XML, because we lock an uninitialised mutex otherwise
# Add -qnotempinc to prevent tempinc creation/usage
# Add -bmaxdata to try to address memory capacity required by xml
BG_AUX_FLAGS_1 = -DAPP_NO_THREADS -qnotempinc

MPICFLAGS = -DPK_MPI
# Used for db2 cli utilities build
# and for analysis which also needs gsl
# Add -qnotempinc to prevent tempinc creation/usage
.if !empty(CONTEXT:Mppc_linux_*)
BG_AUX_FLAGS_DB2 = -I${DB2_INSTALL}/include -L${DB2_INSTALL}/lib -ldb2 -qnotempinc
.else
BG_AUX_FLAGS_DB2 = -I${DB2_INSTALL}/include -L${DB2_INSTALL}/lib64 -ldb2 -qnotempinc
.endif
#  -I/gsa/yktgsa/projects/b/bluematter/bgl/include -L/gsa/yktgsa/projects/b/bluematter/bgl/rios_aix_5/lib -lgsl 

# use when the cbc/utils test drivers are used
BG_AUX_FLAGS_CBCUTILS = -DNO_PK_PLATFORM 


# Used for xerces-c 1.5
BG_AUX_FLAGS_XERCES_1_5 =  -DAPP_NO_THREADS -qnotempinc \
   -DXML_USE_NATIVE_TRANSCODER \
   -DXML_USE_INMEM_MESSAGELOADER

# Used for xerces-c 1.6
# Note: When linking, need flags: -lpthreads_compat -lbsd
BG_AUX_FLAGS_XERCES_1_6 = \
        -qnotempinc \
        -DXML_USE_NATIVE_TRANSCODER \
        -DXML_USE_INMEM_MESSAGELOADER \
        -DXML_USE_PTHREADS \
        -DXML_USE_NETACCESSOR_SOCKET

# Used for xalan 1.3
BG_AUX_FLAGS_XALAN_1_3 = \
        -qnotempinc \
        -D_THREAD_SAFE \


# Used for xalan-c 1.2
BG_AUX_FLAGS_XALAN_1_2 =  -DAPP_NO_THREADS -qnotempinc \

# Used for Python extension building
BG_AUX_FLAGS_PYTHON = -qnotempinc -I/u/germain/projects/cbc/local/include/python2.1

BG_AUX_FLAGS_ = 

CLFLAGS += \
  $(GFLAGS) \
  $(BG_AUX_FLAGS_$(BG_AUXILIARY)) \
  $(PK_COMPILER_FLAGS) \
  -DPK_LINUX \
  -DLINUX \
  -DPK_SMP \

.if $(BG_TRUST_LEVEL) == 0
  CLFLAGS += -DPKFXLOG
.elif $(BG_TRUST_LEVEL) == 1
# Nothing special
.elif $(BG_TRUST_LEVEL) == 2
  CLFLAGS += -DNDEBUG
.endif

IPAFLAGS ?=                     \
  -qipa=partition=100000000     \
  -qipa=list=$(.PREFIX).ipalst  \
  -qipa=list=long               \
  -qipa=level=1                 \
  -qlist                        \

 CFLAGS += $(CLFLAGS)


  LDFLAGS += $(CLFLAGS)

CODE_DETAIL_FLAGS = 
OPT_LEVEL_0 =
OPT_LEVEL_1 =
OPT_LEVEL_2 = -O2 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_3 = -O3 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_4 = -O4 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL_5 = -O5 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))

.endif

.if !empty(CONTEXT:Mppc64_linux_*)
  .if $(LINUX_USE_GCC) == 1
    CCFAMILY = gnu
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_GCC 
  .else
    CCFAMILY = cset
    CCTYPE = cppr
    PK_COMPILER_FLAGS=-DPK_XLC -qmaxmem=-1 -qstaticinline
    
  .endif
  CAN_BUILD_MPI ?= 0
  CAN_BUILD_PROBSPEC ?= 1
# Add '-qfuncsect' to ICU and XML, becuase some symbols are not coherently present
# Add '-DAPP_NO_THREADS' to XML, because we lock an uninitialised mutex otherwise
# Add -qnotempinc to prevent tempinc creation/usage
# Add -bmaxdata to try to address memory capacity required by xml
BG_AUX_FLAGS_1 = -DAPP_NO_THREADS -qnotempinc

MPICFLAGS = -DPK_MPI
# Used for db2 cli utilities build
# and for analysis which also needs gsl
# Add -qnotempinc to prevent tempinc creation/usage
#BG_AUX_FLAGS_DB2 = -I/usr/opt/db2_08_01/include -I/gsa/yktgsa/projects/b/bluematter/bgl/include -L/usr/opt/db2_08_01/lib -ldb2 -qnotempinc
#BG_AUX_FLAGS_DB2 = -I/opt/IBM/db2/V8.1/include -I/gsa/yktgsa/projects/b/bluematter/bgl/include -L/opt/IBM/db2/V8.1/lib64 -ldb2 -qnotempinc
BG_AUX_FLAGS_DB2 = -I${DB2_INSTALL}/include -L${DB2_INSTALL}/lib64 -ldb2 -qnotempinc
#  -L/gsa/yktgsa/projects/b/bluematter/bgl/rios_aix_5/lib -lgsl 

# use when the cbc/utils test drivers are used
BG_AUX_FLAGS_CBCUTILS = -DNO_PK_PLATFORM 


# Used for xerces-c 1.5
BG_AUX_FLAGS_XERCES_1_5 =  -DAPP_NO_THREADS -qnotempinc \
   -DXML_USE_NATIVE_TRANSCODER \
   -DXML_USE_INMEM_MESSAGELOADER

# Used for xerces-c 1.6
# Note: When linking, need flags: -lpthreads_compat -lbsd
BG_AUX_FLAGS_XERCES_1_6 = \
        -qnotempinc \
        -DXML_USE_NATIVE_TRANSCODER \
        -DXML_USE_INMEM_MESSAGELOADER \
        -DXML_USE_PTHREADS \
        -DXML_USE_NETACCESSOR_SOCKET

# Used for xalan 1.3
BG_AUX_FLAGS_XALAN_1_3 = \
        -qnotempinc \
        -D_THREAD_SAFE \


# Used for xalan-c 1.2
BG_AUX_FLAGS_XALAN_1_2 =  -DAPP_NO_THREADS -qnotempinc \

# Used for Python extension building
BG_AUX_FLAGS_PYTHON = -qnotempinc -I/u/germain/projects/cbc/local/include/python2.1

BG_AUX_FLAGS_ = 


CLFLAGS += \
  -q64 \
  $(GFLAGS) \
  $(BG_AUX_FLAGS_$(BG_AUXILIARY)) \
  $(PK_COMPILER_FLAGS) \
  -DPK_LINUX \
  -DLINUX \
  -DPK_SMP \

.if $(BG_TRUST_LEVEL) == 0
  CLFLAGS += -DPKFXLOG
.elif $(BG_TRUST_LEVEL) == 1
# Nothing special
.elif $(BG_TRUST_LEVEL) == 2
  CLFLAGS += -DNDEBUG
.endif

IPAFLAGS ?=                     \
  -qipa=partition=100000000     \
  -qipa=list=$(.PREFIX).ipalst  \
  -qipa=list=long               \
  -qipa=level=1                 \
  -qlist                        \

 CFLAGS += $(CLFLAGS)


  LDFLAGS += $(CLFLAGS)

CODE_DETAIL_FLAGS = 
OPT_LEVEL_0 =
OPT_LEVEL_1 =
OPT_LEVEL_2 = -O2 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_3 = -O3 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL
OPT_LEVEL_4 = -O4 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL_5 = -O5 $(CODE_DETAIL_FLAGS) -DARCH_HAS_FSEL $(IPAFLAGS)
OPT_LEVEL ?= $(OPT_LEVEL_$(BG_OPT_LEVEL))

.endif

# If not specifically set up, try a build with 'gcc'
CCFAMILY ?= gnu
CCTYPE ?= cpp
# And hope that we can do SMP and MPI, and build the probspec tool
CAN_BUILD_SMP ?= 0
CAN_BUILD_MPI ?= 0
CAN_BUILD_PROBSPEC ?= 1

MDLIBS       = \
#            $(LIB_PREF)pkrandom$(LIB_SUFF)      \
            $(LIB_PREF)pktrace$(LIB_SUFF) \
            $(LIB_PREF)p3me$(LIB_SUFF) \
            $(LIB_PREF)fftw$(LIB_SUFF) \
            $(LIB_PREF)rfftw$(LIB_SUFF) \
#           $(LIB_PREF)msdif$(LIB_SUFF)      \

PKSMPLIBS    = \
            $(LIB_PREF)pksmp_platform$(LIB_SUFF)    \
            $(LIB_PREF)pkfxlogger$(LIB_SUFF)    \
            $(LIB_PREF)pkexception$(LIB_SUFF)   \
            $(LIB_PREF)pksmp_reactor$(LIB_SUFF) \

PKUNILIBS    = \
            $(LIB_PREF)pkuni_platform$(LIB_SUFF)    \
            $(LIB_PREF)pkfxlogger$(LIB_SUFF)    \
            $(LIB_PREF)pkexception$(LIB_SUFF)   \

SETUPLIBS    = \
            $(LIB_PREF)pkfxlogger$(LIB_SUFF)    \

PKLIBS       = $(PKSMPLIBS) \
#              $(LIB_PREF)pktrace$(LIB_SUFF) \

PKSPILIBS    = \
            $(LIB_PREF)pkspi_platform$(LIB_SUFF)    \
            $(LIB_PREF)pktrace$(LIB_SUFF)    \
            $(LIB_PREF)pkfxlogger$(LIB_SUFF)    \
            $(LIB_PREF)pkexception$(LIB_SUFF)   \
            $(LIB_PREF)pkspi_reactor$(LIB_SUFF) \
            $(LIB_PREF)blade$(LIB_SUFF) \

PKMPILIBS    = \
            $(LIB_PREF)pkmpi_platform$(LIB_SUFF)    \
            $(LIB_PREF)pktrace$(LIB_SUFF)    \
            $(LIB_PREF)pkfxlogger$(LIB_SUFF)    \
            $(LIB_PREF)pkexception$(LIB_SUFF)   \
            $(LIB_PREF)pkmpi_reactor$(LIB_SUFF) \


.if !empty(CONTEXT:Mrios_aix*)  || !empty(CONTEXT:Mrios64_aix*)
LDFLAGS += -L/usr/local/lib${OBJ_MODE} -L/usr/lib -lrts
.endif

.if !empty(CONTEXT:Mbgl_cnk*)
LDFLAGS += -L$(BGL_INSTALL)/bglsys/lib 
PKMPILIBS += $(LIB_PREF)mpich.rts$(LIB_SUFF) \
	     $(LIB_PREF)msglayer.rts$(LIB_SUFF) \
	     $(LIB_PREF)rts.rts$(LIB_SUFF) \
	     $(LIB_PREF)devices.rts$(LIB_SUFF) 
.endif
# Set PG_PROFILED to get call graph profiling.
PG_PROFILED ?= 0
.if $(PG_PROFILED) != 0
PG_FLAGS ?= -qnoinline     # With profiling, we likely want to see the full call graph without inlining
CFLAGS += -pg -g $(PG_FLAGS)
LDFLAGS += -pg -g $(PG_FLAGS)
  # With call-graph profiling, we likely want diagnostic math too ...
BLUEGENE_DIAG_MATH ?= 1
.endif

# Set XG_PROFILED to get something which XGPROF will put time ticks on, without invading the code
XG_PROFILED ?= 0
.if $(XG_PROFILED) != 0
.if defined(VACPP6)
CFLAGS += -qlinedebug $(XG_FLAGS)
LDFLAGS += -pg $(XG_GLAGS)
.else
CFLAGS += -g $(XG_FLAGS)
LDFLAGS += -pg -g $(XG_FLAGS) -L/usr/vacpp/lib -L/usr/lib
.endif
.endif

# Set DIAG_MATH to get diagnostic versions of math routines e.g. square roots
BLUEGENE_DIAG_MATH ?= 0
.if $(BLUEGENE_DIAG_MATH) != 0
CFLAGS += -DBLUEGENE_DIAG_MATH
.endif

# Specials
CAN_BUILD_EWALD ?= 1

MMFLAGS ?= \
# -B/afs/tor/u/mendell/public/blueLight/ -tbcd \
# -qdebug=newsched1:newsched2:regpres:maxgridiculous:sqrtextra \

.if defined(VACPP6)

CFLAGS  +=        $(MMFLAGS)
LDFLAGS  +=       $(MMFLAGS)

.endif

# Compiling for AIX ?
.if !empty(CONTEXT:M*_aix_*)

# MPI compilation variables
_cset_mpcc_CC_    ?= mpcc ${DEPENDENCIES:D-M}
_cset_mpcpp_CC_   ?= mpCC ${DEPENDENCIES:D-M}
_cset_mpcppr_CC_  ?= mpCC_r ${DEPENDENCIES:D-M}
_cset_mpcc_LD_    ?= mpcc
_cset_mpcpp_LD_   ?= mpCC
_cset_mpcppr_LD_  ?= mpCC_r
_cset_mpcc_SHLD_    ?= ld
_cset_mpcpp_SHLD_   ?= makeC++SharedLib
_cset_mpcppr_SHLD_  ?= makeC++SharedLib_r
_cset_mpcc_SHLDFLAGS_    ?= -bnoentry -bM:SRE -bexpall -lc
_cset_mpcpp_SHLDFLAGS_   ?= -bnoentry -p0
_cset_mpcppr_SHLDFLAGS_  ?= -bnoentry -p0

.endif

.if !empty(CONTEXT:Mppc_linux_*) || !empty(CONTEXT:Mppc64_linux_*)
_cset_cc_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlc ${DEPENDENCIES:D-M}
_cset_cpp_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlC ${DEPENDENCIES:D-M}
_cset_cppr_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlC_r ${DEPENDENCIES:D-M}
_cset_cc_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlc ${DEPENDENCIES:D-M}
_cset_cpp_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlC ${DEPENDENCIES:D-M}
_cset_cppr_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/xlC_r ${DEPENDENCIES:D-M}
.endif

.if !empty(CONTEXT:Mbgl_cnk_*)
_cset_cc_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlc ${DEPENDENCIES:D-M} -DPK_XLC $(XLCFLAGS) 
_cset_cpp_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlC ${DEPENDENCIES:D-M} -DPK_XLC $(XLCFLAGS)
_cset_cppr_CC_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlC_r ${DEPENDENCIES:D-M} -DPK_XLC $(XLCFLAGS)
_cset_cc_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlc ${DEPENDENCIES:D-M} -DPK_XLC
_cset_cpp_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlC ${DEPENDENCIES:D-M} -DPK_XLC
_cset_cppr_LD_      ?= /opt/ibmcmp/vacpp/bg/9.0/bin/blrts_xlC_r ${DEPENDENCIES:D-M} -DPK_XLC

_gnu_cc_CC_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/gcc -DPK_GCC
_gnu_cpp_CC_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/g++ -DPK_GCC
_gnu_cppr_CC_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/g++ -DPK_GCC
_gnu_cc_LD_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/gcc -DPK_GCC
_gnu_cpp_LD_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/g++ -DPK_GCC
_gnu_cppr_LD_ ?= /bgl/BlueLight/ppcfloor/blrts-gnu/powerpc-bgl-blrts-gnu/bin/g++ -DPK_GCC


PROG_SUFF=.rts
LIB_SUFF=.rts.a

.endif

